history | grep git
git commit --amend
git add .
git status
git pull origin master -r
git checkout move-to-middleware-v2
git push origin master
git commit -m "Increased padding on pre for docs"
git pull origin master
git checkout master
git commit -m "WIP"
git push origin move-to-middleware-v2
git commit -m "Updated Snythesize tests to use the new middleware fields"
git commit -m "Added comment to commented out test"
git add core/middleware_test.go 
git push origin move-to-middleware-v2 -f
git commit -m "Added remote to the GET endpoint"
git commit -m "Added a way to set remote middleware"
git checkout core/middleware_test.go -p
git checkout core/middleware_test.go -r
git checkout -p
git checkout core/synthesize*
git checkout core/synthesize
git checkout core/models_test.go 
git checkout core/hoverfly_test.go 
git stash pop
git stash
git stash list
git checkout core/middleware.go 
git rebase origin/master
git push origin hash-tests
git commit -m "When creating a hash, the query parameters are encoded (they get sorted alphabetically as part of this)"
git commit -m "Added some tests to the Hash() function on RequestDetails"
git checkout hash-tests
git branch hash-tests
git checkout .
git commit -m "GET handler for v2 middleware now outputs binary and script"
git branch move-to-middleware-v2
git push origin middleware-v2 -f
git commit -m "Added a test for just a binary with SetMiddleware"
git commit -m "New SetMiddleware function now checks to make sure it works"
git push origin middleware-v2
git commit -m "Added a new SetMiddleware function to Hoverfly which uses new script and binary values"
git add core
git add core/hoverfly_service.go 
git commit -m "Added a new GetMiddleware function on Hoverfly to return binary and script"
git commit -m "Added a function for getting the script"
git commit -m "Removed constructor from SetMiddleware()"
git commit -m "Can now use SetBinary() function to set binary to empty string"
git commit -m "Forgot to include the test"
git commit -m "Made a delete function for Middleware for when you want to remove the script"
git commit -m "Returning an error if writing to temp file fails"
git commit -m "Removes old script when creating new one"
git commit -m "Created a way to provide a script to the Middleware struct which it will write as a temp file"
git commit -m "Added the binary field to Middleware along with the ability to set the binary and run a check"
git commit -m "v1 middleware API now serves redirects"
git branch middleware-v2 -m
git branch remove-v1 -m
git checkout middleware-v2
git branch middleware-v2
git push origin middleware-remove-pipe
git commit -m "Removed pipelines"
git checkout middleware-remove-pipe
git checkout middleware-remove-pipe ]
git branch middleware-remove-pipe
git branch middleware-remove-pipe -d
git checkout middleware-remove-pipe 
git push origin middleware-upload-script
git commit -m "Middleware now has Execute function which will determine whether middleware is to be run locally or remotely"
git commit -m "Renamed Middleware.Script to Middleware.FullCommand"
git commit -m "Moved the local middleware check onto the middleware struct"
git commit -m 
git commit -m "SynthesizeResponse now takes the Middleware object"
git commit -m "Middleware is now using the Middleware struct"
git commit -m "Removing any passing around of the middleware string"
git commit -m "ApplyMiddleware on the Constructor now takes a Middleware struct instead of a string"
git commit -m "Moved the ExecuteMiddlewareLocally onto the middleware struct"
git commit -m "Created a middleware struct and moved the ExecuteMiddlewareRemotely function onto it"
git commit -m "Updating middleware to use v2 views of requestresponespairs, though they are identical to the v1 views"
git checkout middleware-upload-script
git branch middleware-upload-script
git commit -m "Making sure it works"
git add src
cd src/github.com/
hoverctl middleware "/Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/core/examples/middleware/modify_response/modify_response.py" 
cd go/src/github.com/SpectoLabs/hoverfly/
git add pom.xml 
git add src/
git add swagger.yaml 
git add output.json 
mv go/src/github.com/SpectoLabs/swagger-to-hoverfly java/
git clone git@github.com:SpectoLabs/hoverfly-docs.git
git commit -m "Updated the formula to use Hoverfly v0.9.2"
git commit -m "Update simulation meta data to v0.9.2"
git add functional-tests/hoverctl/import_export_test.go 
git add core/hoverfly_service*
git add core/hoverfly_service
git checkout core
git push origin hoverctl-start-ports -f
git checkout hoverctl-start-ports
git push origin functional-tests-tidy-up
git commit -m "Start Hoverfly once"
git add functional-tests/hoverctl/hoverfly_auth_test.go 
git commit -m "Removing before as it can just exist in the test suite"
git add functional-tests/hoverctl/hoverfly_end_to_end_suite_test.go 
git checkout functional-tests-tidy-up
git branch functional-tests-tidy-up
git push origin hoverctl-pretty-json -f
git checkout hoverctl-pretty-json
git push origin v2-simulation-error
git commit -m "Invalid json now triggers a 400 error, not a 500 error"
git add core/handlers/v2/simulation_handler_test.go 
git stuats
git statusgit status
git checkout v2-simulation-error 
git checkout v2-simulation-put-bug
git push origin hoverctl-pretty-json
git commit -m "hoverctl will now pretty format json when exporting from Hoverfly"
git add hoverctl/hoverfly.go 
git add functional-tests/hoverctl/
git branch hoverctl-pretty-json
git branch master
git commit -m "hoverctl will now report the error when it fails to import"
git commit -m "Simulation endpoint will now validate the full schema"
git add functional-tests/core/ft_api_test.go 
git add core/handlers/v2/views.go 
git commit -m "Checking the validity of simulation json"
git commit -m "Added govalid to glide"
git add core/vendor/github.com/
git add core/glide*
git reset HEAD hoverctl
glide get github.com/gima/govalid/v1
git push origin v2-simulation-error 
git commit -m "Will now error if json is invalid"
git checkout v2-simulation-error
git push origin hoverctl-start-ports
git commit -m "Starting hoverfly with hoverctl now prints the ports used out"
git add hoverctl/main.go 
git add functional-tests/hoverctl/start_stop_hoverfly_test.go 
git branch hoverctl-start-ports
git commit -m "Updated the error messages in the v2 simulation handler"
git branch v2-simulation-error
git push origin hoverctl-stop-all -f
git checkout hoverctl-stop-all
git push origin --delete develop
git push origin logging-improvements
git branch -m logging-improvements
git push origin develop --force
git checkout develop
git push origin update-readme
git commit -m "Updated the link to the docs"
git checkout update-readme
git branch update-readme
git push origin develop
git commit -m "Added some debug logging"
git commit -m "Negroni logger now will use logformatter based off of cfg"
git commit -m "Added log-format flag to hoverctl"
git checkout functional-tests/hoverctl/start_stop_hoverfly_test.go 
git commit -m "Added log-format to the flag builder"
git commit -m "Added log format config"
git commit -m "Changing the default to text"
git commit -m "Changed --logs to --log-format"
git commit -m "Added a --logs flag for switching between json or text"
git checkout functional-tests/
git add core/cmd/hoverfly/main.go 
git reset HEAD functional-tests/core/ft_logging_test.go 
git checkout functional-tests/core/
git add functional-tests/core/ft_logging_test.go 
git branch develop
git branch develop -D
git commit -m "Fixed a bug where Hoverfly blocks after failing to find a request in the memory_cache"
git add functional-tests/core/ft_modes_test.go 
git add core/cache/memory_cache*
git checkout core/matching/matcher.go 
git checkout core/hoverfly.go
git checkout core/cache/boltdb_cache.go 
git branch -D develop
git branch -d develop
vim .git/config
git commit -m "Updated the formula to use Hoverfly v0.9.1"
git commit -m "Added the defaults for hoverfly.tls.disable config"
git branch develop -d
git
git checkout config.toml 
git checkout content
git checkout layouts
git checkout layout
git checkout config
git commit -m "Added test to the makefile"
git add Makefile 
git checkout public/
git subtree pull --prefix=public git@github.com:SpectoLabs/hoverfly-docs.git gh-pages -r
git subtree pull --prefix=public git@github.com:SpectoLabs/hoverfly-docs.git gh-pages
git pull
git rebase origin/develop
git pull origin develop -r
git push origin hoverctl-tidyup -f
git push origin hoverctl-tidyup
git checkout hoverctl-tidyup
git push origin hoverctl-config-command -f
git push origin hoverctl-config-command
git checkout hoverctl-config-command
git push origin hoverctl-config -f
git checkout hoverctl-config
git push origin hoverctl-start-disable-tls -f
git checkout hoverctl-start-disable-tls
git push origin hoverctl-start -f
git rebase origin/hoverctl-start
git checkout hoverctl-start
git push origin fix-flaky-test -f
git checkout fix-flaky-test
git commit -m "Moved the binary stopping stuff into stopBinary()"
git push origin hoverctl-stop-all
git commit -m "Added GetAllPids() which will search the Hoverfly directory for .pid files"
git add hoverctl/hoverfly_directory*
git branch hoverctl-stop-all
git commit -m "Removing unused variables from config_test"
git add hoverctl/config_test.go 
git commit add hoverctl/config_test.go 
git commit -m "Tidied up the config tests as I thought they were getting a bit hard to read"
git commit -m "Moved start and stop to the top of command list"
git clone https://github.com/SpectoLabs/hoverpy
git commit -m "Renamed startWithFlags() to start() as I had removed the redundant start() functional ready"
git commit -m "Removing unused start() function"
git commit -m "Removing unused simulation structs and test around this"
git branch hoverctl-tidyup
git commit -m "git status"
cat /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/.hoverfly/config.yaml
git branch hoverctl-config-command
git push origin hoverctl-config
git commit -m "Added a functional test around launching Hoverfly as a webserver with the setting from the config.yml"
git commit -m "Extended the WriteConfiguration() function to writ webserver config"
git commit -m "Added a functional test around launching Hoverfly with settings from config.yml"
git commit -m "Db setting now in config"
git commit -m "Admin port and proxy port now set by config"
git commit -m "Removed accidental log"
git commit -m "Config now builds the flags, goodbye flag builder, hello hoverfly launch defaults"
git commit -m "Added BuildFlags() to config"
git commit -m "Passing override flags to config"
git commit -m "Read all the new config from viper"
git commit -m "Changed SetWebserver() to take a string to match the input from hoverctl"
git add hoverctl/config*
git push origin hoverctl
git commit -m "Added disable-tls to config"
git commit -m "Added certificate and key to the config"
git commit -m "Added a test around default config being written"
git commit -m "Added webserver to Config"
git commit -m "Added some more tests around the config"
git commit -m "Tidied up the tests a bit"
git commit -m "Changed the GetConfig() function on Config and added setters instead"
git branch hoverctl-config -m
git branch hoverctl-config -d
git branch hoverctl-config
git checkout hoverctl-start-auth-enabled
git branch hoverctl-start-auth-enabled
git pull origin hoverctl-start-disable-tls
git checkout hoverctl-disable-tls
git checkout hoverctl/hoverfly_directory.go 
git push origin hoverctl-start-refactor
git branch hoverctl-start-refactor -m
git commit -m "Created a Flag struct which wraps the string array"
git checkout hoverctl-stat-ports
git push origin hoverctl-start-disable-tls
git commit -m "Added the --disable-tls flag to disable tls-verficiation on Hoverfly"
git checkout hoverctl-stat-disable-tls
git branch hoverctl-start-disable-tls
git push origin hoverctl-start
git commit -m "Changed the FlagsBuilder to put the value to a flag in the same string, with an equals, instead of the riskier way of hoping the order of the array doesn't change"
git commit -m "Refactored the flag stuff into its own little FlagsBuilder so that it could be easily testable"
git commit -m "You can now specify the certificate and key you want to use when using hoverctl start"
git commit -m "Added logs to log when the certificate and key have bene provided"
git reset HEAD functional-tests/hoverctl/testdata/
git checkout core/cert.pem 
git add functional-tests/hoverctl/testdata/
/Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/target/hoverfly -db memory -ap 8888 -pp 8500 -cert cert.pem -key key.pem
git checkout hoverctl/hoverfly.go 
git commit -m "hoverctl will now start the Hoverfly from the same directory before looking on the path"
git add glide.lock 
git add vendor/github.com/kardianos/osext/
git checkout glide.lock
git commit -m "Added osext to hoverctl"
git add hoverctl/glide.yaml 
git branch hoverctl-start
git push origin fix-flaky-test
git commit -m "Fixed the flakey test that has a 50% pass rate"
git branch fix-flaky-test
git checkout hoverctl-destination
git checkout hoverfly-simulate-pass-through
git branch hoverfly-simulate-pass-through
git push origin hoverctl-destination
git commit -m "The destination setting on Hoverfly will now match on full path"
git commit -m "Refactoring the tests slightly"
git commit -m "Fixed typo in names of destination functional tests"
git commit -m "Refactored the test so that we don't duplicate code for the fake server"
git commit -m "Added a positive test case for destination config"
git commit -m "Added a functional test around the destination config"
git commit -m "Added a helper to set the destination for Hoverfly"
git reset HEAD functional-tests/core/ft_destination_test.go 
git add functional-tests/core/ft_suite_test.go 
git checkout core/proxy.go 
git commit -m "There is now a --dry-run option when specifying the destination so that you can test your regex"
git commit -m "When parsing regexp to the destination command, it'll now check if the regexp is valid"
git checkout hoverctl
git checkout hoverfly-destination-fullpath
git branch hoverfly-destination-fullpath
git commit -m "Trying to tidy up the Hoverfly struct so that it is easier to follow"
git commit -m "Fixed typo"
git commit -m "Added destination command to hoverctl"
git branch hoverctl-destination
git push origin hoverctl-mode-v2
git commit -m "Removing some magic strings"
git commit -m "Setting middleware now uses v2 API"
git push origin develop -f
git clone git@github.com:SpectoLabs/mirage.git
git commit -m "Getting middleware uses the v2 API"
git commit -m "Deleting now uses the v2 API"
git checkout hoverctl-mode-v2
git push origin hoverctl-mode-v2 -f
git rebase master
git rebase origin master
git pull -r
git commit -m "Setting mode now uses v2 api"
git rm -rf core/errors
git checkout Makefile 
git checkout gh-pages
git checkout CNAME
git pull origin gh-pages
git commit -m "Testing out the type of the link to fix the fonts"
git commit -m "Fixing this merge issue"
git subtree push --prefix=public git@github.com:SpectoLabs/hoverfly-docs.git gh-pages
git commit -m "Getting mode now uses the v2 api"
git commit -m "Added a Makefile"
git subtree push --prefix=public git@github.com:SpectoLabs/hoverfly-docs.git gh-pages --squash
git commit -m "Updating public"
git subtree pull --prefix=public git@github.com:SpectoLabs/hoverfly-docs.git gh-pages --squash
git subtree add --prefix=public git@github.com:SpectoLabs/hoverfly-docs.git gh-pages --squash
git commit -m "Removing public"
git commit -m "Removing the old public dir"
git subtree add --prefix=docs git@github.com:SpectoLabs/hoverfly-docs.git gh-pages --squash
git subtree add git@github.com:SpectoLabs/hoverfly-docs.git gh-pages --squash
git rm archetypes/
git push origin gh-pages -f
git push origin gh-pages
git commit -m "Here's a README.md"
git checkout master README.md
git rm --cached (git ls-files)
git checkout --orphan gh-pages
git reset HEAD content/index.md
git checkout gh-pages 
git commit -m "Removing unused Specto structs"
git add hoverctl/spectolab_test.go 
git add hoverctl/spectolab.go 
git add hoverctl/spectolab*
git checkout remove-docs
git checkout update-docs
git push origin remove-docs -f
git branch hoverctl-mode-v2
git add SUMMARY.md 
git push origin remove-docs
vim .git/config 
git commit -m "Removing the docs from the repo, they should now be on the hoverfly.io website"
git branch remove-docs
gitbook build
go get github.com/SpectoLabs/hoverfly
npm install -g gitbook-cli
git commit -m "Updated the hoverfly.io page to include links to the downloadable zips'
git add index.html 
git commit -m "Updated the formula to use Hoverfly v0.9.0"
git add hoverfly.rb 
git commit -m "Fixing circle.yml to set the GIT_TAG_NAME before it runs the script"
git add circle.yml 
git push origin :refs/tags/v0.9.0
git push origin master --tags --force
git push origin master --tags
git tag v0.9.0 -d
git tag
git push origin update-docs
git commit -m "Moved the bit about default certificates to the top of the page"
git pull origin update-docs
git commit -m "Updated the middleware examples to use hoverctl"
git add docs/usage/using_middleware.md 
git commit -m "Added JSON examples to the api reference page"
git add docs/reference/api.md 
git commit -m "Updating JSON examples and example uses of hoverctl import or export"
/Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/target/hoverfly ; exit;
git commit -m "Removing the metadata API documentation as its currently planned to be depricated"
git push origin update-docs -f
git pull origin v0.9.0 -r
git checkout v0.9.0
git commit -m "Wrote up changes around the hoverctl in v0.9.0"
git satus
git push origin hoverctl-import-url
git rebase origin/v0.9.0
git rebase origin/v2-simulation-put-bug
git checkout hoverctl-import-url
git commit -m "Added the ability to import via url"
git branch hoverctl-import-url
git push origin hoverctl-import-v2 
git commit -m "Fixed a typo in an error message"
git add hoverctl
git push origin hoverctl-import-v2 -f
git commit -m "hoverctl import now imports v2 simulations"
git checkout functional-tests/hoverctl/hoverfly_end_to_end_suite_test.go 
git reset HEAD functional-tests/hoverctl/hoverfly_end_to_end_suite_test.go 
git checkout core/handlers/
git reset HEAD core/handlers
git rm -rf functional-tests/hoverctl/testdata-gen/
git checkout hoverctl-import-v2 
git branch
git push origin v2-simulation-put-bug -f
git commit -m "hoverfly.DeleteSimulation() now longer returns an error as the only error that could be returned is the empty bucket error which is unhelpful"
git commit -m "When an error occurs in the SimulationHandler, it will only write the error to the response"
git push origin v2-simulation-put-bug
git commit -m "When you put a simulation, the response will now show the new state, rather than the state after deletion"
git branch v2-simulation-put-bug
git push origin hoverctl-import-v2
git commit -m "There is now a --v1 flag for importing older simulations"
git checkout hoverctl/main.go 
git checkout hoverctl-import-v2
git branch hoverctl-import-v2
git branch hoverctl-import-v2 -d
git checkout hoverctl-export-v2
git push origin hoverctl-export-v2 -f
git commit -m "Import now uses the new v2 api"
git push origin hoverctl-export-v2
git commit -m "Changed the v1 simulation url to a constant"
git branch hoverctl-export-v2
rm -rf github-downloads-count/
github-downloads-count/
git clone git@github.com:mmilidoni/github-downloads-count.git
git commit -m "Removed the localcache as it is now not being used"
git checkout hoverctl/localcache.go
git commit -m "Moved file writing in functional test to prevent flakey failures"
git commit -m "Creating the folder at the start of the test run and then deleting it at the end"
git checkout functional-tests/hoverctl/hoverfly_auth_test.go 
git commit -m "Importing with hoverctl now takes a file path and no longer uses the cache"
git commit -m "GenerateFileName() now should create a random filename in a directory which will be deleted, hopefully there should be uniqueness to each name"
git commit -m "Exporting with hoverctl now takes a file path and no longer uses the cache"
git reset HEAD functional-tests/hoverctl/hoverfly_auth_test.go 
git commit -m "Updated the WriteFile helper to create directories if needed to write the file in hoverctl"
git add hoverctl/file.go 
git commit -m "Removed pull from hoverctl"
git commit -m "Removed push from hoverctl"
git commit -m "Added some simple helpers for reading and writing files"
git checkout hoverctl/simulation_test.go 
git checkout hoverctl/simulation.go 
git checkout hoverctl/simulation*
git commit -m "Fixed typo in Hoverctl help text"
git push origin v2-api-put
git commit -m "PUT /api/v2/simulation is now idempotent"
git commit -m "Added a functional test around the PUT endpoint"
git commit -m "Added a teardown that will ensure the containers are stopped and deleted, don't want any of that state lurking about"
go get -u -v github.com/nsf/gocode
go get -u -v github.com/rogpeppe/godef
go get -u -v github.com/golang/lint/golint
go get -u -v github.com/lukehoban/go-outline
go get -u -v github.com/tpng/gopkgs
go get -u -v github.com/newhook/go-symbols
go get -u -v github.com/cweill/gotests/...
git commit -m "Correctly labeling the DELETE test"
git commit -m "PutSimulation() will now import delays"
git checkout core/matching/request_template_store.go 
git checkout core/models/delay.go 
git checkout core/import_test.go 
git checkout core/handlers/v2
git checkout core/handlers/v1
git commit -m "Making the import not error when there are no pairs to import, as I don't think its its responsibility to do so"
git add core/import.go
git push origin v2-api-put -f
git add core/hoverfly_service_test.go 
git commit -m "Added some tests around PutSimulation() for importing recordings and templates"
git checkout v2-api-put
git branch v2-api-put
git reset HEAD core
git push origin v2-api-get-simulation-templates
git commit -m "Updated GET /api/v2/simulation functional test to include templates"
git commit -m "hoverfly.GetSimulation() now includes templates"
git commit -m "Can convert RequestTemplateResponsePair into a v2.RequestResponsePairView"
git checkout core/hoverfly_service.go
git checkout v2-api-get-simulation-templates
git branch v2-api-get-simulation-templates
git commit -m "Added some more detail around what the middleware value is on the /api/v2/hoverfly/middleware endpoint"
git push origin missing-tests-around-models -f
git add core/models/payload_test.go 
git push origin missing-tests-around-models
git commit -m "Added some tests around the Conversions to newer View structs"
git checkout missing-tests-around-models
git branch missing-tests-around-models
git push origin renaming
git commit -m "Renamed RequestDetails' ConvertToV2RequestDetailView to ConvertToRequestDetailView"
git commit -m "Renamed ResponseDetails ConvertToV2ResponseDetailsView to ConvertToResponseDetailsView"
git ad .
git commit -m "Renamed RequestResponsePair's ConvertToV2RequestResponsePair to now be ConvertToRequestResponsePair"
git commit -m "Renamed several tests to reflect change in function name"
git add core/models/payload_test.go
git checkout ,
git commit -m "Renamed ConvertToRequestResponsePairView on models.RequestResponsePair to ConvertToV1RequestResponsePairView"
git add core/models/payload.go
git add core/middleware.go 
git commit -m "Updated the test names to reflect the changes in function names"
git commit -m "Renamed ConvertToRequestDetailsView to ConvertToV1RequestDetailsView and the same with ConvertToResponseDetailsView, the unspecified version function should return the newest version, not the oldest"
git checkout renaming
git branch renaming
git push origin v2-simulation-get-templates
git commit -m "Renamed the Convert to view for request templates to designate that it is for v1 views, added a little deprication note to myself as well"
git checkout v2-simulation-get-templates
git push origin v2-simulations-get-templates
git push origin v2-simulations-get-template
git branch -m v2-simulation-get-templates
git push origin v2-simulation-put -f
git push origin v2-simulation-put
git commit -m "Renaming a test around GetSimulation to make it clear it is testing  recordings"
git reset HEAD core/hoverfly_service_test.go 
git commit -m "Making the test around using the PutSimulation a bit better"
git commit -m "Updated simulation put test to include delays"
git stash 
git ash
git commit -m "v2 simulation handler now has a put function"
git add core/handlers/v2/simulation_handler*
git commit -m "v2 models now implement the same interfaces that the v1 models implement"
git branch -m v2-simulation-put
git push origin more-interfacing
git commit -m "ImportRequestResponsePairViews now takes an interface ready for importing v2 data"
git add core/handlers/v1/records_handler.go 
git add core/handlers/v1/add_handler.go 
git branch -m more-interfacing
git commit -m "Updated comment to reflect which interface its actually implementing"
git add core/handlers/v1/views.go 
git checkout v2-simulations-put
git branch v2-simulations-put
git push origin interfacing -f
git push origin interfacing
git commit -m "v1.RequestResponsePair now meets interfaces.RequestResponsePair"
git reset HEAD~
git add core/models/payload.go 
git push origin interfacing 
git commit -m "NewRequestDetailsFromRequestDetailsView now takes interfaces.Request and is renamed to NewRequestDetailsFromRequest"
git commit -m "v1.RequestDetailsView now meets interfaces.Request"
git commit -m "NewResponseDetailsFromResponseDetailsView now takes interfaces.Response and is renamed to NewResponseDetailsFromResponse"
git commit -m "v1.ResponseDetailsView now meets interfaces.Response"
git reset HEAD .
git commit -m "Created some generic interfaces for requests, respones and requestresponsepairs"
git add core/interfaces/interfaces.go 
git branch -m interfacing
git commit --amend -m "WIP"
git add core/import.go 
git add core/handlers/v2/simulation_handler.go 
git push origin update-docs -r
git push origin v2-simulations-delete
git commit -m "Renamed a test to make the name clearer"
git commit -m "Created a functional test around deleting simulations from the v2 api"
git statis
git commit -m "Added delete to the simulation handler"
git commit -m "Depends on to specto-ng2.yml so it doesn't blow up when it doesn't immediately get the proxy hostname"
git checkout v2-simulations-delete
git branch v2-simulations-delete
git commit -m "Added a first draft of the API documentation"
git add docs
git branch update-docs
git commit -m "Crash, bang, wallop, what an nginx.conf"
git pull -r origin master
git push origin benji-does-docker-compose
git commit -m "Removed links as they are redundant"
git commit -m "Added a target for updating everything"
git commit -m "Added a target for updating the backend services"
git commit -m "Updated the README.md to include the make stuff"
git commit -m "Added a target for spinning up everything"
git commit -m "Created a makefile and renamed the docker-compose.yml to services.yml"
git status]
git commit -m "Created an individual docker compose file for the specto-ng2 image"
git add specto-ng2.yml 
git checkout benji-does-docker-compose
git branch benji-does-docker-compose
git push origin benji-does-nginx
git checkout benji-does-nginx
git branch benji-does-nginx
git add nginx.conf 
git pull origin master -
cat ~/.gitignore_global
git push origin upload-simulation --force
git rebase --continue
git rm -rf .vscode
git checkout upload-simulation
git clone git@github.com:SpectoLabs/specto-ng2.git
git commit -m "Removing conflicts"
git pull origin upload-simulation -r
git commit
git rm .vscode -r
git rm .vscode
git pull origin upload-simulation
git commit -m "circle.yml will now push a latest tagged specto-ng2 image too"
git commit -m "Didn't actually specify the BUILD_NUMBER variable"
git commit -m "Forgot to include the docker service on the circle.yml file"
git push origin benji-does-docker
git commit -m "Added a new step to the makefile for building the Docker image and included it in the circle.yml"
git commit -m "Added a Dockerfile, so that we can easily docker-compose"
git add Dockerfile 
git checkout benji-does-docker
git branch benji-does-docker
git clone git@github.com:SpectoLabs/specto-simulations-svc.git
git commit -m "Just rimraffed Paul's .vscode"
git checkout nginx/services.conf 
git commit -m "Renamed the nginx config from default to be a little more descriptive"
git commit -m "Moving the nginx config into its own directory so that we can have multiple configs for different Docker Compose setups"
git checkout docker-compose.yml 
git checkout default.conf
git commit -m "Changed the README.md to point to the correct address after running `npm start`"
git clone git@github.com:SpectoLabs/specto-bootstrap.git
git push origin fmt
git commit -m "Just doing a go fmt to keep everything nice and formatted"
git checkout fmt
git branch fmt
git pull origin v0.9.0
git push origin v2-schema
git commit -m "Added some comments to explain a bit of a backwards bit of code"
git commit -m "Added some tests around generating the new schema for the v2 endpoint"
git add core/hoverfly_service_test.go
git commit -m "Added a functional test for the new /api/v2/simulation GET endpoint"
glide get github.com/antonholmquist/jason
go get -v github.com/lukehoban/go-outline
git clone git@github.com:SpectoLabs/specto-authentication-svc.git
curl -sL https://github.com/jszwedko/circleci-cli/releases/download/0.1.0/darwin_amd64 > circleci-cli
git checkout v2-schema
git pull -r origin v0.9.0
git rebase origin/move-v1-pair-views
git push origin move-v1-pair-views
git commit -m "Moved v1 views from the views package to the handlers.v1 package"
git add core/middleware.go
git add core/matching/request_template_store.go 
git add core/import_test.go
git add core/admin_test.go
git add core/admin_template_test.go 
git checkout move-v1-pair-views
git branch move-v1-pair-views
git checkout hoverfly-service
git rebase origin/hoverfly-service
gitk
git branch v2-schema
git push origin hoverfly-service
git commit -m "Removing the ResponseDelayPayload from the models package as it is now a duplicate"
git add. 
git commit -m "Removed the Json function from ResponseDelayList as its shouldn't really be doing that"
git commit -m "Using the v1.ResponseDelayPayloadView to pass ResponseDelay data around instead of using .Json function"
git commit -m "Changed the v1.ResponseDelayPayloadView struct to not have a pointer to an array"
git commit -m "Renamed v1.ResponseDelayPayload to v1.ResponseDelayPayloadView"
git remote add origin git@github.com:SpectoLabs/specto-starter.git
git commit -m "Added a favicon"
git add favicon.ico 
git commit -m "There's people!"
git add style.css 
git commit -m "Added SpectoLabs workshop repo to provision-workshop-repos.sh"
git add scripts/provision-workshop-repos.sh 
git commit -m "Added some docker images to the docker-images.sh script"
git add scripts/docker-images.sh 
git clone git@github.com:benjih/twc-workshop-vm.git
git checkout shopfront-dependency-delays.json
git commit -m "Let's get startering"
git commit -m "Added an example delays json for Hoverfly"
git add shopfront-dependency-delays.json 
git commit -m "Added another script for running the shopfront sans dependencies"
git add shopfront.yml 
git add run-shopfront.sh 
git commit -m "Created a script for running just the shopfront with Hoverfly"
git add run-shopfront-with-hoverfly.sh 
git commit -m "Created a script for running all applications and Hoverfly. Yay Hoverfly"
git add run-all-with-hoverfly.sh 
git commit -m "Created a script for running all"
git commit -m "Created lots of yml files"
git checkout shopfront
git checkout docker-compose.yml
git commit -m "Don't need this"
git add docker-compose-simple.yml 
git clone git@github.com:benjih/oreilly-docker-java-shopping.git
git commit -m "Creating a shell session when sudoing for docker-compose"
git add 
git checkout Vagrantfile 
git clone git@github.com:daniel-bryant-uk/twc-workshop-vm.git db-twc
git push origin master -f
git add scripts/provision-hoverfly.sh 
git scripts/
wget -O /Users/benjih/Desktop/hoverfly https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverfly_v0.8.2_linux_amd64
wget -O /home/vagrant/hoverfly https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverfly_v0.8.2_linux_amd64
wget -0 /home/vagrant/hoverfly https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverfly_v0.8.2_linux_amd64
wget -N -O /home/vagrant/hoverfly https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverfly_v0.8.2_linux_amd64
wget -q -N https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverctl_v0.8.2_linux_amd64 /Users/benjih/Desktop/hoverfly
wget -q -N https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverctl_v0.8.2_linux_amd64 .
wget -q -N https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverctl_v0.8.2_linux_amd64 /Users/benjih/hoverctl
wget -N https://github.com/SpectoLabs/hoverfly/releases/download/v0.8.2/hoverctl_v0.8.2_linux_amd64
git commit -m "Created a provisioning script for Hoverfly (and Hoverctl)"
git reset HEAD scripts/.provision-jdk.sh.swp 
git commit -m "Renamed ValidateResponseDelayJson to ValidateResponseDelayPayload"
git commit -m "ValidateResponseDelayJson now takes the view Payload"
git add core/models/delay_test.go 
git add core/models/delay.go
git commit -m "hoverfly.SetResponseDelays now takes a view instead of the actual"
git add core/hoverfly_service.go
git add core/admin_test.go 
git commit -m "GetResponseDelays() now returns bytes instead of the ResponseDelayList"
git add core/handlers/v1/delays_handler.go 
git commit -m "Starting to split the delays from the delay_handler by moving the models.ValidateResponseDelayJson function call into Hoverfly"
git commit -m "Reordering some functions so its easier to read"
git commit -m "Renamed UpdateDestination to SetDestination"
git add core/models_test.go
git add core/handlers/v2/hoverfly_destination_handler*
git add core/handlers/v2/hoverfly_destination_handler
git add core/handlers/v1/state_handler.go 
git commit -m "Trying to remove cache from the handlers"
git commit -m "Moved the service functions out into a seperate file for the time being"
git add core/hoverfly.go
git branch hoverfly-service
git branch -D models-cyclic
git checkout admin-api-v2-schema
git checkout models-cyclic
git checkout core/handlers/v1/add_handler.go 
git branch admin-api-v2-schema
git push origin models-cyclic
git commit -m "Removed models dependency from add_handler"
git branch models-cyclic
git push origin template-view-refactor
git commit -m "Moved the template views into the handlers.v1 package"
git add core/hoverfly.go 
git add core/handlers/v1/templates_handler.go 
cd github.com/
git checkout template-view-refactor
git branch template-view-refactor
git branch -D admin-api-v2-schema
git stattus
git reset HEAD core/views/views.go
git branch -m admin-api-v2-schema
git checkout admin-api-v2-count
git branch admin-api-v2-count
git push origin admin-api-v2-hoverfly
git commit -m "Added a functional test around the /api/v2/hoverfly endpoint"
git commit -m "Added the HoverflyHandler to the admin API"
git add core/admin.go
git add core/handlers/v2/hoverfly_handler*.go
git commit -m "Created a handler for retrieving all info about Hoverfly"
git checkout admin-api-v2-hoverfly
git branch admin-api-v2-hoverfly
git push origin v0.9.0
git commit -m "Forgot to rename the metrics test to the usage test"
git branch -D admin-api-v2-hoverfly
git push origin admin-api-v2-usage
git commit -m "Added a few more functional tests to make sure all the individual counters work"
git commit -m "Added functional tests around the new v2 usage handler"
git commit -m "Adding the new HoverflyUsageHandler to admin API"
git add core/admin.go 
git branch -m admin-api-v2-usage
git branch -m admin-api-v2-metrics
git push origin admin-api-v2-metrics
git commit -m "Created a v2 handler for Hoverfly metrics"
git add core/handlers/v2/hoverfly_metrics_handler*
git checkout admin-api-v2-metrics
git branch admin-api-v2-metrics
git push origin admin-api-v2-destination
git commit -m "Added functional tests around the new v2 destination handler"
git commit -m "Adding the new HoverflyDestinationHandler to the admin API"
git commit -m "Created a v2 handler for Hoverfly destination"
git commit -m "Renamed the interface to be more specific and avoid collisions"
git add core/handlers/v2/hoverfly_mode_handler.go
git checkout admin-api-v2-destination
git branch admin-api-v2-destination
git branch -D admin-api-v2-identity
git branch admin-api-v2-identity
git push origin admin-api-v2-middleware -f
git checkout admin-api-v2-middleware
git pull origin/v0.9.0
git rebase origin/v0.9.0 a19e603bb0
git rebase a19e603bb0
git push origin admin-api-v2-middleware
git rebase origin v0.9.0
git commit -m "Created new functional tests for the new HoverflyMiddlewareHandler"
git commit -m "Adding the new HoverflyMiddlewareHandler to the admin API"
git commit -m "Tidying the functional API test up so we don't have to duplicate the starting and stopping of a Hoverfly instance"
git commit -m "Tidying up testing around the v2 handlers by moving common functions into a package specific testutils.go file"
git commit -m "Tidied up the HoverflyModeHandler to call the get function instead of duplicating the get function"
git commit -m "Created a v2 handler for Hoverfly middleware"
git branch admin-api-v2-middleware
git push origin admin-api-v2-mode
git commit -m "Added some tests around the new v2 mode endpoint"
git commit -m "Hoverfly functional tests now use the v2 endpoint for changing mode"
git branch -m admin-api-v2-mode
git reset HEAD~1
git push origin admin-api-v2
git commit -m "Renaming the modes functional test to indicate that it tests v1"
git commit -m "Tidying up the v2 mode handler"
git add core/handlers/handlers.go 
git add core/handlers/v2/
git checkout admin-api-v2
git commit -m "Moved the error response stuff into handlers.WriteErrorResponse()"
git commit -m "Moved checking of mode into Hoverfly so v2 handler worries about responding with data or an error"
git commit -m "Created a v2 handler for Hoverfly modes"
git branch admin-api-v2
git push origin admin-v1
git commit -m "Moved handlers into a v1 package"
git checkout admin-v1
git branch admin-v1
git statsu
git commit -m "Changed Karolis blog slightly as I had to fix up his test.py which lives in the Hoverfly examples"
git add speeding-up-your-slow-dependencies.html 
git checkout readthedocs-fix
git push origin readthedocs-fix
git commit -m "Fixed up the readthedocs query as subdomain was removed"
git add test.py
git branch readthedocs-fix
git branch -D admin-security-refactor
git push origin admin-security-refactor 
git commit -m "Moved routes for auth into the auth handler to match the other handlers"
git commit -m "Named the package handlers as it was originally hoverfly"
git push origin admin-security-refactor
git commit -m "Moved the auth handler into the handlers package"
git commit -m "Moved the auth controller handler functions into the auth handler"
git checkout core/authentication/controllers/auth_controller.go
git reset HEAD core/authentication/controllers/auth_controller.go
git checkout core/authentication/controllers
git commit -m "Renamed the Auth middlewares.go to auth_handler.go and renamed the struct to AuthHandler"
git checkout admin-security-refactor
git branch admin-security-refactor
git branch -D admin-refactor-routes
git branch -D admin-refactor
go get -u github.com/fogleman/primitive
git push origin admin-refactor-routes -f
git push origin admin-refactor-routes
git commit -m "Tidied up the creation of handlers in the admin"
git checkout core/import*
git checkout core/test_tools.go 
git add core/handlers/add_handler.go
git ad core/admin.go
git commit -m "Each handler now defines its own route"
git add core/handlers
git checkout admin-refactor-routes
git branch admin-refactor-routes
git push origin admin-refactor
git commit -m "Moved the websocket handler for stats to the Admin API handlers"
git add core/handlers/stats_handler.go
git commit -m "Moved the stats function into the Admin API handlers"
git commit -m "Moved the count function into its own Admin API handler"
git add core/handlers/count_handler.go 
git add core/handlers/add_handler.go 
git commit -m "Moved the add function into its own Admin API handler"
git commit -m "Moved delays into its own Admin API handler"
git commit -m "Moved state into its own Admin API handler"
git commit -m "Forgot to remove a now redundant handler function which was moved over to its own handler struct"
git commit -m "Metadata is now in its own Admin API handler"
git commit -m "Templates now are in their own Admin API handler"
git commit -m "Now passing a pointer to the middleware handler"
git rm core/handlers/templates_handler.go
git push origin admin-refactor -f
git checkout core/admin.go 
git commit -m "Updated the middleware handler to receive the correct pointer to Hoverfly"
git commit -m "Moved the admin API records functions into their own handler"
git add core/handlers/records_handler.go 
git add core/handlers/middleware_handler.go 
target/hoverfly --import https://raw.githubusercontent.com/SpectoLabs/hoverfly-junit/d0d41dfdcb250c6bb02ada63d304b4afddf5f2e4/src/test/resources/test-service.json
git push admin-refactor
git rebase --skip
git pull origin admin-refactor
git checkout admin-refactor
git reset head~1
git commit -m "Merging"
git checkout glob-templates
git branch -D refactoring
git checkout refactoring
git branch -D redirects
git checkout redirects
git branch -D import-flags
git pull origin import-flags
git checkout import-flags
git push origin circleci
git commit -m "Getting rid of an unneeded step"
git push origin circleci -f
git commit -m "First attempt at the circle CI yml"
git add circle.yml
git checkout circleci
git branch circleci
git push origin import-flags
git commit -m "ImportFromHTTP will now follow redirects"
git commit -m "Moved the HTTP client creation into its own function"
git commit -m "Trying to simplify the testing tools"
git commit -m "Registering the Ts for testing"
target/hoverfly --import https://gist.githubusercontent.com/benjih/07448036fdd5380fc68aae6853b4d078/raw/7a7a10c400d4172c439211f33f27febe68c1bd3a/test-service.json
target/hoverfly --import http://raw.githubusercontent.com/SpectoLabs/hoverfly-junit/d0d41dfdcb250c6bb02ada63d304b4afddf5f2e4/src/test/resources/test-service.json
target/hoverfly --import https://gist.githubusercontent.com/benjih/28740c600cdf07ed8f66b7918aed92d6/raw/b051912f1400713adf19299abaef36f3ffa3cf7c/gistfile1.txt
git commit -m "Replaced json.Decoder with json.Unmarshal as Decoder should be avoided"
target/hoverfly --import https://gist.githubusercontent.com/benjih/c6928d8b9537b454fe8cee15c2ee74cf/raw/5953d356c0e423c78189aef308abbc12279ddf5c/ouf2.json -v
target/hoverfly --import https://gist.githubusercontent.com/benjih/28740c600cdf07ed8f66b7918aed92d6/raw/b051912f1400713adf19299abaef36f3ffa3cf7c/gistfile1.txt -v
hoverfly --import https://gist.githubusercontent.com/benjih/28740c600cdf07ed8f66b7918aed92d6/raw/b051912f1400713adf19299abaef36f3ffa3cf7c/gistfile1.txt -v
target/hoverfly --import http://raw.githubusercontent.com/SpectoLabs/hoverfly-junit/d0d41dfdcb250c6bb02ada63d304b4afddf5f2e4/src/test/resources/test-service.json -v
git checkout core/views
git checkout core/util
git checkout core/models
git checkout core/matching
git commit -m "wip"
hoverfly --import https://raw.githubusercontent.com/SpectoLabs/hoverfly/master/core/examples/exports/readthedocs.json
git checkout functional-tests
git checkout core/import.go 
hoverfly --import http://raw.githubusercontent.com/SpectoLabs/hoverfly-junit/d0d41dfdcb250c6bb02ada63d304b4afddf5f2e4/src/test/resources/test-service.json -v
git branch import-flags
hoverfly --import http://raw.githubusercontent.com/SpectoLabs/hoverfly-junit/d0d41dfdcb250c6bb02ada63d304b4afddf5f2e4/src/test/resources/test-service.json
git commit -m "Updated the formula to use Hoverfly v0.8.2"
git add hoverfly
git clone https://git.gitbook.com/spectolabs/hoverfly.git
git push origin redirects -f
git push origin redirects
git pull origin redirects -r
git rebase --abort
git rebase orign/master
git clone git@github.com:daniel-bryant-uk/oreilly-docker-java-shopping.git
git pull git@github.com:daniel-bryant-uk/oreilly-docker-java-shopping.git
git pull origin refactoring
git push origin refactoring -f
git push origin refactoring
git add
git pull origin refactoring -r
git push origin glob-templates
git commit -m "Renamed some variables in the template header matching to make it more clear"
git rebase origin/glob-templates 
git commit -m "Added a few more tests just in case"
git commit -m "Found a test that tests case insensitivity in header matching that wasn't running and then made it pass"
git commit -m "Updating circle ci to use golang 1.7"
git commit -m "Fixed a bug where redirects were not being saved due to being executed by HTTP library"
git branch redirects
git commit -m "Moved the middleware admin API endpoints into their own handler"
git commit -m "Moved admin API specific views into the handlers package to prevent cyclic dependencies"
git commit -m "Moving the new HealthHandler into a new handlers package"
git add core/admin_health_controller.go 
git checkout core/admin.go
git checkout core/admin_delays_handler.go
git checkout core/handlers/delays_handler.go 
git reset HEAD core/handlers/delays_handler.go 
git commit -m "Moved the health stuff into its own handler"
git commit -m "Starting to split the admin API from the Hoverfly struct"
git branch -m admin-refactor
git reset HEAD ,
git checkout v2-admin-api
git branch v2-admin-api
git branch -D v2-admin-api
git push origin glob-delays -f
git push origin glob-delays
git rebase origin/refactoring
git checkout glob-delays
git cherry-pick d0c2760c08ef1170523cddb61225d9648f0f16ef
git cherry-pick a0b8084768769e7470f20816776abf1e0fdd52e2
git branch -d v2-admin-api
git branch -m v2-admin-api
git reset HEAD core/admin_template_test.go 
git checkout remove-templates-endpoint
git branch remove-templates-endpoint
git commit -m "ResponseDelays now behave like RequestTemplates, they have option fields that match a RequestDetails and can use wildcards for substituting data out"
cd sandbox/go/src/github.com/SpectoLabs/hoverfly/
git commit -m "Haven't run fmt in a while"
git commit -m "Renamed ResponseDelayJson to ResponseDelayPayload"
git reset HEAD core/views/views_test.go 
git branch -m glob-delays
git checkout core/admin_test.go
git branch -m hoverfile
git reset --hard HEAD~1
git commit -m "Moved the request matching part out into its own reusable function"
git checkout glob-delay
git branch glob-delay
git branch -m refactoring
git reset --hard 566f0618ad8428bd46c28020ceb34eb23c3f925c
git reset hard HEAD~1
go get github.com/axw/gocov/gocov
git commit -m "You can now use wildcards on the HttpMethod of a delay"
git commit -m "moddifyRequestResponse now takes a RequestDetail alongside a HTTP request"
git commit -m "SynthesizeResponse now takes a RequestDetails so it doesn't have to create its own"
git commit -m "GetDelays will now take a RequestDetails instead of the individual values of a RequestDetails"
git commit -m "Renamed extractRequestBody to NewRequestDetailsFromHttpRequest and moved it into the models package, where it belongs"
git commit -m "Refactored the hoverfly.processRequest to not return the request as the modified request is never returned"
git reset --hard b28ee9e8b993fd122fbd021096a11b507e2e5101
git reset --hard db0ab9ef1b38b398ed8b107839b7d4cd4368e73e
git branch -m glob-templates
git push origin glob
git commit -m "Refactored around processRequest so that there is only one branch that calls delays"
git commit -m "Included some wildcards into the request template functional tests"
git stauts
git commit -m "Updated a functional test to use the /api/records endpoint over the /api/templates endpoint"
git add functional-tests/core/ft_template_test.go 
git commit -m "Added support for globbing to the headers on RequestTemplates"
git commit -m "Added support for globbing to the RequestTemplate on all fields but headers"
git commit -m "Added Ryan Uber's go-glob to glide"
glide get github.com/ryanuber/go-glob
git checkout glob
git rm core/glob_test.go -rf
git rm core/glob_test.go 
glide get github.com/gobwas/glob
git branch glob
git commit -m "Updated the formula to use Hoverfly v0.8.1"
git push origin making-that-file
git commit -m "Added a build step to the Makefile"
git checkout making-that-file
git branch making-that-file
vim ~/.gitignore
git config --global core.excludesfile '~/.gitignore'
git branch -d fix-glide-hoverctl 
git branch -d glide
git branch -d import-accepts-templates 
git checkout origin master
git push origin import-accepts-templates
git commit -m "Changed snapshot to recording when outputting RequestResponsePairViews"
git statuw
git commit -m "Fixed a typo, its a minor detial but it needed changing"
git filter-branch --tree-filter 'sed -i "/password/ d" XXXXX' -- --all
git commit -m "Now using viper for database credentials"
git add jobs/jobs.go 
git add main.go 
git commit -m "Refactored the jobs a little bit"
git add glide*
git add vendor
glide get github.com/pelletier/go-toml
git commit -m "Gliding it up with a viper"
glide get "github.com/spf13/viper"
cd go/src/github.com/benjih/peeping-tom/
git push origin import-accepts-templates -f
git commit -m "Templates now look the same regardless if they came in through /api/records and /api/templates"
git commit -m "A little util package which so far contains functions for transforming strings to string pointers and vice versa"
git add core/util/util.go
git add core/uti
git commit -m "Added the username and password for the spectometrics influxdb in aws"
git clone git@github.com:SpectoLabs/specto-secrets.git
git commit -m "Added a job for tracking downloads on a binary level"
git add main.go
git commit -m "BatchPoint for each job, please"
git add jobs
git build .
cd ../go/src/github.com/benjih/peeping-tom/
git commit -m "Woah, all these files"
git commit -m "Moved job into a jobs package"
git commit -m "Refactored to move the Github star logic behind an interface, baby"
git commit -m "Writing to InfluxDB, baby"
git commit -m "Bloody glide"
git add vendor/github.com/
glide get --resolve-current "github.com/influxdata/influxdb/client/v2"
glide get --quick "github.com/influxdata/influxdb/client/v2"
glide get -x "github.com/influxdata/influxdb/client/v2"
glide get "github.com/influxdata/influxdb/client/v2"
go get -x github.com/influxdata/influxdb/client/v2
git clone https://github.com/influxdata/influxdb /Users/benjih/sandbox/go/src/github.com/influxdata/influxdb
go get -d github.com/influxdata/influxdb/client/v2
go get github.com/influxdata/influxdb/client/v2 -v
go get github.com/influxdata/influxdb/client/v2
go get "github.com/influxdata/influxdb/client/v2"
glide get "github.com/influxdata/influxdb/client/v2" -v
git commit -m "First cut, it will tell you the number of stars"
go get github.com/influxdata/influxdb
go get "github.com/influxdb/influxdb"
cp ../../../../github.com/benjih/peeping-tom/main.go .
cp ../../../../github.com/benjih/peeping-tom/main.go 
git commit -m "Gliding it up with a logrus"
git add glide.*
git add vendor/github.com/Sirupsen/logrus/
glide get github.com/Sirupsen/logrus
git commit -m "Let's get gliding"
glide get github.com/google/go-github
cd github.com
git checkout import-accepts-templates 
git rebase origin/glide
git checkout import-accepts-templates
git push origin glide
git commit -m "Updating Hoverctl functional tests glide package"
git commit -m "Updating Hoverctl functional tests glide lock file"
git add glide.lock
git ad glide.lock 
git commit -m "Updating Hoverfly core functional tests glide lock file"
git add functional-tests/core/
git commit -m "Updating Hoverfly core glide lock file"
git add core/glide.lock
git commit -m "Making glide install quietly"
git commit -m "Removing --strip-vcs on glide install in Makefile as --strip-vcs has been deprecated"
git commit -m "Making sure the glide.yaml package names are correct"
git checkout core/views/views.go 
git checkout glide
git branch glide
git clone git@github.com:microservices-demo/user.git
git push origin fix-glide-hoverctl
git commit -m "Sacked off the glide.lock file for a new one"
git checkout fix-glide-hoverctl
git branch fix-glide-hoverctl
git commit -m "Added the success increment so that the success count is correct on the logs"
git commit -m "The /api/records endpoint will now return RequestResponsePairViews for both snapshots and templates"
git commit -m "Creating a RequestTemplate from a RequestResponsePairView if the requestType is \"template\""
git checkout functional-tests/core/ft_import_export_test.go 
git commit -m "RequestTemplateResponsePairs can now easily be converted into RequestResponsePairViews"
git add core/matching/request_template_store*
git commit -m "Added a functional test around importing recored and templated RequestResponsePairViews"
git commit -m "Removed function from RequestTemplateStore that I recently added as its redundant due to RequestTemplateStore already being an array"
git commit --amend -m "The ImportRequestResponsePairViews function on Hoverfly will now accept and differentiate between RequestResponsePairViews and RequestTemplateResponsePairViews"
git commit --amend "The ImportRequestResponsePairViews function on Hoverfly will now accept and differentiate between RequestResponsePairViews and RequestTemplateResponsePairViews"
git push origin payload-refactor-2
git pull origin payload-refactor-2
git commit -m "Renaming pls to pairViews as the old name didn't represent its purpose"
git commit -m "Renaming bts variables"
git commit -m "Renamed a rogue rr var to pair"
git checkout payload-refactor-2
git branch payload-refactor-2
git reset HEAD core/*
git stash drop
git stash apply
git commit -m "The RequestTemplateStore will now allow you to add single RequestTemplareResponsePairs to the store as opposed to needing to create a one element array each time for ImportPayloads()"
git stash pop 
git rebase origin/request-template-body
git push origin request-template-body
git commit -m "RequestTemplates will now match a RequestDetails based on Body"
git checkout request-template-body
git branch request-template-body
git checkout core/matching/request_template_store.go
git add core/import_test.go 
git branch import-accepts-templates
git push origin rename-all-the-structs
git commit -m "gofmt"
git checkout rename-all-the-structs
git branch -d import-accepts-templates
git branch -d headers-on-webserver
git push origin rename-all-the-structs -f
git commit -m "Doing some payload renaming in the functional tests"
git commit -m "Removed a payload reference from Hoverctl"
git remote add origin git@github.com:SpectoLabs/super-rad-service.git
git commit -m "Here is a readme"
git commit -m "Slowly trying to de-payload the codebase"
git checkout rename-all-the-strcuts
git commit -m "Renamed Payload to RequestResponsePair"
git branch -m rename-all-the-structs
git commit -m "Renamed the PayloadView and PayloadData into more meaningful names"
git push origin reqresreqtempres
git commit -m "Changed the names of the structs related to request templates to make a bit more sense"
git commit -m "Refactored the AllRecordsHandler so that its style is more inline with the rest of the code"
git commit -m "RequestDetailsView now has a field for specifying whether its a snapshot or a template"
git add functional-tests/
git add core/
git checkout reqresreqtempres
git branch reqresreqtempres
git push origin ci
git commit -m "Get those dependencies, boy"
git commit -m "Time to get some CI up in this hizzy"
git checkout ci
git branch ci
git clone git@github.com:SpectoLabs/system-x-ui.git
git commit -m "Updated the compairson chart for Hoverfly to include SSL certs and local storage"
git clone git@github.com:benjih/nagual.git
git clone git@github.com:emanuil/nagual.git
git clone git@github.com:SpectoLabs/specto-website.git
git clone git@github.com:daniel-bryant-uk/payment-gateway.git
git push origin headers-on-webserver
git commit -m "Headers now correctly get written to responses in webserver mode"
git checkout headers-on-webserver
git branch headers-on-webserver
git commit -m "Tried centering those icons"
git tig
git clone git@github.com:SpectoLabs/specto-website
git clone https://github.com/SpectoLabs/specto-website
vim .gitignore
git clone git@github.com:SpectoLabs/lab-java.git
git clone git@github.com:SpectoLabs/java-lab.git
cd sandbox/go/src/github.com/benjih/swaggerfly/
git clone https://github.com/opencredo/springboot-workshops.git
go get "github.com/go-openapi/loads"
git push origin hoverctl-functional-tests
git commit -m "Updated the package name for the hoverctl functional tests"
git checkout hoverctl-functional-tests 
git branch hoverctl-functional-tests
git branch hoverctl-functional-tess -d
git branch hoverctl-functional-tesss -d
git branch hoverctl-functional-tess
git branch -D hoverctl-functional-tests
git branch hoverctl-functional-tests -d
git branch functional-tests-debug -d
git checkout functional-tests-debug
git branch hoverctl-templates -d
git checkout hoverctl-templates
git branch -D lambda-example
git branch lambda-example -d
git checkout lambda-example
git branch hoverctl-delays -d
git checkout hoverctl-delays
git branch hoverctl-delays
git branch gofmt -d
git checkout add-install-script
git clone https://github.com/tjcunliffe/hoverfly.git
git push origin lambda-example
git commit -m "Removed spelling mistake"
git commit -m "Changed the delay to something that is within the default timeout of AWS Lambda"
git commit -m "Added an example for middleware that can run on AWS Lambda"
git checkout middleware.go 
git add lambda-503/
git branch lambda-example
git commit -m "Updated the formula to use Hoverfly v0.8.0"
git rm .hold.swp
git commit -m "Removed the load test from the release step"
git push origin master :tags
git tag v0.8.0 -d
git pull origin master :tags
git pull v0.8.0
git push origin hoverctl-templates
git commit -m "Added link to documentation"
git commit -m "Added examples for request templates"
mv request-template.json sandbox/go/src/github.com/SpectoLabs/hoverfly/core/examples/
git push origin hoverctl-delays
git commit -m "Fixed the url on the example delays to have the host of github.com"
git branch hoverctl-templates
git commit -m "Updated the readme for the delay example"
git rm core/examples/delays/.README.md.swp -rf
git rm core/examples/delays/.README.md.swp
git commit -m "Moved the print into the if when we have delays to print"
git add hoverctl/main.go
git commit -m "Added an example for delays"
git commit -m "Updated the functional tests to include delays for both with and without HTTP method"
git commit -m "Improved the output for delays to be more consistent with the rest of hoverctl"
git checkout hoverctl/hoverfly.go
git add functional-tests/hoverctl/hoverfly_delays_test.go 
git branch functional-tests-debug
cd $GOPATH/src/github.com/SpectoLabs/hoverfly & make test
git commit -m "Updated package to hoverctl_end_to_end"
git checkout hoverctl-functional-tests
git push origin middleware-views
git checkout middleware-views
git merge --abort
git commit -m "Middleware now sends PayloadMiddlewareView instead of Payload"
git fetch origin master
git branch middleware-views
git clone git@github.com:SpectoLabs/hoverfly-middleware-development-kit.git
mkdir git@github.com:SpectoLabs/hoverfly-middleware-development-kit.git
git push origin gofmt
git commit -m "Go formatting the codebase"
git commit -m "Added an fmt target to the Makefile"
git checkout gofmt
git branch gofmt
git push origin hoverctl-delete-message
git commit -m "Updated the error message on delete when you do not specify a resource"
git checkout hoverctl-delete-message
git commit -m "Formatting the Hoverctl codebase"
git commit -m "Delete now uses a switch statement with a default to capture include resources"
git branch hoverctl-delete-message
git push origin flaky-test
git commit -m "Don't need to catch error of exec.Command"
git push origin flaky-test -f
git commit -m "Removing some unwanted printing during the functional tests"
git commit -amend
git commit -m "Refactoring around starting Hoverflies"
git commit -m "Reusing the hoverflyData throughout the import_export_test"
git commit -m "Rewrote the flakey test to maybe be less flakey?"
git checkout flaky-test
git branch flaky-test
git checkout ../../hoverfly.go
git remote add origin git@github.com:benjih/gogoat.git
git commit -m ":goat: Will now tidy output HTML into a nicely indented format, how pretty"
git commit -m ::goat: Will now tidy output HTML into a nicely indented format, how pretty"
go get github.com/raymondbutcher/tidyhtml
git commit -m ":goat: Gotta scan them all, and then write them to a file"
git commit -m "Go goat is a go, goat"
git commit -m "Updated test to reference the PayloadView from the views package"
git push origin new-requests 
git commit -m "Adding gorilla/context to functional-test/core"
rm -rf vendor/github.com/gorilla/context/
git checkout glide*
glide get github.com/gorilla/context
git commit -m "Added mux to core functional tests again"
glide get github.com/gorilla/mux
glide install github.com/gorilla/mux
go get github.com/gorilla/mux
git revert f46ea74f8268be9f70ed623dd1baf8449785b620
git commit -m "Updated package name on functional test glide.yaml"
git add glide.yaml
git commit -m "Renamed RequestMatcher.GetPayload() to RequestMatcher.GetResponse()"
git push origin new-requests
git commit -m "Added a test to make sure the current request is passed to middleware instead of the originally cached request"
git add functional-tests/core/ft_middleware_test.go 
git checkout functional-tests/core/ft_suite_test.go 
git commit -m "Added mux to core functional tests"
git add vendor/github.com/gorilla/mux/
git commit -m "RequestMatcher.GetPayload() now returns just a models.ResponseDetails"
git commit -m "RequestMatcher.GetPayload() now takes a models.RequestDetails over a http.Request"
git add core/matching/matcher.go 
git commit -m "GetResponse() now returns a model.ResponseDetails"
git commit -m "Renamed RequestTemplateStore.GetPayload() to GetResponse()"
git commit -m "The TemplateRequestMatcher no longer takes a request body as a parameter"
git commit -m "Changed the RequestTemplateStore to match based on models.RequestDetail instead of http.Request"
git checkout new-requests
git branch new-requests
git push origin views
git commit -m "Removed recordedRequests as a duplicate for it existed in views"
git commit -m "Moved the StateRequest to the new views package"
cd sandbox/go/src/github.com/benjih/
git commit -m "Created a simple package for views"
git commit -m "Moved the ResponseDetailsView.ConvertToResponseDetails to NewResponseDetailsFromRequestDetailsView"
git commit -m "Moved the RequestDetailsView.ConvertToRequestDetails to NewRequestDetailsFromRequestDetailsView"
git add core/models
git commit -m "Moved the PayloadView.ConvertToPlayload to NewPayloadFromPayloadView"
git checkout views
git branch views
git push origin more-tidy-tests
git commit -m "Removed some nil structs from delay_test"
git commit -m "Cleaning up the metrics_test by replacing testutils with Gomega"
git add core/metrics/metrics_test.go 
git commit -m "Fixed the makefile not running all submodule tests"
git commit -m "Cleaning up the delay_test by replacing testutils with Gomega"
git commit -m "Cleaning up the memory_cache__test by replacing testutils with Gomega"
git add core/cache/memory_cache_test.go 
git commit -m "Cleaning up the boltdb_cache_test by replacing testutils with Gomega"
git add core/cache/boltdb_cache_test.go 
git checkout core/cache/memory_cache_test.go 
git checkout more-tidy-tests
git branch more-tidy-tests
git branch -D more-tidy-tests
git branch more-tidy-tests -d
git push origin tidy-tests
git commit -m "Removed testutil as we should be using Gomega"
git add core/testutil
git commit -m "Cleaning up the import_test by replacing testutils with Gomega"
git commit -m "Cleaning up the manipulation_test by replacing testutils with Gomega"
git add core/manipulation_test.go 
git push origin tidy-tests -f
git commit -m "Cleaning up the middleware_test by replacing testutils with Gomega"
git commit -m "Cleaning up the synthesize_test by replacing testutils with Gomega"
git add core/synthesize_test.go
git add core/models_test.go 
git commit -m "Cleaning up the models_test by replacing testutils with Gomega"
git commit -m "Cleaning up the settings_test by replacing testutils with Gomega"
git add core/settings_test.go 
git commit -m "Cleaning up the listener_test by replacing testutils with Gomega"
git add core/listener_test.go 
git commit -m "Cleaning up the hoverfly_test by replacing testutils with Gomega"
git add core/hoverfly_test.go 
git commit -m "Cleaning up the db_client_test by replacing testutils with Gomega"
git add core/db_client_test.go 
git commit -m "Cleaning up the admin_test by replacing testutils with Gomega"
git checkout tidy-tests
git branch tidy-tests
git push origin middleware-api
git commit -m "You can now unset the middleware using hoverctl delete middleware"
git commit -m "Changed the names of two of the functional tests to make it clearer as to what they are doing"
git add :/functional-tests/hoverctl/hoverfly_middleware_test.go 
git checkout middleware-api 
git branch middleware-api 
curl -L https://api.github.com/repos/hoverfly -x localhost:8500
git commit -m "Added some verbose logging regarding setting middleware"
git add functional-tests/hoverctl/hoverfly_middleware_test.go 
git commit -m "Should be has not as"
git commit -m "Changed the Invalid Middleware error response to something a little more verbose"
git commit -m "Added the ability to set middlewares through hoverctl"
git add functional-tests/hoverctl/hoverfly_
git checkout functional-tests/hoverctl/.hoverfly/
/Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/bin/hoverfly
git commit -m "Hoverctl can now get the middleware from the Hoverfly middleware API"
git commit -m "Renamed the rest of the loose structs to Schemas that I forgot"
git commit -m "Added a MiddlewareSchema for changing the middleware being used in Hoverfly"
git commit -m "Renamed all the loose structs to Schemas"
git push origin middleware-api -f
vim ~/sandbox/go/src/github.com/SpectoLabs/hoverfly/target/modify_response.py
ls ~/sandbox/go/src/github.com/SpectoLabs/hoverfly/target/modify_response.py
git fetch master
git push origin remote-middleware
git commit -m "Added some more info to logging"
git commit -m "Renamed tests and added a new one"
git add core/*
git checkout remote-middleware
git commit -m "Added a SetMiddleware function to Hoverfly"
git commit -m "Renamed the middlewareRequest to middlewareSchema"
git add core/admin*
git commit -m "Added GET and POST endpoints for getting and updating the middleware path"
git branch middleware-api
rm -rf vendor/github.com/garyburd/
glide get github.com/garyburd/redigo/redis
git checkout elasticache
git branch elasticache
curl -L https://api.github.com/repos/spectolabs/hoverfly -x localhost:8500
git commit -m "Added a way to execute remote middleware over HTTP"
git add core/m*.go
git commit -m "Renamed ExecuteMiddleware to ExecuteMiddlewareLocally"
git commit -m "Addded a function for detecting if middleware is local or remote"
git branch remote-middleware
git add core/manipulation*
git checkout ../../manipulation.go 
rm -rf core/vendor/github.com/asaskevich/
git reset HEAD~ 
git commit -m "Added govaldiator to Hoverfly"
git add vendor/github.com/asaskevich/govalidator/
glide get github.com/asaskevich/govalidator
glide install github.com/asaskevich/govalidator
benjih@Benjis-MacBook-Pro ~/s/g/s/g/S/hoverfly (lambda)> git status
git commit -m "Renamed ExecuteMiddleware to ExecuteMiddlewareRemotely"
git checkout lambda
git branch lambda
git push origin partial-matching-headers
git pull -r origin partial-matching-headers
git commit -m "Changed the structs in the RequestTemplateStore"
git add core/matching/request_template_store.go
git commit -m "Updated ImportPayloads to save via the RequestMatcher"
git commit -m "Moved the saving to cache code into the SavePayload function on the RequestMatcher"
git checkout partial-matching-headers 
git pull origin partial-matching-headers
git pull origin master --tags
git commit -m "Updated the formula to use Hoverfly v0.7.1"
git add hoverfly.rb
git commit -m "Refactored the logs tests in hoverctl functional tests"
git add functional-tests/hoverctl/logs_test.go 
git commit -m "When the hoverctl functional tests run, the $PATH is now set to just the functional test binaries"
git commit -m "Working around flakiness in Circle CI builds"
git commit -m "Making sure there is a config file when we run the log tests"
git commit -m "Pushing the versioned Hoverfly image to Docker Hub before latest"
git commit -m "Pushing the versioned Hoverfly image to Docker Hub along with latest"
git commit -m "Now using the GIT_TAG_NAME variable in the Makefile over the git describe which doesn't always give us the answer we expect"
git push origin master :v0.7.1
git tag v0.7.1 -d
git tag 
git tag v0.7.0.1 -d
git describe --tags
git describe
git tag v0.7.0.1
git checkout a59b16775df18ca16e2a28a492aae6ac48f7bc0b
git tags
git push origin master :v0.7.0.1
git pull --tags
git checkout v0.7.1
git pull v0.7.1
git pull -r origin develop
git commit -m "Updated the gox-build target so that the cross platform binaries also get the tag version"
git tag hotdogs -d
git tag hotdogs
git commit -m "Building hoverfly will now put the version in based on the tag"
git add core/cmd/hoverfly/main.go core/cmd/hoverfly/main.go core/cmd/hoverfly/main.go 
git core/cmd/hoverfly/main.go 
git commit -m "Building hoverctl will now put the version in based on the tag"
git checkout HEAD
git checkout v0.7.0
eval $GOPATH/bin/dh-make-golang github.com/SpectoLabs/hoverfly
eval GOPATH/bin/dh-make-golang github.com/SpectoLabs/hoverfly
$GOPATH/bin/dh-make-golang github.com/SpectoLabs/hoverfly
go get github.com/Debian/dh-make-golang
git commit -m "Added a README to the tap"
git clone git@github.com:SpectoLabs/homebrew-tap.git
git commit -m "Removed some unneeded printing from the admin_test"
git commit -m "Updated the README with some details about using homebrew to install Hoverfly"
git add readme.md 
git commit -m "Specto's first homebrew formula, Hoverfly! Complete with hoverctl! Version 0.7.0."
git clone git@github.com:benjih/homebrew-benjih.git
brew create https://github.com/SpectoLabs/hoverfly/archive/v0.7.0.tar.gz
brew create https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_v0.7.0_OSX_amd64
brew create https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverctl_v0.7.0_OSX_amd64
git push origin benji-branches
git push origin benji-tests
git commit -m "Important file, yo!"
git add test-file
git checkout benji-branches
git branch benji-branches
git clone git@github.com:benjih/hoverfly.git
git commit -m "Here is a test file"
git checkout benji-tests
cd git checkout benji-tests
git branch benji-tests
git push origin develop 
git commit -m "Slight refactor around how you print the logs to stdout"
git add hoverctl/*.go
git checkout main.go
git commit -m "Added the ability to follow logs"
git commit -m "Updated to use a proper tailing library"
git add hoverctl/glide*
git add hoverctl/vendor
rm -rf hoverctl/vendor/github.com/dleung/
glide get github.com/hpcloud/tail
git commit -m "Added the ability to see logs from hoverfly thorugh the hoverctl"
git commit -m "Changed the error message to be more inline with other error messages"
git add hoverctl/log*.go
git commit -m "Added both gotail and fsnotify.v1 dependencies to hoverctl"
git add vendor/gopkg.in/fsnotify.v1/
git add vendor/github.com/dleung/gotail/
glide get github.com/dleung/gotail
git commit -m "Created a logfile struct to encapsulate the log reading functionality"
git add logfile*
git commit -m "Stdout and stderr get redirected from the process to a file in the .hoverfly directory"
ls /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/.hoverfly/hoverfly.51686.51687.log
ls /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/.hoverfly/hoverfly.51686.51687.log"
ls -al /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/bin/hoverctl
cat /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/.hoverfly/hoverfly.64681.64682.log
cat Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/.hoverfly/hoverfly.64681.64682.log
cat /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/.hoverfly/hoverfly.63568.63569.log
git push
git commit -m "Added the release to the download URL"
git add install.sh 
git push origin master :v0.7.0
git tag v0.7.0
git tag v0.7.0 -d
git push --tags
git branch v0.7.0 -d
git commit -m "Updating the circle.yml to pass the git tag into the build for releasing"
git push origin makefile
git commit -m "Removed test from make gox-build"
git Makefile 
git cherry-pick cac15b8414f7f8081730714f6b3796145bd67c0b
git cherry-pick 83fb8b11ed389ac407efdd840d5fed036a612a2f
git cherry-pick 89ef2913ed588512f2955b7d2b48e7eeca5c3de0
git cherry-pick cb01e753a5d028995a6ce00fb25c92821d77e63c
git checkout makefile
git branch makefile
git clone git@github.com:SpectoLabs/hoverfly-install.git
git checkout *_test.go
git checkout core/cmd/hoverfly/main.go 
git commit -m "Added the cache rehashing into Hoverfly on startup"
git add functional-tests/core/ft_webserver_test.go 
git reset HEAD core/cmd/hoverfly/main.go 
git commit -m "Created a function for rehashing the requests cache when switching between proxy and webserver"
git add core/cache_utils*
git commit -m "Added a way to start up a Hoverfly with a database while being a webserver"
git commit -m "Added a way to start up a Hoverfly with a database"
git add functional-tests/core/ft_*
git add functional-tests/core/ft_
git commit -m "Should hopefully be printing a lot less when running the functional tests now"
git commit -m "Added a make target called build-release which will do everything CircleCI will need to do to build a release"
git commit -m "Created a make target for versioning binaries"
git commit -m "Renamed make target build-release to rename-darwin-binaries"
git pull origin develop
git commit -m "make build-release will rename the darwin binaries to OSX"
git commit -m "Refactored some of the common functions of starting Hoverfly in the functional tests"
git add functional-tests/core/ft_suite_test.go
git clone git@github.com:SpectoLabs/hoverfly.git hoverfly-true
git fetch -p
git commit -m "Updated binaries to the new v0.7.0 version of Hoverfly"
git add hoverfly_*
git add hoverfly_
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_freebsd_386 > hoverfly_freebsd_386
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_freebsd_amd64 > hoverfly_freebsd_amd64
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_linux_arm > hoverfly_linux_arm
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_linux_amd64 > hoverfly_linux_amd64
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_linux_386 > hoverfly_linux_386
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_netbsd_386 > hoverfly_netbsd_386
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_netbsd_amd64 > hoverfly_amd64
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_netbsd_arm > hoverfly_netbsd_arm
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_openbsd_386 > hoverfly_openbsd_386
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_openbsd_amd64 > hoverfly_openbsd_amd64
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_OSX_386 > hoverfly_OSX_386
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_OSX_amd64 > hoverfly_OSX_amd64
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_windows_386.exe > hoverfly_windows_386.exe
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_windows_amd64.exe > hoverfly_windows_amd64.exe
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_windows_amd64.exe
curl https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_windows_amd64.exe
wget  https://github.com/SpectoLabs/hoverfly/releases/download/v0.7.0/hoverfly_windows_amd64.exe
git push origin :refs/tags/v0.7.0
git tag -d v0.7.0
git commit -m "Updating the circle.yml to check the right repository"
git merge --no-ff hoverctl-merge-in
git add Dockerfile -u
git merge master
git checkout -b hoverctl-merge-in origin/hoverctl-merge-in
git fetch origin
git push origin hoverctl-merge-in
git merge hoverctl/hoverctl-merge-in
git fetch hoverctl
git fetch develop
git checkout develop -d
git remote add develop git@github.com:/SpectoLabs/hoverfly-fork.git
git clone git@github.com:SpectoLabs/hoverfly-junit.git
cd sandbox/go/src/github.com/SpectoLabs/hoverfly/core/cmd/hoverfly/
git commit -m "Added an error message if you don't specify what you want to delete when using hoverctl"
git add functional-tests/hoverctl/hoverfly_delete_test.go 
git commit -m "You can now delete delays, simulations or all in hoverctl using the delete command"
git commit -m "Renamed the wipe command to delete in hoverctl"
git add functional-tests/hoverctl/*.go
git commit -m "The wipe command in hoverctl is now delete with an alias to wipe"
git commit -m "Changed the configuration argument on start from configuration to server type"
git commit -m "You now get a specific error when trying to change the mode of Hoverfly as a webserver"
git commit -m "Added a delete endpoint for response delays"
git commit -m "Updated the .gitignore to ignore the binaries produced when running the makefile"
git add .gitignore
git commit -m "You can now use hoverctl to start Hoverfly in either proxy or webserver mode"
git commit -m "You cannot change the mode when you are running as a webserver"
git add functional-tests/core/*.go
git commit -m "Functional tests around webserver mode"
git commit -m "When in webserver mode, requests will have a hash where the destination is ignored"
git add core/*.go
git commit -m "Not sure how this slipped through the net, but there were some left over d's"
git commit -m "Renamed the d to hf for all the hoverfly struct functions"
git commit -m "When you start the Hoverfly proxy, it will check the configuration and then configure the proxy correctly"
git commit -m "NewProxy() will only get called now when you call StartProxy()"
git commit -m "Created a function for creating a proxy configured as a webserver"
git add core/proxy.go 
git commit -m "Forgot to finish the comment on NewProxy() for proxy.go"
git commit -m "Renamed UpdateProxy to NewProxy and have moved that out into its own proxy.go file and is no longer a Hoverfly function"
git commit -m "Added a webserver config value which is set to false by default, unless you use the -webserver flag"
git add core/settings*
cd sandbox/go/src/github.com/SpectoLabs/hoverfly-webserver-spike/
git commit -m "Moving some of the Hoverfly struct and functions into the hoverfly.go file"
git clone git@github.com:SpectoLabs/hoverfly-fork.git
git commit -m "Making sure the simulation used in the test is there before it tries to use it"
git commit -m "Making the test less dependent on the state other tests leave it in"
git commit -m "Changed the end to end suite to not exit if it can't delete the requests db"
git commit -m "Added tests for interactions with Hoverfly regarding lack of authentication"
git commit -m "Added an appropriate error message when trying to talked to an Hoverfly that requires authentication credentials that have not been provided"
git commit -m "Fixing the tests up a bit so they are more resilient"
git commit -m "Added tests to cover all possible interactions with an authenticated Hoverfly api"
cat /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/functional-tests/hoverctl/.hoverfly/cache/mogronalol.twitter.latest.json
git commit -m "Created a set of tests for testing against an authenticated Hoverfly"
git commit -m "Changed the order of the flags again for starting Hoverfly"
cd $GOPATH/src/github.com/SpectoLabs/hoverfly
git commit -m "Changing the order of the Hoverfly flags when you start the binary"
git add hoverfly_end_to_end_suite_test.go 
git commit -m "Changed the functional tests to check the /api/health endpoint when checking if Hoverfly is running"
git commit -m "Added an unauthenticated /api/health endpoint to determine if the application is up or not"
git commit -m "Changed the hoverfly command for adding the test user to use Run() instead of Start()"
git commit -m "Tidying up the functional tests ready for a test against a Hoverfly using authentication"
git commit -m "Moved the code to get the authentication token into its own function"
git commit -m "Will only authenticate and get code if the Hoverfly struct doesn't already have an authentication code"
git add hoverfly.go
git commit -m "Should now handle authentication for Hoverfly instances with authentication enabled"
git commit -m "Added hoverfly.username and hoverfly.password to the config.yaml"
git add config.go 
git commit -m "Moved the mode checking stuff at startup into its own little function"
git add core/cmd
git checkoure core
git commit -m "Moved the Hoverfly struct out of models and into the hoverfly file"
git commit -m "Removed the binaries from the bin folders as the Makefile should generate these for you"
git add functional-tests/*/bin/*
touch functional-tests/core/bin/.gitkeep
touch functional-tests/hoverctl/bin/.gitkeep
git commit -m "Updated the hoverctl-fuctional-test make target to copy the hoverfly binary into the functional test bin"
git fetch
git commit -m "Removed the binaries form the functional test suites and updated the Makefile to copy the hoverfly binary as preperation for running the hoverctl functional tests"
git add functional-tests/core/bin
git add functional-tests/hoverctl/bin
git add functional-tests/hoverctl/bin/hover*
git commit -m "Updated dependencies make target to include hoverfly and the functional tests"
cd src/github.com/SpectoLabs/
cd src/github.com/KeluDiao/
go get github.com/KeluDiao/gotube
go install github.com/KeluDiao/gotube
git commit -m "Using --strip-vcs on dependencies now"
git add functional-tests/hoverctl/vendor
git add functional-tests/core/vendor
git add core/vendor
git commit -m "Remove the vendor directories
git rm functional-tests/core/bin/hoverfly  -f
git rm functional-tests/core/bin/hoverfly 
vim ../.gitignore
ls vendor/github.com/rakyll/statik/
gits status
cd .git
cat .gitignore
git commit -m "Changed the Makefile back to using glide to get dependencies"
vim .gitignore 
cd vendor/github.com/mitchellh/go-homedir/
git status vendor
ls vendor/github.com/mitchellh/go-homedir/
glide install github.com/mitchellh/go-homedir
ls vendor/github.com/mitchellh/
ls vendor/github.com/
git commit -m "Updated .gitignore to not ignore vendor packages"
git commit -m "Removed using glide to get dependencies when running tests and build through make"
git commit -m "Added vendor package for hoverctl functional tests"
git commit -m "Added vendor package for core functional tests"
git commit -m "Added vendor package for hoverctl"
cd ~/sandbox/go/src/github.com/SpectoLabs/hoverfly-fork
mv hoverfly-fork ~/sandbox/go/src/github.com/SpectoLabs/
git commit -m "Added a make target for gox build"
cd sandbox/go/src/github.com/SpectoLabs/hoverfly
git commit -m "Removed old make targets"
git commit -m "Added an alias for the test make target as build"
git commit -m "Renamed the build make target to test"
git commit -m "Added a make target for build"
git commit -m "Added a make target for hoverfly-functional-test"
git commit -m "Updated the hoverfly functional tests to remove all dependency on the core hoverfly code base"
git commit -m "Added .gitkeep to the bin directories of both functional-test projects"
git add .gitkeep
touch .gitkeep
git commit -m "Added a make target for hoverfly-build"
git pull -r origin hoverctl-merge-in
git commit -m "Added a make target for hoverfly-test"
git commit -m "Added a make target for hoverfly-functional-test-dependencies"
git commit -m "Updated the hoverfly functional test package to be called core"
git add core -u
git commit -m "Added a make target for hoverfly-dependencies"
vim .git
git commit -m "Merged hoverctl into hoverfly"
git merge hoverctl
git branch hoverctl hoverctl/master
git tag -d 0.0.4
git tag -d v0.0.2
git tag -d v0.0.4
git tag -d v0.0.3
git branch -a
git remote add hoverctl ../hoverctl
git branch -m hoverctl hoverctl-merge-in
git commit -m "Updated admin.go to use statik in the core package"
git merge B-master
git branch B-master localctl/master
git commit -m "Updated admin.go to use statik in the corep package"
git tag --help
git fetch localctl
git remote add localctl ../hoverctl
git commit -m "Updated main.go to use the moved packages"
git add cmd/hoverfly/main.go 
git commit -m "Moved statik directory into core package"
git add core/statik
git add statik
git commit -m "Moved vendor directory to core package"
git checkout vendor
git commit -m "Updated readme.md to point to moved static folder in the core package"
git commit -m "Moved static folder into core package"
git add core/static
git add static
git commit -m "Removed some potentially unused files, if you were using these, please let me know"
git add supervisor.conf 
git add provision.yml 
git add packer.json 
git add Vagrantfile 
mv ~/sandbox/go/src/github.com/SpectoLabs/hoverfly/provision.yml    .
mv ~/sandbox/go/src/github.com/SpectoLabs/hoverfly/supervisor.conf   .
mv ~/sandbox/go/src/github.com/SpectoLabs/hoverfly/Vagrantfile  .
mv ~/sandbox/go/src/github.com/SpectoLabs/hoverfly/packer.json .
git commit -m "Moved cert.pem to the core package"
git add cert.pem 
git commit -m "Moved hoverfly source into core package"
git add core/examples
git add examples -u
git mv Dockerfile core/
git mv
git rm core/cmd/hoverfly/hoverfly
git add cmd -u
git add cmd
git add *.go -u
git commit -m "Moved certs to core package"
git add certs -u
git checkout certs
git commit -m "Moved authentication to core package"
git add authentication -u
git add core/authentication/ -u
git add *.go
git commit -m "Moved models into the core package"
git add core/models -u
git add models -u
git add models
git commit -m "Moved metrics into core package"
git add metrics
git add core/metrics/metrics.go -u
git add --help
git add help
git add -u core
git commit -m "Moved cache into core package"
git add authentication/backends/storage_backend.go 
git commit -m "Moved testutil into core package"
git checkout authentication/
git checkout admin.go 
git commit -m "Trying to make the tests more reliable"
git add ft_api_test.go 
git checkout ft_modes_test.go 
git commit -m "Added glide for functional tests"
glide get github.com/phayes/freeport
glide get github.com/onsi/gomega
glide get github.com/onsi/ginkgo
glide get github.com/dghubble/sling
glide install github.com/dghubble/sling
git commit -m "Moved functional tests into their own directory"
git rm bin -rf
git rm bin -r
git rm gopkg.in -r
git rm golang.org -r
git rm golang.org -f
git rm golang.org
git rm github.com -r
git rm github.com
rm -rf github.com/
git add . -u
git add functional-tests/hoverfly/
git add ft_modes_test.go 
git checkout ft_api_test.go
git add ft_suite_test.go 
git checkout cmd/hoverfly/main.go 
cd ~/sandbox/go/src/github.com/SpectoLabs/hoverfly
git reset HEAD ft_api_test.go
git checkout ft_api_test.go 
git commit -m "Updated the functional tests to use the binary of hoverfly rather than the source"
git reset --soft HEAD~   
git add ft_import_export_test.go 
git checkout ft_modes_test.go
git reset HEAD ft_modes_test.go
cd ~/sandbox/go/src/github.com/SpectoLabs/hoverctl
git checkout -b hoverctl
git checkout hoverctl -b
git commit -m "Run all the tests, including functional tests for hoverctl with make hoverctl-functional-tests. It will build you a new hoverctl binary to run your functional tests against"
git commit -m "Makefile will now build hoverctl and then publish it to a target folder with hoverctl-build"
git commit -m "Ignore target folder"
git commit -m "Tidying makefile a bit"
git commit -m "Added target for getting all dependencies"
git add Makefile
git commit -m "Makefile now does tests for both hoverctl and the functional tests"
git commit -m "Fixed a failing test, turns out the tests almost always pass in IntelliJ"
git add hoverctl/simulation_test.go 
git commit -m "Moving the functional tests again but this time into their own functional tests folder"
git rm functional-tests/hoverctl/.hoverfly/config.yaml -f
git rm functional-tests/hoverctl/.hoverfly/cache/mogronalol.twitter.latest.json -f
git rm functional-tests/hoverctl/.hoverfly/cache/mogronalol.twitter.latest.json
git rm functional-tests/hoverctl/.hoverfly/*pid -f
git rm functional-tests/hoverctl/.hoverfly/*pid
git rm functional-tests/hoverctl/.hoverfly/cache/*pid
git commit -m "Staring to update the makefile so that it can build both projects"
git commit -m "Moved hoverctl into its own folder"
git add hoverctl -u
git commit -m "Created a functional test for starting and stopping with both admin and proxy port flags"
git add start_stop_hoverfly_test.go 
git commit -m "Added a functional test for starting a stopping with a different proxy port"
git commit -m "Fixed up some bad English"
git commit -m "Added a test for starting Hoverfly with a different admin port"
git commit -m "Tidying up the modes tests"
git add hoverfly_modes_test.go 
git commit -m "Adding some .gitkeep files to the directories that we need for the tests to run"
git add hoverctl-ft/
touch cache/.gitkeep
git commit -m "Should not need the config file in the directory as the tests should create it"
git rm hoverctl-ft/.hoverfly/config.yaml 
git checkout hoverctl-ft/.hoverfly/config.yaml 
git add hoverctl-ft/*.go
git commit -m "Fixed the glide configs so that hoverctl-ft has the freeport depedendency and not hoverctl"
git add hoverctl-ft/glide*
git add *glide*
git commit -m "Tests will write configuration in the hoverctl-ft project"
git add hoverctl-ft/*go
git commit -m "Indentation problem"
git add hoverctl-ft/start_stop_hoverfly_test.go 
git commit -m "Now using Output instead of CombinedOutput"
git commit -m "Hfiles are not JSON files. So long hoverfiles, we hardly knew thee"
git commit -m "Removed some debug logging from a previous problem solving session"
git add spectolab.go 
git commit -m "Added a test for trying to stop hoverfly when it isn't running"
git commit -m "Renaming the cli test to the hoverfly modes test"
git commit -m "Tidying up the test and removing some old debug stuff"
git commit -m "Put the hoverctl-ft/bin folder on the path so that hoverctl can launch hoverfly"
git commit -m "Added a test for trying to start hoverfly multiple times"
git add start_stop_hoverfly_test.go
git commit -m "Removing a panic that was left for debug"
git commit -m "Randomising the proxy port also in functional tests"
git add hoverctl-ft/cli_test.go 
git commit -m "Messy empty lines left from a merge"
git add hoverctl-ft/hoverfly_end_to_end_suite_test.go 
git commit -m "Added tests around starting and stopping Hoverfly"
git checkout hoverctl-ft/cli_test.go 
cd sandbox/go/src/github.com/SpectoLabs/hoverctl/
git commit -m "Testing now takes the CombinedOutput and uses ContainsSubstring for assertions just to get it passing again"
git add cli_test.go 
git commit -m "Moved the Before and After for the cli tests into the Describe function for \"with a running hoverfly\""
git add hoverctl-ft
git commit -m "Updated the functional tests to use the new binary"
git commit -m "Should be the end of the logging changes"
git commit -m "More changes to logging"
git add spectolab.go
git commit -m "Exporting now has proper logging"
git commit -m "Handling errors better around starting a Hoverfly process"
git commit -m "Handling errors properly around NewSimulation function"
git commit -m "Sorting logging out around stopping"
git commit -m "Removed the end-to-end folder"
git add end-to-end -u
git push -f
git add hoverctl-ft/ -u
git add hoverctl-ft/ -U
git add -u hoverctl-ft/
git add -u hoverctl-ft
git add hoverctl-ft -u
git commit -m "Moved the end to end testing into hoverctl"
git add end-to-end/
wget -q -O - http://git.io/sinister | sh -s -- -u https://github.com/SpectoLabs/hoverfly/releases/download/v0.6.0/hoverfly_v0.6.0_OSX_amd64
sh <(curl -sSL http://git.io/sinister) -u https://github.com/SpectoLabs/hoverfly/releases/download/v0.6.0/hoverfly_v0.6.0_OSX_amd64
git commit -m "Tidying up logging and adding some comments to the Hoverfly stuff"
git commit -m "Checking API key before pulling or pushing to the SpectoLab"
git commit -m "Removed the host as we don't need it no more"
git add specto*
git commit -m "Defaults to https now for SpectoLab"
git commit -m "Removed SpectoLab config"
git add spectolab_test.go 
git commit -m "Added a function for checking the SpectoLab API key"
git commit -m "Will not not download 404 pages for missing simulations"
git commit -m "Latest is the default version if not specified"
git commit -m "Fixed the localhost detection stuff"
git commit -m "Trying to consistently handle errors"
git checkout hoverfly.go
git add hoverfly.go 
git commit -m "Fixing up some issues raised by golint"
go get -u github.com/golang/lint/golint
git commit -m "Consistently call the SpectoLab the SpectoLab"
git commit -m "If the pid file is for an instance of Hoverfly that is no longer running, it will delete it and start a new Hoverfly"
git add *test.go
git commit -m "Start and stop are looking pretty swish now, if I do say so myself"
git commit -m "HoverflyDirectory now is responsible for retrieving pids"
git commit -m "Using HoverflyDirectory now"
git commit -m "Starting to tidy up how we pass around the Hoverfly home directory"
git commit -m "Tidied up the localcache_test"
git add localcache_test.go 
git checkout localcache_test.go 
git commit -m "Renamed the testdir to hoverctl to reflect renamed project"
git commit -m "Moved the starting and stopping onto the Hoverfly struct"
git commit -m "Fixing formatting"
git commit -m "Created a NewHoverfly constructor function to remove clutter from main.go"
git commit -m "We got logrus"
git commit -m "Added logrus to glide"
cd sandbox/go/src/github.com/SpectoLabs/lab/
git clone git@github.com:SpectoLabs/jenkins-build-pipeline.git
vim github_credentials.txt 
git commit -m "Force the docker-compose rm"
git add startup.sh 
git commit -m "You can push SpectoBenji/alt-warehouse-svc:latest for some different data"
git add SpectoBenji.alt-warehouse-svc.latest.hfile 
git commit -m "Here is a README"
git commit -m "Now using the simulation by SpectoBenji and not benjih"
git commit -m "Changing it to use SpectoBenji as the Github user"
git add jenkins_home/jobs/*/config.xml
git add github_credentials.txt 
vim github_credentials.txt
git reflog expire --expire=now --all & git gc --prune=now --aggressive
reflog expire --expire=now --all & git gc --prune=now --aggressive
git rm --cache res/specto-lab.tar
git rm --cache res
git commit -m "Make a new SpectoLab image just for the demo"
git add plugins.txt -u
git add docker-compose.yml 
git add dockerfiles/
git checkout b4e12f9253f35f9735a1d5ef8cbda68b55e27368
git commit -m "Removing the tarred image, too big for Github"
git add -u res
git clone git@github.com:SpectoLabs/lab.git
cd ~/sandbox/go/src/github.com/SpectoLabs
git commit -m "Using xz compression now to get the image size small enough for Github's 50mb file limit"
git add res -u
git add res/specto-lab.tar.xz 
git push origin master -r
git commit -m "Now gunzipping the image as it was too big"
git add res/specto-lab.tar 
git commit -m "Added a way to get the Specto Lab docker image without needing to set your environment up"
git add res
git commit -m "Changed the startup to be forceful in deleting the old containers"
git commit -m "Some dirs needed for the build process"
git add jenkins_home/deploy/
git add jenkins_home/artifacts/
git commit -m "Updated the startup.sh to set the ssh key permissions"
git commit -m "Here is the docker-compose.yml"
git remote add origin git@github.com:SpectoLabs/jenkins-build-pipeline.git
git commit -m "Updated hoverctl"
git add jenkins_home/bin
git commit -m "Updated the job to use the new names for binaries"
git add jenkins_home/jobs/deploy-warehouse-webapp-to-qa/config.xml 
git add *config.xml
git commit -m "Was messing around with hoverctls, this one should be good"
git add jenkins_home/hoverctl
git commit -m "More hosts to know"
git add jenkins_home/.ssh
git commit -m "Updated the test to use the new endpoint for retrieving data from Specto Lab"
git commit -m "Updated config to match the new Specto Lab config names"
git reset HEAD ../.hoverfly/cache
git reset HEAD ../.hoverfly/*pid
git add ../.hoverfly/
git commit -m "Rearranged the order of the viper configuration stuff, just in case"
git commit -m "Wasn't returning the error before the close"
cd sandbox/go/src/github.com/SpectoLabs/hoverctl
git commit -m "Updated job with new names for hoverfly and hoverctl"
git add ../jobs/warehouse-svc-test-and-virtualize/config.xml 
git commit -m "Redid the keys and stuff"
git add known_hosts 
git add id_rsa*
git clone github-warehouse-svc:SpectoLabs/warehouse-svc.git
git commit -m "And here come the keys"
git commit -m "Clear down abandoned pids"
git commit -m "Hoverfly config"
git add jenkins_home/.hoverfly/config.yaml 
git commit -m "We need freeport"
git add jenkins_home/bin/freeport 
git commit -m "Changed the Dockerfile to update the PATH so we can call the binaries wherever we like"
git reset HEAD jenkins_home/bin/requests.db 
git add jenkins_home/bin/
git commit -m "Here are two of the binaries needed"
git commit -m "They shouldn't have been there"
git add jenkins_home/warehouse-webapp-test-and-build/config.xml -u
git add jenkins_home/warehouse-svc-test-and-virtualize/config.xml -u
git jenkins_home/warehouse-svc-test-and-virtualize/config.xml -u
git add jenkins_home/deploy-warehouse-webapp-to-qa/config.xml -u
wget https://github.com/SpectoLabs/hoverctl/releases/download/0.0.4/hoverctl_linux_amd64
git commit -m "Put the jobs in the wrong place"
git add jenkins_home/jobs/
git rm jobs -r
git rm jobs
git commit -m "Here are the job configs"
git add jenkins_home/
git rm jenkins_home -r
git rm jenkins_home
git rm -rf jenkins_home/jobs
git rm jenkins_home/ -r
git rm jenkins_home/
git commit -m "Take my Jenkins and lock it in"
git commit -m "Make a Jenkins image that has the right plugins"
git add plugins.txt 
git checkout .hoverfly/hoverfly
git commit -m "Moving some stuff around"
git commit -m "Rename to hoverctl"
git commit -m "Trying to improve the spectolab bit"
git commit -m "Return some more errors"
git commit -m "Adding some tests around the SpectoLab stuff"
git checkout jenkins_home/hoverfly-cli
cd sandbox/go/src/github.com/SpectoLabs/hoverfly-cli
git commit -m "Updated to use the new Specto Lab urls"
git commit -m "Fixed the tests by splitting out the Configuration Paths from the Defaults"
git reset HEAD spectolab.go 
git reset --soft HEAD~  
git reset main.go
git add *go
git commit -m "Didn't use the api.key from the config file"
git commit -m "The great renaming of the hoverfile to the simulation"
git commit -m "Renamed the new way of failing and exitiing"
git commit -m "Remove old way of logging errors"
git commit -m "Changing some of the references of hoverfiles to simulations"
git commit -m "Added in a -v verbose flag which makes debuging errors a lot easier"
git checkout config_test.go config_test.go 
git checkout main_test.go
git commit -m "Testing the writing of config to disk"
git add config_test.go 
git commit -m "Starting to add tests around config"
git commit -m "Blank api.key field"
git add config.go
git commit -m "Config will now get generated for you if you do not have it"
git statt
ln -s src/github.com/SpectoLabs/hoverfly-cli/ hoverfly-cli
ln -s src/github.com/SpectoLabs/hub hub
git commit -m "Being more specific with image tags"
git commit -m "Moved config stuff into its own file"
git commit -m "Will create a config file if you don't have one"
git commit -m "Adding go-yaml to glide"
git commit -m "Moved the overriding over the Hoverfly object config into its own function"
git commit -m "Renaming Specto Hub to Specto Lab"
git add spectohub.go -u
git commit -m "Added a local config for hoverfly-cli"
git add .hoverfly/config.yaml 
cd sandbox/go/src/github.com/SpectoLabs/hoverfly-end-to-end/
git commit -m "Slight refactor to handling the where the config is and stuff"
git add main_test.go 
git commit -m "You can now use config from your working directory"
git commit -m "Added tests for setting all modes on hoverfly"
git commit -m "Added tests for getting all the modes"
git commit -m "Setting the mode of hoverfly for retrieval by the cli"
git commit -m "Added sling"
go get github.com/dghubble/sling
git commit -m "Our first functional test"
git commit -m "Got a before and after in"
git commit -m "A basic start for testing"
/Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly-end-to-end/bin/hoverfly-cli
git commit -m "Ignore the vendor folder"
git commit -m "Glide it up"
git commit -m ".gitignore"
cd src/github.com/SpectoLabs
git commit -m "Every great set of tests starts somewhere"
git add test_cli.py 
rm .git -rf
git add venv/
git commit -m "Reminder to check if it is running"
mv ~/sandbox/go/src/github.com/SpectoLabs/hoverfly-cli/target/hoverfly-cli ~/bin
cd src/github.com/SpectoLabs/hoverfly-cli/
git commit -m "Updated the startup.sh to append the docker-local host record if it is not present"
git commit -m "Changed the default to use the internal IP"
git add user-files/simulations/BasicSimulation.scala 
git commit -m "Made the BasicSimulation somewhat configurable for the proxy host"
git commit -m "Trying to get Docker to run up the Gatling image in a way that the Jenkins likes"
git commit -m "Just run that basic simulation, please"
git remote add origin git@github.com:SpectoLabs/hoverfly-load-testing.git
git commit -m "Let's go load test"
git add load-test-1.json 
git add results/
git add results
git commit -m "Space those links out"
git add README.md
git commit -m "Added links to the README.md"
git clone git@github.com:SpectoLabs/developer-pipeline-demo.git
git commit -m "Renamed the README file to the right file type"
git remote add origin git@github.com:SpectoLabs/developer-pipeline-demo.git
git commit -m "Everything you might need to run the demo"
git push -u origin develop
git checkout Dockerfile 
git merge origin/master master
git merge origin/master master -r
git merge old_a/master
git remote add -f old_a https://github.com/elazarl/goproxy.git
go get -u github.com/rusenask/goproxy
cd sandbox/go/src/github.com/nareix/
go get -u github.com/nareix/tls-example
git commit -m "Updating maintainer of Hoverfly Dockerfile"
git checkout -b develop
git commit -m "Changing the default for the service provider to www.producer-svc.com"
vim ~/sandbox/build-pipeline/jenkins_home/jobs/github-api-consumer-example-deploy/config.xml 
git checkout spectohub.go 
git add build.gradle 
git commit -m "Changed the URL to be configurable"
git clone git@github.com:SpectoLabs/warehouse-webapp.git
git commit -m "Enough monkeys and enough typewriters should yield a working Dockerfile"
git commit -m "Made a mistake in how we use the environment variables in the Dockerfile"
git commit -m "Moved the oauth2 key and secret into environment variables that should be overwritable"
git commit -m "Build to a target folder, please"
git commit -m "Added an override-host flag for pulling from the SpectoHub"
git add spectohub.go 
git clone git@github.com:SpectoLabs/hub.git
git clone 
ln -s src/github.com/SpectoLabs/hoverfly hoverfly
ln -s src/github.com/SpectoLabs/hover-cli hoverfly-cli
ln -s hoverfly-ci src/github.com/SpectoLabs/hover-cli/
cd ~/sandbox/go/src/github.com/SpectoLabs/hover-cli
git clone git@github.com:SpectoLabs/warehouse-svc.git
curl -L https://github.com/SpectoLabs/hoverfly-cli/releases/download/v0.0.3/hover-cli_linux_amd64 > hoverfly-cli
git commit -m "Using the admin-port and proxy-port, you can spin up a Hoverfly that defies your config.yaml and maybe you can even spin up multiple Hoverflies as long as they are separate ports, but who knows?"
git commit -m "Added some basic error handling to starting a Hoverfly"
cd $GOPATH/src/github.com/SpectoLabs/hover-cli
git commit -m "You can now override config for host and port with -h and -p"
git commit -m "Better handling for import failures"
cd go/src/github.com/SpectoLabs/hover-cli/
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.6.0/hoverfly_v0.6.0_linux_amd64 > hoverfly
git clone git@github.com:SpectoLabs/framework-svc
git clone git@github.com:SpectoLabs/framework-svc.git
cp .gitignore ../developer-pipeline-demo-2/
git commit -m "More plugins..."
git commit -m "Adding a few more plugins in a sad hope to get this working"
git commit -m "Not sure what happened, but here are some plugins"
git commit -m "Chuck a little bit of cli magic in there"
cd ../go/src/github.com/SpectoLabs/hover-cli/
git commit -m "And now we have a mvn"
git commit -m "We now have pull access to the warehouse-svc project on Github"
git commit -m "Let's get a new job going and I also installed git"
git commit -m "Here are the keys to pull from Github for SpectoLabs/warehouse-svc"
git add jenkins_home/.ssh/
git commit -m "Added logs to the .gitignore"
git commit -m "Remove .ssh from .gitignore"
git add .gitignore 
git check-ignore **/*
git check-ignore *
git push remote origin
git commit -m "First run of Jenkins"
git add jenkins_home
git commit -m "The docker-compose file and the .gitignore"
git rm jenkins_home/ -r --cache
git log
cat .gitignore 
git commit -m "erswe"
cd gitignoretest/
mkdir gitignoretest
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.6.0/hoverfly_v0.6.0_OSX_amd64 > target/hoverfly
curl -L https://github.com/SpectoLabs/hoverfly/releases/download/v0.6.0/hoverfly_v0.6.0_OSX_amd64
curl https://github.com/SpectoLabs/hoverfly/releases/download/v0.6.0/hoverfly_v0.6.0_OSX_amd64
git clone git@github.com:SpectoLabs/build-pipeline.git
git commit -m "More testing around the localcache"
git commit -m "Testing that we throw an appriopriate error if the file does not exist"
git commit -m "Tests were inacurately named"
cd sandbox/go/src/github.com/SpectoLabs/hover-cli/
git filter-branch -f --env-filter "
git filter-branch --commit-filter 'export GIT_AUTHOR_NAME="Benji Hooper" ; export GIT_AUTHOR_EMAIL=benji@sixp.in; git commit-tree "$@"'
vim ~/.gitconfig 
git config --global
git config
git commit -m "Starting to add tests around filewriting"
git add localcache.go
git config --global user.email="benji@sixp.in"
git config --global user.email="benji@sixp.in"]
git commit -m "Added some social logos"
git push --set-upstream origin master
git remote add origin https://github.com/benjih/benjih.github.com.git
git commit --amend --author="Benji Hooper <benji@sixp.in>"
git commit --ammend
git commit --undo
git config user.email "benji@sixp.in"
git config user.email "your_email@example.com"
git commit -m "A rough idea for the website"
git rm css/.DS_STORE
git add css
mv benjih.github.com/ $SANDBOX 
mv pure-layout-blog benjih.github.com
git ini
go get -u github.com/JoelOtter/termloop
git commit -m "Renamed buildHoverfileUri function to buildAbsolutePath"
git add localcache.go 
git commit -m "Put a String and GetFileName functions onto the Hoverfile struct"
git commit -m "Added test to the Makefile"
./hover-cli push benjihooper/gitbook
mv benjihooper.gitbooks.hfile benjihooper.gitbook.hfile
./hover-cli push benjihooper/gitbooks
mv benjih.gitbooks.hfile benjihooper.gitbooks.hfile
./hover-cli import benjih/gitbooks
cat benjih.gitbooks.hfile
./hover-cli import benjihooper/gitbooks
cat benjih.gitbooks.hfile 
git commit -m "Created a hoverfile struct to encapsulate all the parts of the hoverfile name"
git clone https://github.com/dim0627/hugo_theme_robust.git
go get -u -v github.com/spf13/hugo
go get github.com/spf13/hugo
git commit -m "Added gomega to glide"
git commit -m "Renamed local_cache to localcache"
go run *.go import benjih/gitbooks2
go run *.go export benjih/gitbooks2
go run *.go import benjih/gitbooks
go run *.go import  benjih/gitbooks
go run *.go export benjih/gitbooks
git push -u origin --tags -f
git push -u origin master -f
git show v0.6.0
git tag v0.6.0
git tag -d v0.6.0
git reset --hard origin/master
git show v0.5.9
cd hoverflygit show v0.5.9
git commit -m "Using the failAndExit() function more consistently in main.go"
git commit -m "I think I am done refactoring the Specto Hub parts"
git add spectohub.go
git commit -m "Starting to move towards fully refactoring the Specto Hub functionality"
git add *g
git commit -m "Renamed the WipeDatabase function to Wipe"
git commit --amend
git add main.go spectohub.go 
git commit -m "More refactoring"
git commit -m "Moved everything out of the handler ready to get moved into a more OOP like structure"
git commit -m "Moved start and stop hoverfly onto the hoverfly.go file but in a bit of a shit way"
git commit -m "Added a warning message for when config is missing"
git commit -m "Refactored importing models"
git add local_cache.go 
git commit -m "Moved persisting exports into the LocalCache object"
git commit -m "Moved the creating directory stuff into a new go file"
git commit -m "Simplifying how we handle the mode command"
cd sandbox/go/src/github.com/SpectoLabs/hover-cli
git commit -m "Added the ability to pull from the Specto Hub"
cd $GOPATH/src/github.com/SpectoLabs/hoverfly/cmd/hoverfly/
git commit -m "Added the ability to import cached hoverfiles"
cd github.com/SpectoLabs/hoverfly
git commit -m "Removing unneeded println"
git commit -m "Attempting to move the recent push stuff into a SpectoHub object"
git commit -m "Trying to tidy it up a bit"
git commit -m "Refactored the modes into the Hoverfly object"
git commit -m "Refactored the getting of mode onto the Hoverfly object"
git commit -m "Moved wipe onto an all new Hoverfly object"
git commit -m "Fixing up a previously broken println."
git commit -m "Added the ability to wipe the Hoverfly database"
git commit -m "Added a load of stuff so you can now export and then upload to the Specto Hub"
git commit -m "You can now export to disk"
go get github.com/mitchellh/gox
git remote add origin git@github.com:SpectoLabs/hoverfly-cli.git
git commit -m "Added configuration for how and where you run hoverfly"
ls vendor/github.com
cd ../src/github.com/SpectoLabs/hover-cli
go get github.com/spf13/viper
cd github.com/SpectoLabs/hover-cli
go get github.com/BurntSushi/toml
git remote add origin git@github.com:SpectoLabs/github-api-consumer-example-e2e.git
cd github-api-consumer-example-e2e
git commit -m "Made stop a bit better by checking as to whether or not the .pid file is there"
git commit -m "Will now tell you if Hoverfly is already running when you try and start it again"
git commit -m "Problem fixed, .pid is now deleted"
git add main.go start
git commit -m "Can now stop a running Hoverfly, but you seem to have to stop it twice."
git commit -m "Starting Hoverfly will now create a .pid file in ~/.hoverfly"
cd $GOPATH/src/github.com/SpectoLabs/hover-cli/
    https://raw.githubusercontent.com/junegunn/vim-plug/maste
git commit -m "You can now spin up a hoverfly from the command line. You might need a stop now."
cd src/github.com/SpectoLabs/hover-cli
docker run gitlab/gitlab-ce
docker pull gitlab/gitlab-ce
git commit -m "Moved all the mode commands to under mode."
git commit -m "Updating the .gitignore."
git commit -m "Mode will now get you the mode."
git commit -m "Added all the supported Hoverfly modes."
git commit -m "Refactored a little bit ready for more modes."
git commit -m "Can now set the mode to capture for a running hoverfly."
git commit -m "Adding alecthomas/kingpin.v2 and dghubble/sling via glide."
cd $GO_SANDBOX/src/github.com/SpectoLabs/hover-cli/
git commit -m "Starting the project with a .gitignore."
git push origin exporting-binary-fix -f
git push origin exporting-binary-fix
git commit -m "Moved the hashing part of making a key to the Payload object."
git add test_tools.go 
git add models_test.go 
git add models.go 
git add import_test.go 
git add import.go 
cd vendor/github.com/rakyll/statik/example/
cd github.com/rakyll/statik/example/statik
git submodule status
git test -v
git commit -m "PayloadView now uses RequestDetailsView for exposing payloads via the api."
git add import_export_ft_test.go 
git commit -m "Created RequestDetailsView struct and created functions to convert between that and RequestDetails."
git add commit -m "Created RequestDetailsView struct and created functions to convert between that and RequestDetails."
go get -u github.com/nsf/gocode
go get -u github.com/rogpeppe/godef
go get -u github.com/rogpeppe/gode
"go get -u github.com/rogpeppe/gode"
go get -u github.com/golang/lint/golint"
git commit -m "ResponseDetailsView will now encode anything that isn't readable text (images, encoded data)."
git add testdata
git add models.go
git add hoverfly_suite_test.go 
open /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/testdata/16x16square.png
mv ~/Desktop/16x16_square.png $GO_SANDBOX/src/github.com/SpectoLabs/hoverfly/testdata/
open /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/static/img/hoverfly_logo.png 
open /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/static/img/hoverfl
/Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/static/img/hoverfly_logo.png
cat /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/static/img/hoverfly_logo.jpg
ls /Users/benjih/sandbox/go/src/github.com/SpectoLabs/hoverfly/static/img/hoverfly_logo.jpg
git checkout hoverfly_suite_test.gols
git checkout hoverfly_suite_test.go 
git commit -m "Renamed serializableRecordRequests to recordRequestsView."
git add admin.go 
git commit -m "Renamed SerializableResponseDetails into ResponseDetailsView."
git reset HEAD vendor/
git commit -m "Renamed SerializablePayload to PayloadView."
cd src/github.com/SpectoLabs/hoverfly/
git submodule foreach git pull origin master
git submodule update
git checkout -b exporting-binary-fix
git checkout gzip
cd "$GOPATH/src/github.com/SpectoLabs/hoverfly"
git clone https://github.com/SpectoLabs/hoverfly.git "$GOPATH/src/github.com/SpectoLabs/hoverfly"
mkdir -p "$GOPATH/src/github.com/SpectoLabs/"
go get github.com/alecthomas/kingpin
go get github.com/rakyll/statik/
git reset --hard
git push origin gzip
git submodule init
git commit -m "Refactored to have functions that will deal with the Hoverfly api."
git commit -m "Added a functional test for exporting and then reimporting the same data."
git clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go
git clone git@github.com:benjih/toolbox.git
git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
go get github.com/phayes/freeport
go get github.com/pborman/uuid
go get github.com/mattn/go-sqlite3
go get github.com/jinzhu/gorm
go get github.com/gorilla/schema
go get github.com/google/go-github/github
go get github.com/emicklei/go-restful
docker rmi stephenreed/jenkins-java8-maven-git
go get github.com/onsi/gomega
go get github.com/onsi/ginkgo/ginkgo
cd github.com/SpectoLabs/
go run sandbox/go/src/github.com/SpectoLabs/hoverfly/cmd/hoverfly/main.go -capture
cd github.com/SpectoLabs/hoverfly/
cd src/github.com/Hek1t/BoltGUI/
go get github.com/Hek1t/BoltGUI
git commit -m "A new host in known_hosts."
git add jenkins_home/.ssh/known_hosts 
git commit -m "Not sure how this directory got in here, but we don't need it."
git rm test -r
git rm test
rm -rf github-api-consumer-example/
tig github-api-consumer-example/
git commit -m "Added a way to set the host and port."
cd github-api-consumer-example-e2e/
git remote add origin git@gitlab.com:benjih/github-api-consumer-example-e2e.git
git commit -m "Added another test to just test the body."
git commit -m "Here is a basic e2e test."
git rm src/test/resources/ -rf
git sstatus
git rm src/test/resources/ -r
git rm src/test/resources/
git commit -m "Then we add a pom.xml."
git commit -m "Let's start this with a .gitignore."
cp -r simple-java-service/ github-api-consumer-example-e2e
cp simple-java-service/ github-api-consumer-example-e2e
git commit -m "Created a job to run mvn clean install on the github-api-consumer-example."
git add jenkins_home/jobs/github-api-consumer-example/
git clone /Users/benjih/sandbox/build-pipeline/ .
git commit -m "Adding maven."
git checkout jenkins_home/
git commit -m "Adding a key so it can pull from private Github repos."
git add jenkins_home/credentials.xml 
git commit -m "Updating plugins and adding git plugin."
git commit -m "Don't need to keep a copy of failed bootups."
git commit -m "Here is the Jenkins home."
git rm jenkins_home/ -rf
ls github-api-consumer-example/
git commit -m "Adding a volume into the jenkins container so we can persist configuration.@
git rm docker-compose.yml -f
git rm docker-compose.yml 
git reset --soft HEAD~
git commit -m "Got a working jenkins that will spin up and run a job."
cd github-api-consumer-example/
cd github-api-consumer-example/workspace/
git remote add origin git@github.com:SpectoLabs/github-api-consumer-example.git
git commit -m "App will now respond with Github api data and test against Hoverfly using the Hoverfly Junit rule."
curl http://localhost:8888/api/records > $JAVA_SANDBOX/simple-java-service/github_service.json
curl https://api.github.com/repos/SpectoLabs/hoverfly --proxy http://localhost:8500/ -k
curl http://api.github.com/repos/SpectoLabs/hoverfly --proxy http://localhost:8500/ -k
curl http://api.github.com/repos/SpectoLabs/hoverfly --proxy http://localhost:8500/
curl https://api.github.com/repos/SpectoLabs/hoverfly --proxy https://localhost:8500/
curl https://api.github.com/repos/SpectoLabs/hoverfly --proxy http://localhost:8500/
git commit -m "Removed some unneeded stuff from the Spring Boot Application class."
git add src/main/java/hello/Application.java 
git commit -m "Updating the .gitignore to ignore intelliJ files."
