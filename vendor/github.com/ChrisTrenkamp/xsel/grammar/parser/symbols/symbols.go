
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_AbbreviatedAbsoluteLocationPath NT = iota
	NT_AbbreviatedAxisSpecifier 
	NT_AbbreviatedRelativeLocationPath 
	NT_AbbreviatedStep 
	NT_AbbreviatedStepParent 
	NT_AbbreviatedStepSelf 
	NT_AbsoluteLocationPath 
	NT_AbsoluteLocationPathOnly 
	NT_AbsoluteLocationPathWithRelative 
	NT_AdditiveExpr 
	NT_AdditiveExprAdd 
	NT_AdditiveExprSubtract 
	NT_AndExpr 
	NT_AndExprAnd 
	NT_AxisName 
	NT_AxisSpecifier 
	NT_AxisSpecifierWithAxisName 
	NT_EqualityExpr 
	NT_EqualityExprEqual 
	NT_EqualityExprNotEqual 
	NT_FilterExpr 
	NT_FilterExprWithPredicate 
	NT_FunctionCall 
	NT_FunctionCallArgumentList 
	NT_FunctionCallArgumentListArgWithNext 
	NT_FunctionCallArgumentListEndArg 
	NT_FunctionSignature 
	NT_FunctionSignatureNoArgs 
	NT_Literal 
	NT_LocationPath 
	NT_MultiplicativeExpr 
	NT_MultiplicativeExprDivide 
	NT_MultiplicativeExprMod 
	NT_MultiplicativeExprMultiply 
	NT_NameTestAnyElement 
	NT_NameTestLocalAnyNamespace 
	NT_NameTestLocalAnyNamespaceReservedNameConflict 
	NT_NameTestNamespaceAnyLocal 
	NT_NameTestNamespaceAnyLocalReservedNameConflict 
	NT_NameTestQNameLocalOnly 
	NT_NameTestQNameLocalOnlyReservedNameConflict 
	NT_NameTestQNameNamespaceWithLocal 
	NT_NameTestQNameNamespaceWithLocalReservedNameConflictBoth 
	NT_NameTestQNameNamespaceWithLocalReservedNameConflictLocal 
	NT_NameTestQNameNamespaceWithLocalReservedNameConflictNamespace 
	NT_NodeTest 
	NT_NodeTestAndPredicate 
	NT_NodeTestNodeTypeNoArgTest 
	NT_NodeTestProcInstTargetTest 
	NT_NodeType 
	NT_Number 
	NT_OrExpr 
	NT_OrExprOr 
	NT_PathExpr 
	NT_PathExprFilterWithAbbreviatedPath 
	NT_PathExprFilterWithPath 
	NT_Predicate 
	NT_PrimaryExpr 
	NT_PrimaryExprParenthetic 
	NT_QName 
	NT_QNameLocalOnly 
	NT_QNameNamespaceWithLocal 
	NT_RelationalExpr 
	NT_RelationalExprGreaterThan 
	NT_RelationalExprGreaterThanOrEqual 
	NT_RelationalExprLessThan 
	NT_RelationalExprLessThanOrEqual 
	NT_RelativeLocationPath 
	NT_RelativeLocationPathWithStep 
	NT_ReservedNameConflictResolver 
	NT_Step 
	NT_StepWithAxisAndNodeTest 
	NT_StepWithAxisAndNodeTestAndPredicate 
	NT_StepWithPredicate 
	NT_StepWithPredicateWithAnotherPredicate 
	NT_UnaryExpr 
	NT_UnaryExprNegate 
	NT_UnionExpr 
	NT_UnionExprUnion 
	NT_VariableReference 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // != 
	T_1  // ( 
	T_2  // ) 
	T_3  // * 
	T_4  // + 
	T_5  // , 
	T_6  // - 
	T_7  // . 
	T_8  // .. 
	T_9  // / 
	T_10  // // 
	T_11  // : 
	T_12  // :: 
	T_13  // < 
	T_14  // <= 
	T_15  // = 
	T_16  // > 
	T_17  // >= 
	T_18  // @ 
	T_19  // [ 
	T_20  // ] 
	T_21  // ancestor 
	T_22  // ancestor-or-self 
	T_23  // and 
	T_24  // attribute 
	T_25  // child 
	T_26  // comment 
	T_27  // descendant 
	T_28  // descendant-or-self 
	T_29  // digits 
	T_30  // div 
	T_31  // doublequote 
	T_32  // following 
	T_33  // following-sibling 
	T_34  // mod 
	T_35  // namespace 
	T_36  // ncname 
	T_37  // node 
	T_38  // or 
	T_39  // parent 
	T_40  // preceding 
	T_41  // preceding-sibling 
	T_42  // processing-instruction 
	T_43  // self 
	T_44  // singlequote 
	T_45  // text 
	T_46  // variableReference 
	T_47  // | 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"AbbreviatedAbsoluteLocationPath", /* NT_AbbreviatedAbsoluteLocationPath */
	"AbbreviatedAxisSpecifier", /* NT_AbbreviatedAxisSpecifier */
	"AbbreviatedRelativeLocationPath", /* NT_AbbreviatedRelativeLocationPath */
	"AbbreviatedStep", /* NT_AbbreviatedStep */
	"AbbreviatedStepParent", /* NT_AbbreviatedStepParent */
	"AbbreviatedStepSelf", /* NT_AbbreviatedStepSelf */
	"AbsoluteLocationPath", /* NT_AbsoluteLocationPath */
	"AbsoluteLocationPathOnly", /* NT_AbsoluteLocationPathOnly */
	"AbsoluteLocationPathWithRelative", /* NT_AbsoluteLocationPathWithRelative */
	"AdditiveExpr", /* NT_AdditiveExpr */
	"AdditiveExprAdd", /* NT_AdditiveExprAdd */
	"AdditiveExprSubtract", /* NT_AdditiveExprSubtract */
	"AndExpr", /* NT_AndExpr */
	"AndExprAnd", /* NT_AndExprAnd */
	"AxisName", /* NT_AxisName */
	"AxisSpecifier", /* NT_AxisSpecifier */
	"AxisSpecifierWithAxisName", /* NT_AxisSpecifierWithAxisName */
	"EqualityExpr", /* NT_EqualityExpr */
	"EqualityExprEqual", /* NT_EqualityExprEqual */
	"EqualityExprNotEqual", /* NT_EqualityExprNotEqual */
	"FilterExpr", /* NT_FilterExpr */
	"FilterExprWithPredicate", /* NT_FilterExprWithPredicate */
	"FunctionCall", /* NT_FunctionCall */
	"FunctionCallArgumentList", /* NT_FunctionCallArgumentList */
	"FunctionCallArgumentListArgWithNext", /* NT_FunctionCallArgumentListArgWithNext */
	"FunctionCallArgumentListEndArg", /* NT_FunctionCallArgumentListEndArg */
	"FunctionSignature", /* NT_FunctionSignature */
	"FunctionSignatureNoArgs", /* NT_FunctionSignatureNoArgs */
	"Literal", /* NT_Literal */
	"LocationPath", /* NT_LocationPath */
	"MultiplicativeExpr", /* NT_MultiplicativeExpr */
	"MultiplicativeExprDivide", /* NT_MultiplicativeExprDivide */
	"MultiplicativeExprMod", /* NT_MultiplicativeExprMod */
	"MultiplicativeExprMultiply", /* NT_MultiplicativeExprMultiply */
	"NameTestAnyElement", /* NT_NameTestAnyElement */
	"NameTestLocalAnyNamespace", /* NT_NameTestLocalAnyNamespace */
	"NameTestLocalAnyNamespaceReservedNameConflict", /* NT_NameTestLocalAnyNamespaceReservedNameConflict */
	"NameTestNamespaceAnyLocal", /* NT_NameTestNamespaceAnyLocal */
	"NameTestNamespaceAnyLocalReservedNameConflict", /* NT_NameTestNamespaceAnyLocalReservedNameConflict */
	"NameTestQNameLocalOnly", /* NT_NameTestQNameLocalOnly */
	"NameTestQNameLocalOnlyReservedNameConflict", /* NT_NameTestQNameLocalOnlyReservedNameConflict */
	"NameTestQNameNamespaceWithLocal", /* NT_NameTestQNameNamespaceWithLocal */
	"NameTestQNameNamespaceWithLocalReservedNameConflictBoth", /* NT_NameTestQNameNamespaceWithLocalReservedNameConflictBoth */
	"NameTestQNameNamespaceWithLocalReservedNameConflictLocal", /* NT_NameTestQNameNamespaceWithLocalReservedNameConflictLocal */
	"NameTestQNameNamespaceWithLocalReservedNameConflictNamespace", /* NT_NameTestQNameNamespaceWithLocalReservedNameConflictNamespace */
	"NodeTest", /* NT_NodeTest */
	"NodeTestAndPredicate", /* NT_NodeTestAndPredicate */
	"NodeTestNodeTypeNoArgTest", /* NT_NodeTestNodeTypeNoArgTest */
	"NodeTestProcInstTargetTest", /* NT_NodeTestProcInstTargetTest */
	"NodeType", /* NT_NodeType */
	"Number", /* NT_Number */
	"OrExpr", /* NT_OrExpr */
	"OrExprOr", /* NT_OrExprOr */
	"PathExpr", /* NT_PathExpr */
	"PathExprFilterWithAbbreviatedPath", /* NT_PathExprFilterWithAbbreviatedPath */
	"PathExprFilterWithPath", /* NT_PathExprFilterWithPath */
	"Predicate", /* NT_Predicate */
	"PrimaryExpr", /* NT_PrimaryExpr */
	"PrimaryExprParenthetic", /* NT_PrimaryExprParenthetic */
	"QName", /* NT_QName */
	"QNameLocalOnly", /* NT_QNameLocalOnly */
	"QNameNamespaceWithLocal", /* NT_QNameNamespaceWithLocal */
	"RelationalExpr", /* NT_RelationalExpr */
	"RelationalExprGreaterThan", /* NT_RelationalExprGreaterThan */
	"RelationalExprGreaterThanOrEqual", /* NT_RelationalExprGreaterThanOrEqual */
	"RelationalExprLessThan", /* NT_RelationalExprLessThan */
	"RelationalExprLessThanOrEqual", /* NT_RelationalExprLessThanOrEqual */
	"RelativeLocationPath", /* NT_RelativeLocationPath */
	"RelativeLocationPathWithStep", /* NT_RelativeLocationPathWithStep */
	"ReservedNameConflictResolver", /* NT_ReservedNameConflictResolver */
	"Step", /* NT_Step */
	"StepWithAxisAndNodeTest", /* NT_StepWithAxisAndNodeTest */
	"StepWithAxisAndNodeTestAndPredicate", /* NT_StepWithAxisAndNodeTestAndPredicate */
	"StepWithPredicate", /* NT_StepWithPredicate */
	"StepWithPredicateWithAnotherPredicate", /* NT_StepWithPredicateWithAnotherPredicate */
	"UnaryExpr", /* NT_UnaryExpr */
	"UnaryExprNegate", /* NT_UnaryExprNegate */
	"UnionExpr", /* NT_UnionExpr */
	"UnionExprUnion", /* NT_UnionExprUnion */
	"VariableReference", /* NT_VariableReference */ 
}

var tToString = []string { 
	"!=", /* T_0 */
	"(", /* T_1 */
	")", /* T_2 */
	"*", /* T_3 */
	"+", /* T_4 */
	",", /* T_5 */
	"-", /* T_6 */
	".", /* T_7 */
	"..", /* T_8 */
	"/", /* T_9 */
	"//", /* T_10 */
	":", /* T_11 */
	"::", /* T_12 */
	"<", /* T_13 */
	"<=", /* T_14 */
	"=", /* T_15 */
	">", /* T_16 */
	">=", /* T_17 */
	"@", /* T_18 */
	"[", /* T_19 */
	"]", /* T_20 */
	"ancestor", /* T_21 */
	"ancestor-or-self", /* T_22 */
	"and", /* T_23 */
	"attribute", /* T_24 */
	"child", /* T_25 */
	"comment", /* T_26 */
	"descendant", /* T_27 */
	"descendant-or-self", /* T_28 */
	"digits", /* T_29 */
	"div", /* T_30 */
	"doublequote", /* T_31 */
	"following", /* T_32 */
	"following-sibling", /* T_33 */
	"mod", /* T_34 */
	"namespace", /* T_35 */
	"ncname", /* T_36 */
	"node", /* T_37 */
	"or", /* T_38 */
	"parent", /* T_39 */
	"preceding", /* T_40 */
	"preceding-sibling", /* T_41 */
	"processing-instruction", /* T_42 */
	"self", /* T_43 */
	"singlequote", /* T_44 */
	"text", /* T_45 */
	"variableReference", /* T_46 */
	"|", /* T_47 */ 
}

var stringNT = map[string]NT{ 
	"AbbreviatedAbsoluteLocationPath":NT_AbbreviatedAbsoluteLocationPath,
	"AbbreviatedAxisSpecifier":NT_AbbreviatedAxisSpecifier,
	"AbbreviatedRelativeLocationPath":NT_AbbreviatedRelativeLocationPath,
	"AbbreviatedStep":NT_AbbreviatedStep,
	"AbbreviatedStepParent":NT_AbbreviatedStepParent,
	"AbbreviatedStepSelf":NT_AbbreviatedStepSelf,
	"AbsoluteLocationPath":NT_AbsoluteLocationPath,
	"AbsoluteLocationPathOnly":NT_AbsoluteLocationPathOnly,
	"AbsoluteLocationPathWithRelative":NT_AbsoluteLocationPathWithRelative,
	"AdditiveExpr":NT_AdditiveExpr,
	"AdditiveExprAdd":NT_AdditiveExprAdd,
	"AdditiveExprSubtract":NT_AdditiveExprSubtract,
	"AndExpr":NT_AndExpr,
	"AndExprAnd":NT_AndExprAnd,
	"AxisName":NT_AxisName,
	"AxisSpecifier":NT_AxisSpecifier,
	"AxisSpecifierWithAxisName":NT_AxisSpecifierWithAxisName,
	"EqualityExpr":NT_EqualityExpr,
	"EqualityExprEqual":NT_EqualityExprEqual,
	"EqualityExprNotEqual":NT_EqualityExprNotEqual,
	"FilterExpr":NT_FilterExpr,
	"FilterExprWithPredicate":NT_FilterExprWithPredicate,
	"FunctionCall":NT_FunctionCall,
	"FunctionCallArgumentList":NT_FunctionCallArgumentList,
	"FunctionCallArgumentListArgWithNext":NT_FunctionCallArgumentListArgWithNext,
	"FunctionCallArgumentListEndArg":NT_FunctionCallArgumentListEndArg,
	"FunctionSignature":NT_FunctionSignature,
	"FunctionSignatureNoArgs":NT_FunctionSignatureNoArgs,
	"Literal":NT_Literal,
	"LocationPath":NT_LocationPath,
	"MultiplicativeExpr":NT_MultiplicativeExpr,
	"MultiplicativeExprDivide":NT_MultiplicativeExprDivide,
	"MultiplicativeExprMod":NT_MultiplicativeExprMod,
	"MultiplicativeExprMultiply":NT_MultiplicativeExprMultiply,
	"NameTestAnyElement":NT_NameTestAnyElement,
	"NameTestLocalAnyNamespace":NT_NameTestLocalAnyNamespace,
	"NameTestLocalAnyNamespaceReservedNameConflict":NT_NameTestLocalAnyNamespaceReservedNameConflict,
	"NameTestNamespaceAnyLocal":NT_NameTestNamespaceAnyLocal,
	"NameTestNamespaceAnyLocalReservedNameConflict":NT_NameTestNamespaceAnyLocalReservedNameConflict,
	"NameTestQNameLocalOnly":NT_NameTestQNameLocalOnly,
	"NameTestQNameLocalOnlyReservedNameConflict":NT_NameTestQNameLocalOnlyReservedNameConflict,
	"NameTestQNameNamespaceWithLocal":NT_NameTestQNameNamespaceWithLocal,
	"NameTestQNameNamespaceWithLocalReservedNameConflictBoth":NT_NameTestQNameNamespaceWithLocalReservedNameConflictBoth,
	"NameTestQNameNamespaceWithLocalReservedNameConflictLocal":NT_NameTestQNameNamespaceWithLocalReservedNameConflictLocal,
	"NameTestQNameNamespaceWithLocalReservedNameConflictNamespace":NT_NameTestQNameNamespaceWithLocalReservedNameConflictNamespace,
	"NodeTest":NT_NodeTest,
	"NodeTestAndPredicate":NT_NodeTestAndPredicate,
	"NodeTestNodeTypeNoArgTest":NT_NodeTestNodeTypeNoArgTest,
	"NodeTestProcInstTargetTest":NT_NodeTestProcInstTargetTest,
	"NodeType":NT_NodeType,
	"Number":NT_Number,
	"OrExpr":NT_OrExpr,
	"OrExprOr":NT_OrExprOr,
	"PathExpr":NT_PathExpr,
	"PathExprFilterWithAbbreviatedPath":NT_PathExprFilterWithAbbreviatedPath,
	"PathExprFilterWithPath":NT_PathExprFilterWithPath,
	"Predicate":NT_Predicate,
	"PrimaryExpr":NT_PrimaryExpr,
	"PrimaryExprParenthetic":NT_PrimaryExprParenthetic,
	"QName":NT_QName,
	"QNameLocalOnly":NT_QNameLocalOnly,
	"QNameNamespaceWithLocal":NT_QNameNamespaceWithLocal,
	"RelationalExpr":NT_RelationalExpr,
	"RelationalExprGreaterThan":NT_RelationalExprGreaterThan,
	"RelationalExprGreaterThanOrEqual":NT_RelationalExprGreaterThanOrEqual,
	"RelationalExprLessThan":NT_RelationalExprLessThan,
	"RelationalExprLessThanOrEqual":NT_RelationalExprLessThanOrEqual,
	"RelativeLocationPath":NT_RelativeLocationPath,
	"RelativeLocationPathWithStep":NT_RelativeLocationPathWithStep,
	"ReservedNameConflictResolver":NT_ReservedNameConflictResolver,
	"Step":NT_Step,
	"StepWithAxisAndNodeTest":NT_StepWithAxisAndNodeTest,
	"StepWithAxisAndNodeTestAndPredicate":NT_StepWithAxisAndNodeTestAndPredicate,
	"StepWithPredicate":NT_StepWithPredicate,
	"StepWithPredicateWithAnotherPredicate":NT_StepWithPredicateWithAnotherPredicate,
	"UnaryExpr":NT_UnaryExpr,
	"UnaryExprNegate":NT_UnaryExprNegate,
	"UnionExpr":NT_UnionExpr,
	"UnionExprUnion":NT_UnionExprUnion,
	"VariableReference":NT_VariableReference,
}
