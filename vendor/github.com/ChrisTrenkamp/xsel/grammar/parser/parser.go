// Package parser is generated by gogll. Do not edit.
package parser

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"github.com/ChrisTrenkamp/xsel/grammar/lexer"
	"github.com/ChrisTrenkamp/xsel/grammar/parser/bsr"
	"github.com/ChrisTrenkamp/xsel/grammar/parser/slot"
	"github.com/ChrisTrenkamp/xsel/grammar/parser/symbols"
	"github.com/ChrisTrenkamp/xsel/grammar/token"
)

type parser struct {
	cI int

	R *descriptors
	U *descriptors

	popped   map[poppedNode]bool
	crf      map[clusterNode][]*crfNode
	crfNodes map[crfNode]*crfNode

	lex         *lexer.Lexer
	parseErrors []*Error

	bsrSet *bsr.Set
}

func newParser(l *lexer.Lexer) *parser {
	return &parser{
		cI:     0,
		lex:    l,
		R:      &descriptors{},
		U:      &descriptors{},
		popped: make(map[poppedNode]bool),
		crf: map[clusterNode][]*crfNode{
			{symbols.NT_OrExpr, 0}: {},
		},
		crfNodes:    map[crfNode]*crfNode{},
		bsrSet:      bsr.New(symbols.NT_OrExpr, l),
		parseErrors: nil,
	}
}

// Parse returns the BSR set containing the parse forest.
// If the parse was successfull []*Error is nil
func Parse(l *lexer.Lexer) (*bsr.Set, []*Error) {
	return newParser(l).parse()
}

func (p *parser) parse() (*bsr.Set, []*Error) {
	var L slot.Label
	m, cU := len(p.lex.Tokens)-1, 0
	p.ntAdd(symbols.NT_OrExpr, 0)
	// p.DumpDescriptors()
	for !p.R.empty() {
		L, cU, p.cI = p.R.remove()

		// fmt.Println()
		// fmt.Printf("L:%s, cI:%d, I[p.cI]:%s, cU:%d\n", L, p.cI, p.lex.Tokens[p.cI], cU)
		// p.DumpDescriptors()

		switch L {
		case slot.AbbreviatedAbsoluteLocationPath0R0: // AbbreviatedAbsoluteLocationPath : ∙// RelativeLocationPath

			p.bsrSet.Add(slot.AbbreviatedAbsoluteLocationPath0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AbbreviatedAbsoluteLocationPath0R1) {
				p.parseError(slot.AbbreviatedAbsoluteLocationPath0R1, p.cI, first[slot.AbbreviatedAbsoluteLocationPath0R1])
				break
			}

			p.call(slot.AbbreviatedAbsoluteLocationPath0R2, cU, p.cI)
		case slot.AbbreviatedAbsoluteLocationPath0R2: // AbbreviatedAbsoluteLocationPath : // RelativeLocationPath ∙

			if p.follow(symbols.NT_AbbreviatedAbsoluteLocationPath) {
				p.rtn(symbols.NT_AbbreviatedAbsoluteLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.AbbreviatedAbsoluteLocationPath0R0, p.cI, followSets[symbols.NT_AbbreviatedAbsoluteLocationPath])
			}
		case slot.AbbreviatedAxisSpecifier0R0: // AbbreviatedAxisSpecifier : ∙@

			p.bsrSet.Add(slot.AbbreviatedAxisSpecifier0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AbbreviatedAxisSpecifier) {
				p.rtn(symbols.NT_AbbreviatedAxisSpecifier, cU, p.cI)
			} else {
				p.parseError(slot.AbbreviatedAxisSpecifier0R0, p.cI, followSets[symbols.NT_AbbreviatedAxisSpecifier])
			}
		case slot.AbbreviatedRelativeLocationPath0R0: // AbbreviatedRelativeLocationPath : ∙RelativeLocationPath // Step

			p.call(slot.AbbreviatedRelativeLocationPath0R1, cU, p.cI)
		case slot.AbbreviatedRelativeLocationPath0R1: // AbbreviatedRelativeLocationPath : RelativeLocationPath ∙// Step

			if !p.testSelect(slot.AbbreviatedRelativeLocationPath0R1) {
				p.parseError(slot.AbbreviatedRelativeLocationPath0R1, p.cI, first[slot.AbbreviatedRelativeLocationPath0R1])
				break
			}

			p.bsrSet.Add(slot.AbbreviatedRelativeLocationPath0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AbbreviatedRelativeLocationPath0R2) {
				p.parseError(slot.AbbreviatedRelativeLocationPath0R2, p.cI, first[slot.AbbreviatedRelativeLocationPath0R2])
				break
			}

			p.call(slot.AbbreviatedRelativeLocationPath0R3, cU, p.cI)
		case slot.AbbreviatedRelativeLocationPath0R3: // AbbreviatedRelativeLocationPath : RelativeLocationPath // Step ∙

			if p.follow(symbols.NT_AbbreviatedRelativeLocationPath) {
				p.rtn(symbols.NT_AbbreviatedRelativeLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.AbbreviatedRelativeLocationPath0R0, p.cI, followSets[symbols.NT_AbbreviatedRelativeLocationPath])
			}
		case slot.AbbreviatedStep0R0: // AbbreviatedStep : ∙AbbreviatedStepSelf

			p.call(slot.AbbreviatedStep0R1, cU, p.cI)
		case slot.AbbreviatedStep0R1: // AbbreviatedStep : AbbreviatedStepSelf ∙

			if p.follow(symbols.NT_AbbreviatedStep) {
				p.rtn(symbols.NT_AbbreviatedStep, cU, p.cI)
			} else {
				p.parseError(slot.AbbreviatedStep0R0, p.cI, followSets[symbols.NT_AbbreviatedStep])
			}
		case slot.AbbreviatedStep1R0: // AbbreviatedStep : ∙AbbreviatedStepParent

			p.call(slot.AbbreviatedStep1R1, cU, p.cI)
		case slot.AbbreviatedStep1R1: // AbbreviatedStep : AbbreviatedStepParent ∙

			if p.follow(symbols.NT_AbbreviatedStep) {
				p.rtn(symbols.NT_AbbreviatedStep, cU, p.cI)
			} else {
				p.parseError(slot.AbbreviatedStep1R0, p.cI, followSets[symbols.NT_AbbreviatedStep])
			}
		case slot.AbbreviatedStepParent0R0: // AbbreviatedStepParent : ∙..

			p.bsrSet.Add(slot.AbbreviatedStepParent0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AbbreviatedStepParent) {
				p.rtn(symbols.NT_AbbreviatedStepParent, cU, p.cI)
			} else {
				p.parseError(slot.AbbreviatedStepParent0R0, p.cI, followSets[symbols.NT_AbbreviatedStepParent])
			}
		case slot.AbbreviatedStepSelf0R0: // AbbreviatedStepSelf : ∙.

			p.bsrSet.Add(slot.AbbreviatedStepSelf0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AbbreviatedStepSelf) {
				p.rtn(symbols.NT_AbbreviatedStepSelf, cU, p.cI)
			} else {
				p.parseError(slot.AbbreviatedStepSelf0R0, p.cI, followSets[symbols.NT_AbbreviatedStepSelf])
			}
		case slot.AbsoluteLocationPath0R0: // AbsoluteLocationPath : ∙AbsoluteLocationPathOnly

			p.call(slot.AbsoluteLocationPath0R1, cU, p.cI)
		case slot.AbsoluteLocationPath0R1: // AbsoluteLocationPath : AbsoluteLocationPathOnly ∙

			if p.follow(symbols.NT_AbsoluteLocationPath) {
				p.rtn(symbols.NT_AbsoluteLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.AbsoluteLocationPath0R0, p.cI, followSets[symbols.NT_AbsoluteLocationPath])
			}
		case slot.AbsoluteLocationPath1R0: // AbsoluteLocationPath : ∙AbsoluteLocationPathWithRelative

			p.call(slot.AbsoluteLocationPath1R1, cU, p.cI)
		case slot.AbsoluteLocationPath1R1: // AbsoluteLocationPath : AbsoluteLocationPathWithRelative ∙

			if p.follow(symbols.NT_AbsoluteLocationPath) {
				p.rtn(symbols.NT_AbsoluteLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.AbsoluteLocationPath1R0, p.cI, followSets[symbols.NT_AbsoluteLocationPath])
			}
		case slot.AbsoluteLocationPath2R0: // AbsoluteLocationPath : ∙AbbreviatedAbsoluteLocationPath

			p.call(slot.AbsoluteLocationPath2R1, cU, p.cI)
		case slot.AbsoluteLocationPath2R1: // AbsoluteLocationPath : AbbreviatedAbsoluteLocationPath ∙

			if p.follow(symbols.NT_AbsoluteLocationPath) {
				p.rtn(symbols.NT_AbsoluteLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.AbsoluteLocationPath2R0, p.cI, followSets[symbols.NT_AbsoluteLocationPath])
			}
		case slot.AbsoluteLocationPathOnly0R0: // AbsoluteLocationPathOnly : ∙/

			p.bsrSet.Add(slot.AbsoluteLocationPathOnly0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AbsoluteLocationPathOnly) {
				p.rtn(symbols.NT_AbsoluteLocationPathOnly, cU, p.cI)
			} else {
				p.parseError(slot.AbsoluteLocationPathOnly0R0, p.cI, followSets[symbols.NT_AbsoluteLocationPathOnly])
			}
		case slot.AbsoluteLocationPathWithRelative0R0: // AbsoluteLocationPathWithRelative : ∙/ RelativeLocationPath

			p.bsrSet.Add(slot.AbsoluteLocationPathWithRelative0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AbsoluteLocationPathWithRelative0R1) {
				p.parseError(slot.AbsoluteLocationPathWithRelative0R1, p.cI, first[slot.AbsoluteLocationPathWithRelative0R1])
				break
			}

			p.call(slot.AbsoluteLocationPathWithRelative0R2, cU, p.cI)
		case slot.AbsoluteLocationPathWithRelative0R2: // AbsoluteLocationPathWithRelative : / RelativeLocationPath ∙

			if p.follow(symbols.NT_AbsoluteLocationPathWithRelative) {
				p.rtn(symbols.NT_AbsoluteLocationPathWithRelative, cU, p.cI)
			} else {
				p.parseError(slot.AbsoluteLocationPathWithRelative0R0, p.cI, followSets[symbols.NT_AbsoluteLocationPathWithRelative])
			}
		case slot.AdditiveExpr0R0: // AdditiveExpr : ∙MultiplicativeExpr

			p.call(slot.AdditiveExpr0R1, cU, p.cI)
		case slot.AdditiveExpr0R1: // AdditiveExpr : MultiplicativeExpr ∙

			if p.follow(symbols.NT_AdditiveExpr) {
				p.rtn(symbols.NT_AdditiveExpr, cU, p.cI)
			} else {
				p.parseError(slot.AdditiveExpr0R0, p.cI, followSets[symbols.NT_AdditiveExpr])
			}
		case slot.AdditiveExpr1R0: // AdditiveExpr : ∙AdditiveExprAdd

			p.call(slot.AdditiveExpr1R1, cU, p.cI)
		case slot.AdditiveExpr1R1: // AdditiveExpr : AdditiveExprAdd ∙

			if p.follow(symbols.NT_AdditiveExpr) {
				p.rtn(symbols.NT_AdditiveExpr, cU, p.cI)
			} else {
				p.parseError(slot.AdditiveExpr1R0, p.cI, followSets[symbols.NT_AdditiveExpr])
			}
		case slot.AdditiveExpr2R0: // AdditiveExpr : ∙AdditiveExprSubtract

			p.call(slot.AdditiveExpr2R1, cU, p.cI)
		case slot.AdditiveExpr2R1: // AdditiveExpr : AdditiveExprSubtract ∙

			if p.follow(symbols.NT_AdditiveExpr) {
				p.rtn(symbols.NT_AdditiveExpr, cU, p.cI)
			} else {
				p.parseError(slot.AdditiveExpr2R0, p.cI, followSets[symbols.NT_AdditiveExpr])
			}
		case slot.AdditiveExprAdd0R0: // AdditiveExprAdd : ∙AdditiveExpr + MultiplicativeExpr

			p.call(slot.AdditiveExprAdd0R1, cU, p.cI)
		case slot.AdditiveExprAdd0R1: // AdditiveExprAdd : AdditiveExpr ∙+ MultiplicativeExpr

			if !p.testSelect(slot.AdditiveExprAdd0R1) {
				p.parseError(slot.AdditiveExprAdd0R1, p.cI, first[slot.AdditiveExprAdd0R1])
				break
			}

			p.bsrSet.Add(slot.AdditiveExprAdd0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AdditiveExprAdd0R2) {
				p.parseError(slot.AdditiveExprAdd0R2, p.cI, first[slot.AdditiveExprAdd0R2])
				break
			}

			p.call(slot.AdditiveExprAdd0R3, cU, p.cI)
		case slot.AdditiveExprAdd0R3: // AdditiveExprAdd : AdditiveExpr + MultiplicativeExpr ∙

			if p.follow(symbols.NT_AdditiveExprAdd) {
				p.rtn(symbols.NT_AdditiveExprAdd, cU, p.cI)
			} else {
				p.parseError(slot.AdditiveExprAdd0R0, p.cI, followSets[symbols.NT_AdditiveExprAdd])
			}
		case slot.AdditiveExprSubtract0R0: // AdditiveExprSubtract : ∙AdditiveExpr - MultiplicativeExpr

			p.call(slot.AdditiveExprSubtract0R1, cU, p.cI)
		case slot.AdditiveExprSubtract0R1: // AdditiveExprSubtract : AdditiveExpr ∙- MultiplicativeExpr

			if !p.testSelect(slot.AdditiveExprSubtract0R1) {
				p.parseError(slot.AdditiveExprSubtract0R1, p.cI, first[slot.AdditiveExprSubtract0R1])
				break
			}

			p.bsrSet.Add(slot.AdditiveExprSubtract0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AdditiveExprSubtract0R2) {
				p.parseError(slot.AdditiveExprSubtract0R2, p.cI, first[slot.AdditiveExprSubtract0R2])
				break
			}

			p.call(slot.AdditiveExprSubtract0R3, cU, p.cI)
		case slot.AdditiveExprSubtract0R3: // AdditiveExprSubtract : AdditiveExpr - MultiplicativeExpr ∙

			if p.follow(symbols.NT_AdditiveExprSubtract) {
				p.rtn(symbols.NT_AdditiveExprSubtract, cU, p.cI)
			} else {
				p.parseError(slot.AdditiveExprSubtract0R0, p.cI, followSets[symbols.NT_AdditiveExprSubtract])
			}
		case slot.AndExpr0R0: // AndExpr : ∙EqualityExpr

			p.call(slot.AndExpr0R1, cU, p.cI)
		case slot.AndExpr0R1: // AndExpr : EqualityExpr ∙

			if p.follow(symbols.NT_AndExpr) {
				p.rtn(symbols.NT_AndExpr, cU, p.cI)
			} else {
				p.parseError(slot.AndExpr0R0, p.cI, followSets[symbols.NT_AndExpr])
			}
		case slot.AndExpr1R0: // AndExpr : ∙AndExprAnd

			p.call(slot.AndExpr1R1, cU, p.cI)
		case slot.AndExpr1R1: // AndExpr : AndExprAnd ∙

			if p.follow(symbols.NT_AndExpr) {
				p.rtn(symbols.NT_AndExpr, cU, p.cI)
			} else {
				p.parseError(slot.AndExpr1R0, p.cI, followSets[symbols.NT_AndExpr])
			}
		case slot.AndExprAnd0R0: // AndExprAnd : ∙AndExpr and EqualityExpr

			p.call(slot.AndExprAnd0R1, cU, p.cI)
		case slot.AndExprAnd0R1: // AndExprAnd : AndExpr ∙and EqualityExpr

			if !p.testSelect(slot.AndExprAnd0R1) {
				p.parseError(slot.AndExprAnd0R1, p.cI, first[slot.AndExprAnd0R1])
				break
			}

			p.bsrSet.Add(slot.AndExprAnd0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AndExprAnd0R2) {
				p.parseError(slot.AndExprAnd0R2, p.cI, first[slot.AndExprAnd0R2])
				break
			}

			p.call(slot.AndExprAnd0R3, cU, p.cI)
		case slot.AndExprAnd0R3: // AndExprAnd : AndExpr and EqualityExpr ∙

			if p.follow(symbols.NT_AndExprAnd) {
				p.rtn(symbols.NT_AndExprAnd, cU, p.cI)
			} else {
				p.parseError(slot.AndExprAnd0R0, p.cI, followSets[symbols.NT_AndExprAnd])
			}
		case slot.AxisName0R0: // AxisName : ∙ancestor

			p.bsrSet.Add(slot.AxisName0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName0R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName1R0: // AxisName : ∙ancestor-or-self

			p.bsrSet.Add(slot.AxisName1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName1R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName2R0: // AxisName : ∙attribute

			p.bsrSet.Add(slot.AxisName2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName2R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName3R0: // AxisName : ∙child

			p.bsrSet.Add(slot.AxisName3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName3R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName4R0: // AxisName : ∙descendant

			p.bsrSet.Add(slot.AxisName4R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName4R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName5R0: // AxisName : ∙descendant-or-self

			p.bsrSet.Add(slot.AxisName5R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName5R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName6R0: // AxisName : ∙following

			p.bsrSet.Add(slot.AxisName6R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName6R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName7R0: // AxisName : ∙following-sibling

			p.bsrSet.Add(slot.AxisName7R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName7R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName8R0: // AxisName : ∙namespace

			p.bsrSet.Add(slot.AxisName8R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName8R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName9R0: // AxisName : ∙parent

			p.bsrSet.Add(slot.AxisName9R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName9R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName10R0: // AxisName : ∙preceding

			p.bsrSet.Add(slot.AxisName10R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName10R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName11R0: // AxisName : ∙preceding-sibling

			p.bsrSet.Add(slot.AxisName11R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName11R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisName12R0: // AxisName : ∙self

			p.bsrSet.Add(slot.AxisName12R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisName) {
				p.rtn(symbols.NT_AxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisName12R0, p.cI, followSets[symbols.NT_AxisName])
			}
		case slot.AxisSpecifier0R0: // AxisSpecifier : ∙AxisSpecifierWithAxisName

			p.call(slot.AxisSpecifier0R1, cU, p.cI)
		case slot.AxisSpecifier0R1: // AxisSpecifier : AxisSpecifierWithAxisName ∙

			if p.follow(symbols.NT_AxisSpecifier) {
				p.rtn(symbols.NT_AxisSpecifier, cU, p.cI)
			} else {
				p.parseError(slot.AxisSpecifier0R0, p.cI, followSets[symbols.NT_AxisSpecifier])
			}
		case slot.AxisSpecifier1R0: // AxisSpecifier : ∙AbbreviatedAxisSpecifier

			p.call(slot.AxisSpecifier1R1, cU, p.cI)
		case slot.AxisSpecifier1R1: // AxisSpecifier : AbbreviatedAxisSpecifier ∙

			if p.follow(symbols.NT_AxisSpecifier) {
				p.rtn(symbols.NT_AxisSpecifier, cU, p.cI)
			} else {
				p.parseError(slot.AxisSpecifier1R0, p.cI, followSets[symbols.NT_AxisSpecifier])
			}
		case slot.AxisSpecifierWithAxisName0R0: // AxisSpecifierWithAxisName : ∙AxisName ::

			p.call(slot.AxisSpecifierWithAxisName0R1, cU, p.cI)
		case slot.AxisSpecifierWithAxisName0R1: // AxisSpecifierWithAxisName : AxisName ∙::

			if !p.testSelect(slot.AxisSpecifierWithAxisName0R1) {
				p.parseError(slot.AxisSpecifierWithAxisName0R1, p.cI, first[slot.AxisSpecifierWithAxisName0R1])
				break
			}

			p.bsrSet.Add(slot.AxisSpecifierWithAxisName0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_AxisSpecifierWithAxisName) {
				p.rtn(symbols.NT_AxisSpecifierWithAxisName, cU, p.cI)
			} else {
				p.parseError(slot.AxisSpecifierWithAxisName0R0, p.cI, followSets[symbols.NT_AxisSpecifierWithAxisName])
			}
		case slot.EqualityExpr0R0: // EqualityExpr : ∙RelationalExpr

			p.call(slot.EqualityExpr0R1, cU, p.cI)
		case slot.EqualityExpr0R1: // EqualityExpr : RelationalExpr ∙

			if p.follow(symbols.NT_EqualityExpr) {
				p.rtn(symbols.NT_EqualityExpr, cU, p.cI)
			} else {
				p.parseError(slot.EqualityExpr0R0, p.cI, followSets[symbols.NT_EqualityExpr])
			}
		case slot.EqualityExpr1R0: // EqualityExpr : ∙EqualityExprEqual

			p.call(slot.EqualityExpr1R1, cU, p.cI)
		case slot.EqualityExpr1R1: // EqualityExpr : EqualityExprEqual ∙

			if p.follow(symbols.NT_EqualityExpr) {
				p.rtn(symbols.NT_EqualityExpr, cU, p.cI)
			} else {
				p.parseError(slot.EqualityExpr1R0, p.cI, followSets[symbols.NT_EqualityExpr])
			}
		case slot.EqualityExpr2R0: // EqualityExpr : ∙EqualityExprNotEqual

			p.call(slot.EqualityExpr2R1, cU, p.cI)
		case slot.EqualityExpr2R1: // EqualityExpr : EqualityExprNotEqual ∙

			if p.follow(symbols.NT_EqualityExpr) {
				p.rtn(symbols.NT_EqualityExpr, cU, p.cI)
			} else {
				p.parseError(slot.EqualityExpr2R0, p.cI, followSets[symbols.NT_EqualityExpr])
			}
		case slot.EqualityExprEqual0R0: // EqualityExprEqual : ∙EqualityExpr = RelationalExpr

			p.call(slot.EqualityExprEqual0R1, cU, p.cI)
		case slot.EqualityExprEqual0R1: // EqualityExprEqual : EqualityExpr ∙= RelationalExpr

			if !p.testSelect(slot.EqualityExprEqual0R1) {
				p.parseError(slot.EqualityExprEqual0R1, p.cI, first[slot.EqualityExprEqual0R1])
				break
			}

			p.bsrSet.Add(slot.EqualityExprEqual0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EqualityExprEqual0R2) {
				p.parseError(slot.EqualityExprEqual0R2, p.cI, first[slot.EqualityExprEqual0R2])
				break
			}

			p.call(slot.EqualityExprEqual0R3, cU, p.cI)
		case slot.EqualityExprEqual0R3: // EqualityExprEqual : EqualityExpr = RelationalExpr ∙

			if p.follow(symbols.NT_EqualityExprEqual) {
				p.rtn(symbols.NT_EqualityExprEqual, cU, p.cI)
			} else {
				p.parseError(slot.EqualityExprEqual0R0, p.cI, followSets[symbols.NT_EqualityExprEqual])
			}
		case slot.EqualityExprNotEqual0R0: // EqualityExprNotEqual : ∙EqualityExpr != RelationalExpr

			p.call(slot.EqualityExprNotEqual0R1, cU, p.cI)
		case slot.EqualityExprNotEqual0R1: // EqualityExprNotEqual : EqualityExpr ∙!= RelationalExpr

			if !p.testSelect(slot.EqualityExprNotEqual0R1) {
				p.parseError(slot.EqualityExprNotEqual0R1, p.cI, first[slot.EqualityExprNotEqual0R1])
				break
			}

			p.bsrSet.Add(slot.EqualityExprNotEqual0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EqualityExprNotEqual0R2) {
				p.parseError(slot.EqualityExprNotEqual0R2, p.cI, first[slot.EqualityExprNotEqual0R2])
				break
			}

			p.call(slot.EqualityExprNotEqual0R3, cU, p.cI)
		case slot.EqualityExprNotEqual0R3: // EqualityExprNotEqual : EqualityExpr != RelationalExpr ∙

			if p.follow(symbols.NT_EqualityExprNotEqual) {
				p.rtn(symbols.NT_EqualityExprNotEqual, cU, p.cI)
			} else {
				p.parseError(slot.EqualityExprNotEqual0R0, p.cI, followSets[symbols.NT_EqualityExprNotEqual])
			}
		case slot.FilterExpr0R0: // FilterExpr : ∙PrimaryExpr

			p.call(slot.FilterExpr0R1, cU, p.cI)
		case slot.FilterExpr0R1: // FilterExpr : PrimaryExpr ∙

			if p.follow(symbols.NT_FilterExpr) {
				p.rtn(symbols.NT_FilterExpr, cU, p.cI)
			} else {
				p.parseError(slot.FilterExpr0R0, p.cI, followSets[symbols.NT_FilterExpr])
			}
		case slot.FilterExpr1R0: // FilterExpr : ∙FilterExprWithPredicate

			p.call(slot.FilterExpr1R1, cU, p.cI)
		case slot.FilterExpr1R1: // FilterExpr : FilterExprWithPredicate ∙

			if p.follow(symbols.NT_FilterExpr) {
				p.rtn(symbols.NT_FilterExpr, cU, p.cI)
			} else {
				p.parseError(slot.FilterExpr1R0, p.cI, followSets[symbols.NT_FilterExpr])
			}
		case slot.FilterExprWithPredicate0R0: // FilterExprWithPredicate : ∙FilterExpr Predicate

			p.call(slot.FilterExprWithPredicate0R1, cU, p.cI)
		case slot.FilterExprWithPredicate0R1: // FilterExprWithPredicate : FilterExpr ∙Predicate

			if !p.testSelect(slot.FilterExprWithPredicate0R1) {
				p.parseError(slot.FilterExprWithPredicate0R1, p.cI, first[slot.FilterExprWithPredicate0R1])
				break
			}

			p.call(slot.FilterExprWithPredicate0R2, cU, p.cI)
		case slot.FilterExprWithPredicate0R2: // FilterExprWithPredicate : FilterExpr Predicate ∙

			if p.follow(symbols.NT_FilterExprWithPredicate) {
				p.rtn(symbols.NT_FilterExprWithPredicate, cU, p.cI)
			} else {
				p.parseError(slot.FilterExprWithPredicate0R0, p.cI, followSets[symbols.NT_FilterExprWithPredicate])
			}
		case slot.FunctionCall0R0: // FunctionCall : ∙QName ( FunctionSignature

			p.call(slot.FunctionCall0R1, cU, p.cI)
		case slot.FunctionCall0R1: // FunctionCall : QName ∙( FunctionSignature

			if !p.testSelect(slot.FunctionCall0R1) {
				p.parseError(slot.FunctionCall0R1, p.cI, first[slot.FunctionCall0R1])
				break
			}

			p.bsrSet.Add(slot.FunctionCall0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.FunctionCall0R2) {
				p.parseError(slot.FunctionCall0R2, p.cI, first[slot.FunctionCall0R2])
				break
			}

			p.call(slot.FunctionCall0R3, cU, p.cI)
		case slot.FunctionCall0R3: // FunctionCall : QName ( FunctionSignature ∙

			if p.follow(symbols.NT_FunctionCall) {
				p.rtn(symbols.NT_FunctionCall, cU, p.cI)
			} else {
				p.parseError(slot.FunctionCall0R0, p.cI, followSets[symbols.NT_FunctionCall])
			}
		case slot.FunctionCallArgumentList0R0: // FunctionCallArgumentList : ∙FunctionCallArgumentListArgWithNext

			p.call(slot.FunctionCallArgumentList0R1, cU, p.cI)
		case slot.FunctionCallArgumentList0R1: // FunctionCallArgumentList : FunctionCallArgumentListArgWithNext ∙

			if p.follow(symbols.NT_FunctionCallArgumentList) {
				p.rtn(symbols.NT_FunctionCallArgumentList, cU, p.cI)
			} else {
				p.parseError(slot.FunctionCallArgumentList0R0, p.cI, followSets[symbols.NT_FunctionCallArgumentList])
			}
		case slot.FunctionCallArgumentList1R0: // FunctionCallArgumentList : ∙FunctionCallArgumentListEndArg

			p.call(slot.FunctionCallArgumentList1R1, cU, p.cI)
		case slot.FunctionCallArgumentList1R1: // FunctionCallArgumentList : FunctionCallArgumentListEndArg ∙

			if p.follow(symbols.NT_FunctionCallArgumentList) {
				p.rtn(symbols.NT_FunctionCallArgumentList, cU, p.cI)
			} else {
				p.parseError(slot.FunctionCallArgumentList1R0, p.cI, followSets[symbols.NT_FunctionCallArgumentList])
			}
		case slot.FunctionCallArgumentListArgWithNext0R0: // FunctionCallArgumentListArgWithNext : ∙OrExpr , FunctionCallArgumentList

			p.call(slot.FunctionCallArgumentListArgWithNext0R1, cU, p.cI)
		case slot.FunctionCallArgumentListArgWithNext0R1: // FunctionCallArgumentListArgWithNext : OrExpr ∙, FunctionCallArgumentList

			if !p.testSelect(slot.FunctionCallArgumentListArgWithNext0R1) {
				p.parseError(slot.FunctionCallArgumentListArgWithNext0R1, p.cI, first[slot.FunctionCallArgumentListArgWithNext0R1])
				break
			}

			p.bsrSet.Add(slot.FunctionCallArgumentListArgWithNext0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.FunctionCallArgumentListArgWithNext0R2) {
				p.parseError(slot.FunctionCallArgumentListArgWithNext0R2, p.cI, first[slot.FunctionCallArgumentListArgWithNext0R2])
				break
			}

			p.call(slot.FunctionCallArgumentListArgWithNext0R3, cU, p.cI)
		case slot.FunctionCallArgumentListArgWithNext0R3: // FunctionCallArgumentListArgWithNext : OrExpr , FunctionCallArgumentList ∙

			if p.follow(symbols.NT_FunctionCallArgumentListArgWithNext) {
				p.rtn(symbols.NT_FunctionCallArgumentListArgWithNext, cU, p.cI)
			} else {
				p.parseError(slot.FunctionCallArgumentListArgWithNext0R0, p.cI, followSets[symbols.NT_FunctionCallArgumentListArgWithNext])
			}
		case slot.FunctionCallArgumentListEndArg0R0: // FunctionCallArgumentListEndArg : ∙OrExpr )

			p.call(slot.FunctionCallArgumentListEndArg0R1, cU, p.cI)
		case slot.FunctionCallArgumentListEndArg0R1: // FunctionCallArgumentListEndArg : OrExpr ∙)

			if !p.testSelect(slot.FunctionCallArgumentListEndArg0R1) {
				p.parseError(slot.FunctionCallArgumentListEndArg0R1, p.cI, first[slot.FunctionCallArgumentListEndArg0R1])
				break
			}

			p.bsrSet.Add(slot.FunctionCallArgumentListEndArg0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_FunctionCallArgumentListEndArg) {
				p.rtn(symbols.NT_FunctionCallArgumentListEndArg, cU, p.cI)
			} else {
				p.parseError(slot.FunctionCallArgumentListEndArg0R0, p.cI, followSets[symbols.NT_FunctionCallArgumentListEndArg])
			}
		case slot.FunctionSignature0R0: // FunctionSignature : ∙FunctionSignatureNoArgs

			p.call(slot.FunctionSignature0R1, cU, p.cI)
		case slot.FunctionSignature0R1: // FunctionSignature : FunctionSignatureNoArgs ∙

			if p.follow(symbols.NT_FunctionSignature) {
				p.rtn(symbols.NT_FunctionSignature, cU, p.cI)
			} else {
				p.parseError(slot.FunctionSignature0R0, p.cI, followSets[symbols.NT_FunctionSignature])
			}
		case slot.FunctionSignature1R0: // FunctionSignature : ∙FunctionCallArgumentList

			p.call(slot.FunctionSignature1R1, cU, p.cI)
		case slot.FunctionSignature1R1: // FunctionSignature : FunctionCallArgumentList ∙

			if p.follow(symbols.NT_FunctionSignature) {
				p.rtn(symbols.NT_FunctionSignature, cU, p.cI)
			} else {
				p.parseError(slot.FunctionSignature1R0, p.cI, followSets[symbols.NT_FunctionSignature])
			}
		case slot.FunctionSignatureNoArgs0R0: // FunctionSignatureNoArgs : ∙)

			p.bsrSet.Add(slot.FunctionSignatureNoArgs0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_FunctionSignatureNoArgs) {
				p.rtn(symbols.NT_FunctionSignatureNoArgs, cU, p.cI)
			} else {
				p.parseError(slot.FunctionSignatureNoArgs0R0, p.cI, followSets[symbols.NT_FunctionSignatureNoArgs])
			}
		case slot.Literal0R0: // Literal : ∙singlequote

			p.bsrSet.Add(slot.Literal0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Literal) {
				p.rtn(symbols.NT_Literal, cU, p.cI)
			} else {
				p.parseError(slot.Literal0R0, p.cI, followSets[symbols.NT_Literal])
			}
		case slot.Literal1R0: // Literal : ∙doublequote

			p.bsrSet.Add(slot.Literal1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Literal) {
				p.rtn(symbols.NT_Literal, cU, p.cI)
			} else {
				p.parseError(slot.Literal1R0, p.cI, followSets[symbols.NT_Literal])
			}
		case slot.LocationPath0R0: // LocationPath : ∙RelativeLocationPath

			p.call(slot.LocationPath0R1, cU, p.cI)
		case slot.LocationPath0R1: // LocationPath : RelativeLocationPath ∙

			if p.follow(symbols.NT_LocationPath) {
				p.rtn(symbols.NT_LocationPath, cU, p.cI)
			} else {
				p.parseError(slot.LocationPath0R0, p.cI, followSets[symbols.NT_LocationPath])
			}
		case slot.LocationPath1R0: // LocationPath : ∙AbsoluteLocationPath

			p.call(slot.LocationPath1R1, cU, p.cI)
		case slot.LocationPath1R1: // LocationPath : AbsoluteLocationPath ∙

			if p.follow(symbols.NT_LocationPath) {
				p.rtn(symbols.NT_LocationPath, cU, p.cI)
			} else {
				p.parseError(slot.LocationPath1R0, p.cI, followSets[symbols.NT_LocationPath])
			}
		case slot.MultiplicativeExpr0R0: // MultiplicativeExpr : ∙UnaryExpr

			p.call(slot.MultiplicativeExpr0R1, cU, p.cI)
		case slot.MultiplicativeExpr0R1: // MultiplicativeExpr : UnaryExpr ∙

			if p.follow(symbols.NT_MultiplicativeExpr) {
				p.rtn(symbols.NT_MultiplicativeExpr, cU, p.cI)
			} else {
				p.parseError(slot.MultiplicativeExpr0R0, p.cI, followSets[symbols.NT_MultiplicativeExpr])
			}
		case slot.MultiplicativeExpr1R0: // MultiplicativeExpr : ∙MultiplicativeExprMultiply

			p.call(slot.MultiplicativeExpr1R1, cU, p.cI)
		case slot.MultiplicativeExpr1R1: // MultiplicativeExpr : MultiplicativeExprMultiply ∙

			if p.follow(symbols.NT_MultiplicativeExpr) {
				p.rtn(symbols.NT_MultiplicativeExpr, cU, p.cI)
			} else {
				p.parseError(slot.MultiplicativeExpr1R0, p.cI, followSets[symbols.NT_MultiplicativeExpr])
			}
		case slot.MultiplicativeExpr2R0: // MultiplicativeExpr : ∙MultiplicativeExprDivide

			p.call(slot.MultiplicativeExpr2R1, cU, p.cI)
		case slot.MultiplicativeExpr2R1: // MultiplicativeExpr : MultiplicativeExprDivide ∙

			if p.follow(symbols.NT_MultiplicativeExpr) {
				p.rtn(symbols.NT_MultiplicativeExpr, cU, p.cI)
			} else {
				p.parseError(slot.MultiplicativeExpr2R0, p.cI, followSets[symbols.NT_MultiplicativeExpr])
			}
		case slot.MultiplicativeExpr3R0: // MultiplicativeExpr : ∙MultiplicativeExprMod

			p.call(slot.MultiplicativeExpr3R1, cU, p.cI)
		case slot.MultiplicativeExpr3R1: // MultiplicativeExpr : MultiplicativeExprMod ∙

			if p.follow(symbols.NT_MultiplicativeExpr) {
				p.rtn(symbols.NT_MultiplicativeExpr, cU, p.cI)
			} else {
				p.parseError(slot.MultiplicativeExpr3R0, p.cI, followSets[symbols.NT_MultiplicativeExpr])
			}
		case slot.MultiplicativeExprDivide0R0: // MultiplicativeExprDivide : ∙MultiplicativeExpr div UnaryExpr

			p.call(slot.MultiplicativeExprDivide0R1, cU, p.cI)
		case slot.MultiplicativeExprDivide0R1: // MultiplicativeExprDivide : MultiplicativeExpr ∙div UnaryExpr

			if !p.testSelect(slot.MultiplicativeExprDivide0R1) {
				p.parseError(slot.MultiplicativeExprDivide0R1, p.cI, first[slot.MultiplicativeExprDivide0R1])
				break
			}

			p.bsrSet.Add(slot.MultiplicativeExprDivide0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MultiplicativeExprDivide0R2) {
				p.parseError(slot.MultiplicativeExprDivide0R2, p.cI, first[slot.MultiplicativeExprDivide0R2])
				break
			}

			p.call(slot.MultiplicativeExprDivide0R3, cU, p.cI)
		case slot.MultiplicativeExprDivide0R3: // MultiplicativeExprDivide : MultiplicativeExpr div UnaryExpr ∙

			if p.follow(symbols.NT_MultiplicativeExprDivide) {
				p.rtn(symbols.NT_MultiplicativeExprDivide, cU, p.cI)
			} else {
				p.parseError(slot.MultiplicativeExprDivide0R0, p.cI, followSets[symbols.NT_MultiplicativeExprDivide])
			}
		case slot.MultiplicativeExprMod0R0: // MultiplicativeExprMod : ∙MultiplicativeExpr mod UnaryExpr

			p.call(slot.MultiplicativeExprMod0R1, cU, p.cI)
		case slot.MultiplicativeExprMod0R1: // MultiplicativeExprMod : MultiplicativeExpr ∙mod UnaryExpr

			if !p.testSelect(slot.MultiplicativeExprMod0R1) {
				p.parseError(slot.MultiplicativeExprMod0R1, p.cI, first[slot.MultiplicativeExprMod0R1])
				break
			}

			p.bsrSet.Add(slot.MultiplicativeExprMod0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MultiplicativeExprMod0R2) {
				p.parseError(slot.MultiplicativeExprMod0R2, p.cI, first[slot.MultiplicativeExprMod0R2])
				break
			}

			p.call(slot.MultiplicativeExprMod0R3, cU, p.cI)
		case slot.MultiplicativeExprMod0R3: // MultiplicativeExprMod : MultiplicativeExpr mod UnaryExpr ∙

			if p.follow(symbols.NT_MultiplicativeExprMod) {
				p.rtn(symbols.NT_MultiplicativeExprMod, cU, p.cI)
			} else {
				p.parseError(slot.MultiplicativeExprMod0R0, p.cI, followSets[symbols.NT_MultiplicativeExprMod])
			}
		case slot.MultiplicativeExprMultiply0R0: // MultiplicativeExprMultiply : ∙MultiplicativeExpr * UnaryExpr

			p.call(slot.MultiplicativeExprMultiply0R1, cU, p.cI)
		case slot.MultiplicativeExprMultiply0R1: // MultiplicativeExprMultiply : MultiplicativeExpr ∙* UnaryExpr

			if !p.testSelect(slot.MultiplicativeExprMultiply0R1) {
				p.parseError(slot.MultiplicativeExprMultiply0R1, p.cI, first[slot.MultiplicativeExprMultiply0R1])
				break
			}

			p.bsrSet.Add(slot.MultiplicativeExprMultiply0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MultiplicativeExprMultiply0R2) {
				p.parseError(slot.MultiplicativeExprMultiply0R2, p.cI, first[slot.MultiplicativeExprMultiply0R2])
				break
			}

			p.call(slot.MultiplicativeExprMultiply0R3, cU, p.cI)
		case slot.MultiplicativeExprMultiply0R3: // MultiplicativeExprMultiply : MultiplicativeExpr * UnaryExpr ∙

			if p.follow(symbols.NT_MultiplicativeExprMultiply) {
				p.rtn(symbols.NT_MultiplicativeExprMultiply, cU, p.cI)
			} else {
				p.parseError(slot.MultiplicativeExprMultiply0R0, p.cI, followSets[symbols.NT_MultiplicativeExprMultiply])
			}
		case slot.NameTestAnyElement0R0: // NameTestAnyElement : ∙*

			p.bsrSet.Add(slot.NameTestAnyElement0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NameTestAnyElement) {
				p.rtn(symbols.NT_NameTestAnyElement, cU, p.cI)
			} else {
				p.parseError(slot.NameTestAnyElement0R0, p.cI, followSets[symbols.NT_NameTestAnyElement])
			}
		case slot.NameTestLocalAnyNamespace0R0: // NameTestLocalAnyNamespace : ∙* : ncname

			p.bsrSet.Add(slot.NameTestLocalAnyNamespace0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestLocalAnyNamespace0R1) {
				p.parseError(slot.NameTestLocalAnyNamespace0R1, p.cI, first[slot.NameTestLocalAnyNamespace0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestLocalAnyNamespace0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestLocalAnyNamespace0R2) {
				p.parseError(slot.NameTestLocalAnyNamespace0R2, p.cI, first[slot.NameTestLocalAnyNamespace0R2])
				break
			}

			p.bsrSet.Add(slot.NameTestLocalAnyNamespace0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NameTestLocalAnyNamespace) {
				p.rtn(symbols.NT_NameTestLocalAnyNamespace, cU, p.cI)
			} else {
				p.parseError(slot.NameTestLocalAnyNamespace0R0, p.cI, followSets[symbols.NT_NameTestLocalAnyNamespace])
			}
		case slot.NameTestLocalAnyNamespaceReservedNameConflict0R0: // NameTestLocalAnyNamespaceReservedNameConflict : ∙* : ReservedNameConflictResolver

			p.bsrSet.Add(slot.NameTestLocalAnyNamespaceReservedNameConflict0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestLocalAnyNamespaceReservedNameConflict0R1) {
				p.parseError(slot.NameTestLocalAnyNamespaceReservedNameConflict0R1, p.cI, first[slot.NameTestLocalAnyNamespaceReservedNameConflict0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestLocalAnyNamespaceReservedNameConflict0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestLocalAnyNamespaceReservedNameConflict0R2) {
				p.parseError(slot.NameTestLocalAnyNamespaceReservedNameConflict0R2, p.cI, first[slot.NameTestLocalAnyNamespaceReservedNameConflict0R2])
				break
			}

			p.call(slot.NameTestLocalAnyNamespaceReservedNameConflict0R3, cU, p.cI)
		case slot.NameTestLocalAnyNamespaceReservedNameConflict0R3: // NameTestLocalAnyNamespaceReservedNameConflict : * : ReservedNameConflictResolver ∙

			if p.follow(symbols.NT_NameTestLocalAnyNamespaceReservedNameConflict) {
				p.rtn(symbols.NT_NameTestLocalAnyNamespaceReservedNameConflict, cU, p.cI)
			} else {
				p.parseError(slot.NameTestLocalAnyNamespaceReservedNameConflict0R0, p.cI, followSets[symbols.NT_NameTestLocalAnyNamespaceReservedNameConflict])
			}
		case slot.NameTestNamespaceAnyLocal0R0: // NameTestNamespaceAnyLocal : ∙ncname : *

			p.bsrSet.Add(slot.NameTestNamespaceAnyLocal0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestNamespaceAnyLocal0R1) {
				p.parseError(slot.NameTestNamespaceAnyLocal0R1, p.cI, first[slot.NameTestNamespaceAnyLocal0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestNamespaceAnyLocal0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestNamespaceAnyLocal0R2) {
				p.parseError(slot.NameTestNamespaceAnyLocal0R2, p.cI, first[slot.NameTestNamespaceAnyLocal0R2])
				break
			}

			p.bsrSet.Add(slot.NameTestNamespaceAnyLocal0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NameTestNamespaceAnyLocal) {
				p.rtn(symbols.NT_NameTestNamespaceAnyLocal, cU, p.cI)
			} else {
				p.parseError(slot.NameTestNamespaceAnyLocal0R0, p.cI, followSets[symbols.NT_NameTestNamespaceAnyLocal])
			}
		case slot.NameTestNamespaceAnyLocalReservedNameConflict0R0: // NameTestNamespaceAnyLocalReservedNameConflict : ∙ReservedNameConflictResolver : *

			p.call(slot.NameTestNamespaceAnyLocalReservedNameConflict0R1, cU, p.cI)
		case slot.NameTestNamespaceAnyLocalReservedNameConflict0R1: // NameTestNamespaceAnyLocalReservedNameConflict : ReservedNameConflictResolver ∙: *

			if !p.testSelect(slot.NameTestNamespaceAnyLocalReservedNameConflict0R1) {
				p.parseError(slot.NameTestNamespaceAnyLocalReservedNameConflict0R1, p.cI, first[slot.NameTestNamespaceAnyLocalReservedNameConflict0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestNamespaceAnyLocalReservedNameConflict0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestNamespaceAnyLocalReservedNameConflict0R2) {
				p.parseError(slot.NameTestNamespaceAnyLocalReservedNameConflict0R2, p.cI, first[slot.NameTestNamespaceAnyLocalReservedNameConflict0R2])
				break
			}

			p.bsrSet.Add(slot.NameTestNamespaceAnyLocalReservedNameConflict0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NameTestNamespaceAnyLocalReservedNameConflict) {
				p.rtn(symbols.NT_NameTestNamespaceAnyLocalReservedNameConflict, cU, p.cI)
			} else {
				p.parseError(slot.NameTestNamespaceAnyLocalReservedNameConflict0R0, p.cI, followSets[symbols.NT_NameTestNamespaceAnyLocalReservedNameConflict])
			}
		case slot.NameTestQNameLocalOnly0R0: // NameTestQNameLocalOnly : ∙ncname

			p.bsrSet.Add(slot.NameTestQNameLocalOnly0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NameTestQNameLocalOnly) {
				p.rtn(symbols.NT_NameTestQNameLocalOnly, cU, p.cI)
			} else {
				p.parseError(slot.NameTestQNameLocalOnly0R0, p.cI, followSets[symbols.NT_NameTestQNameLocalOnly])
			}
		case slot.NameTestQNameLocalOnlyReservedNameConflict0R0: // NameTestQNameLocalOnlyReservedNameConflict : ∙ReservedNameConflictResolver

			p.call(slot.NameTestQNameLocalOnlyReservedNameConflict0R1, cU, p.cI)
		case slot.NameTestQNameLocalOnlyReservedNameConflict0R1: // NameTestQNameLocalOnlyReservedNameConflict : ReservedNameConflictResolver ∙

			if p.follow(symbols.NT_NameTestQNameLocalOnlyReservedNameConflict) {
				p.rtn(symbols.NT_NameTestQNameLocalOnlyReservedNameConflict, cU, p.cI)
			} else {
				p.parseError(slot.NameTestQNameLocalOnlyReservedNameConflict0R0, p.cI, followSets[symbols.NT_NameTestQNameLocalOnlyReservedNameConflict])
			}
		case slot.NameTestQNameNamespaceWithLocal0R0: // NameTestQNameNamespaceWithLocal : ∙ncname : ncname

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocal0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestQNameNamespaceWithLocal0R1) {
				p.parseError(slot.NameTestQNameNamespaceWithLocal0R1, p.cI, first[slot.NameTestQNameNamespaceWithLocal0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocal0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestQNameNamespaceWithLocal0R2) {
				p.parseError(slot.NameTestQNameNamespaceWithLocal0R2, p.cI, first[slot.NameTestQNameNamespaceWithLocal0R2])
				break
			}

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocal0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NameTestQNameNamespaceWithLocal) {
				p.rtn(symbols.NT_NameTestQNameNamespaceWithLocal, cU, p.cI)
			} else {
				p.parseError(slot.NameTestQNameNamespaceWithLocal0R0, p.cI, followSets[symbols.NT_NameTestQNameNamespaceWithLocal])
			}
		case slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R0: // NameTestQNameNamespaceWithLocalReservedNameConflictBoth : ∙ReservedNameConflictResolver : ReservedNameConflictResolver

			p.call(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R1, cU, p.cI)
		case slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R1: // NameTestQNameNamespaceWithLocalReservedNameConflictBoth : ReservedNameConflictResolver ∙: ReservedNameConflictResolver

			if !p.testSelect(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R1) {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R1, p.cI, first[slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R2) {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R2, p.cI, first[slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R2])
				break
			}

			p.call(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R3, cU, p.cI)
		case slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R3: // NameTestQNameNamespaceWithLocalReservedNameConflictBoth : ReservedNameConflictResolver : ReservedNameConflictResolver ∙

			if p.follow(symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictBoth) {
				p.rtn(symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictBoth, cU, p.cI)
			} else {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictBoth0R0, p.cI, followSets[symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictBoth])
			}
		case slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R0: // NameTestQNameNamespaceWithLocalReservedNameConflictLocal : ∙ncname : ReservedNameConflictResolver

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R1) {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R1, p.cI, first[slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R2) {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R2, p.cI, first[slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R2])
				break
			}

			p.call(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R3, cU, p.cI)
		case slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R3: // NameTestQNameNamespaceWithLocalReservedNameConflictLocal : ncname : ReservedNameConflictResolver ∙

			if p.follow(symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictLocal) {
				p.rtn(symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictLocal, cU, p.cI)
			} else {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictLocal0R0, p.cI, followSets[symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictLocal])
			}
		case slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R0: // NameTestQNameNamespaceWithLocalReservedNameConflictNamespace : ∙ReservedNameConflictResolver : ncname

			p.call(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R1, cU, p.cI)
		case slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R1: // NameTestQNameNamespaceWithLocalReservedNameConflictNamespace : ReservedNameConflictResolver ∙: ncname

			if !p.testSelect(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R1) {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R1, p.cI, first[slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R1])
				break
			}

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R2) {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R2, p.cI, first[slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R2])
				break
			}

			p.bsrSet.Add(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictNamespace) {
				p.rtn(symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictNamespace, cU, p.cI)
			} else {
				p.parseError(slot.NameTestQNameNamespaceWithLocalReservedNameConflictNamespace0R0, p.cI, followSets[symbols.NT_NameTestQNameNamespaceWithLocalReservedNameConflictNamespace])
			}
		case slot.NodeTest0R0: // NodeTest : ∙NodeTestNodeTypeNoArgTest

			p.call(slot.NodeTest0R1, cU, p.cI)
		case slot.NodeTest0R1: // NodeTest : NodeTestNodeTypeNoArgTest ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest0R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest1R0: // NodeTest : ∙NodeTestProcInstTargetTest

			p.call(slot.NodeTest1R1, cU, p.cI)
		case slot.NodeTest1R1: // NodeTest : NodeTestProcInstTargetTest ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest1R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest2R0: // NodeTest : ∙NameTestAnyElement

			p.call(slot.NodeTest2R1, cU, p.cI)
		case slot.NodeTest2R1: // NodeTest : NameTestAnyElement ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest2R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest3R0: // NodeTest : ∙NameTestNamespaceAnyLocal

			p.call(slot.NodeTest3R1, cU, p.cI)
		case slot.NodeTest3R1: // NodeTest : NameTestNamespaceAnyLocal ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest3R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest4R0: // NodeTest : ∙NameTestNamespaceAnyLocalReservedNameConflict

			p.call(slot.NodeTest4R1, cU, p.cI)
		case slot.NodeTest4R1: // NodeTest : NameTestNamespaceAnyLocalReservedNameConflict ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest4R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest5R0: // NodeTest : ∙NameTestLocalAnyNamespace

			p.call(slot.NodeTest5R1, cU, p.cI)
		case slot.NodeTest5R1: // NodeTest : NameTestLocalAnyNamespace ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest5R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest6R0: // NodeTest : ∙NameTestLocalAnyNamespaceReservedNameConflict

			p.call(slot.NodeTest6R1, cU, p.cI)
		case slot.NodeTest6R1: // NodeTest : NameTestLocalAnyNamespaceReservedNameConflict ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest6R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest7R0: // NodeTest : ∙NameTestQNameNamespaceWithLocal

			p.call(slot.NodeTest7R1, cU, p.cI)
		case slot.NodeTest7R1: // NodeTest : NameTestQNameNamespaceWithLocal ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest7R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest8R0: // NodeTest : ∙NameTestQNameNamespaceWithLocalReservedNameConflictNamespace

			p.call(slot.NodeTest8R1, cU, p.cI)
		case slot.NodeTest8R1: // NodeTest : NameTestQNameNamespaceWithLocalReservedNameConflictNamespace ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest8R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest9R0: // NodeTest : ∙NameTestQNameNamespaceWithLocalReservedNameConflictLocal

			p.call(slot.NodeTest9R1, cU, p.cI)
		case slot.NodeTest9R1: // NodeTest : NameTestQNameNamespaceWithLocalReservedNameConflictLocal ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest9R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest10R0: // NodeTest : ∙NameTestQNameNamespaceWithLocalReservedNameConflictBoth

			p.call(slot.NodeTest10R1, cU, p.cI)
		case slot.NodeTest10R1: // NodeTest : NameTestQNameNamespaceWithLocalReservedNameConflictBoth ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest10R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest11R0: // NodeTest : ∙NameTestQNameLocalOnly

			p.call(slot.NodeTest11R1, cU, p.cI)
		case slot.NodeTest11R1: // NodeTest : NameTestQNameLocalOnly ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest11R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTest12R0: // NodeTest : ∙NameTestQNameLocalOnlyReservedNameConflict

			p.call(slot.NodeTest12R1, cU, p.cI)
		case slot.NodeTest12R1: // NodeTest : NameTestQNameLocalOnlyReservedNameConflict ∙

			if p.follow(symbols.NT_NodeTest) {
				p.rtn(symbols.NT_NodeTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTest12R0, p.cI, followSets[symbols.NT_NodeTest])
			}
		case slot.NodeTestAndPredicate0R0: // NodeTestAndPredicate : ∙NodeTest StepWithPredicate

			p.call(slot.NodeTestAndPredicate0R1, cU, p.cI)
		case slot.NodeTestAndPredicate0R1: // NodeTestAndPredicate : NodeTest ∙StepWithPredicate

			if !p.testSelect(slot.NodeTestAndPredicate0R1) {
				p.parseError(slot.NodeTestAndPredicate0R1, p.cI, first[slot.NodeTestAndPredicate0R1])
				break
			}

			p.call(slot.NodeTestAndPredicate0R2, cU, p.cI)
		case slot.NodeTestAndPredicate0R2: // NodeTestAndPredicate : NodeTest StepWithPredicate ∙

			if p.follow(symbols.NT_NodeTestAndPredicate) {
				p.rtn(symbols.NT_NodeTestAndPredicate, cU, p.cI)
			} else {
				p.parseError(slot.NodeTestAndPredicate0R0, p.cI, followSets[symbols.NT_NodeTestAndPredicate])
			}
		case slot.NodeTestNodeTypeNoArgTest0R0: // NodeTestNodeTypeNoArgTest : ∙NodeType ( )

			p.call(slot.NodeTestNodeTypeNoArgTest0R1, cU, p.cI)
		case slot.NodeTestNodeTypeNoArgTest0R1: // NodeTestNodeTypeNoArgTest : NodeType ∙( )

			if !p.testSelect(slot.NodeTestNodeTypeNoArgTest0R1) {
				p.parseError(slot.NodeTestNodeTypeNoArgTest0R1, p.cI, first[slot.NodeTestNodeTypeNoArgTest0R1])
				break
			}

			p.bsrSet.Add(slot.NodeTestNodeTypeNoArgTest0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NodeTestNodeTypeNoArgTest0R2) {
				p.parseError(slot.NodeTestNodeTypeNoArgTest0R2, p.cI, first[slot.NodeTestNodeTypeNoArgTest0R2])
				break
			}

			p.bsrSet.Add(slot.NodeTestNodeTypeNoArgTest0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NodeTestNodeTypeNoArgTest) {
				p.rtn(symbols.NT_NodeTestNodeTypeNoArgTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTestNodeTypeNoArgTest0R0, p.cI, followSets[symbols.NT_NodeTestNodeTypeNoArgTest])
			}
		case slot.NodeTestProcInstTargetTest0R0: // NodeTestProcInstTargetTest : ∙processing-instruction ( Literal )

			p.bsrSet.Add(slot.NodeTestProcInstTargetTest0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NodeTestProcInstTargetTest0R1) {
				p.parseError(slot.NodeTestProcInstTargetTest0R1, p.cI, first[slot.NodeTestProcInstTargetTest0R1])
				break
			}

			p.bsrSet.Add(slot.NodeTestProcInstTargetTest0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NodeTestProcInstTargetTest0R2) {
				p.parseError(slot.NodeTestProcInstTargetTest0R2, p.cI, first[slot.NodeTestProcInstTargetTest0R2])
				break
			}

			p.call(slot.NodeTestProcInstTargetTest0R3, cU, p.cI)
		case slot.NodeTestProcInstTargetTest0R3: // NodeTestProcInstTargetTest : processing-instruction ( Literal ∙)

			if !p.testSelect(slot.NodeTestProcInstTargetTest0R3) {
				p.parseError(slot.NodeTestProcInstTargetTest0R3, p.cI, first[slot.NodeTestProcInstTargetTest0R3])
				break
			}

			p.bsrSet.Add(slot.NodeTestProcInstTargetTest0R4, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NodeTestProcInstTargetTest) {
				p.rtn(symbols.NT_NodeTestProcInstTargetTest, cU, p.cI)
			} else {
				p.parseError(slot.NodeTestProcInstTargetTest0R0, p.cI, followSets[symbols.NT_NodeTestProcInstTargetTest])
			}
		case slot.NodeType0R0: // NodeType : ∙comment

			p.bsrSet.Add(slot.NodeType0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NodeType) {
				p.rtn(symbols.NT_NodeType, cU, p.cI)
			} else {
				p.parseError(slot.NodeType0R0, p.cI, followSets[symbols.NT_NodeType])
			}
		case slot.NodeType1R0: // NodeType : ∙text

			p.bsrSet.Add(slot.NodeType1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NodeType) {
				p.rtn(symbols.NT_NodeType, cU, p.cI)
			} else {
				p.parseError(slot.NodeType1R0, p.cI, followSets[symbols.NT_NodeType])
			}
		case slot.NodeType2R0: // NodeType : ∙processing-instruction

			p.bsrSet.Add(slot.NodeType2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NodeType) {
				p.rtn(symbols.NT_NodeType, cU, p.cI)
			} else {
				p.parseError(slot.NodeType2R0, p.cI, followSets[symbols.NT_NodeType])
			}
		case slot.NodeType3R0: // NodeType : ∙node

			p.bsrSet.Add(slot.NodeType3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NodeType) {
				p.rtn(symbols.NT_NodeType, cU, p.cI)
			} else {
				p.parseError(slot.NodeType3R0, p.cI, followSets[symbols.NT_NodeType])
			}
		case slot.Number0R0: // Number : ∙digits

			p.bsrSet.Add(slot.Number0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Number) {
				p.rtn(symbols.NT_Number, cU, p.cI)
			} else {
				p.parseError(slot.Number0R0, p.cI, followSets[symbols.NT_Number])
			}
		case slot.Number1R0: // Number : ∙. digits

			p.bsrSet.Add(slot.Number1R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Number1R1) {
				p.parseError(slot.Number1R1, p.cI, first[slot.Number1R1])
				break
			}

			p.bsrSet.Add(slot.Number1R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Number) {
				p.rtn(symbols.NT_Number, cU, p.cI)
			} else {
				p.parseError(slot.Number1R0, p.cI, followSets[symbols.NT_Number])
			}
		case slot.Number2R0: // Number : ∙digits . digits

			p.bsrSet.Add(slot.Number2R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Number2R1) {
				p.parseError(slot.Number2R1, p.cI, first[slot.Number2R1])
				break
			}

			p.bsrSet.Add(slot.Number2R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Number2R2) {
				p.parseError(slot.Number2R2, p.cI, first[slot.Number2R2])
				break
			}

			p.bsrSet.Add(slot.Number2R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Number) {
				p.rtn(symbols.NT_Number, cU, p.cI)
			} else {
				p.parseError(slot.Number2R0, p.cI, followSets[symbols.NT_Number])
			}
		case slot.OrExpr0R0: // OrExpr : ∙AndExpr

			p.call(slot.OrExpr0R1, cU, p.cI)
		case slot.OrExpr0R1: // OrExpr : AndExpr ∙

			if p.follow(symbols.NT_OrExpr) {
				p.rtn(symbols.NT_OrExpr, cU, p.cI)
			} else {
				p.parseError(slot.OrExpr0R0, p.cI, followSets[symbols.NT_OrExpr])
			}
		case slot.OrExpr1R0: // OrExpr : ∙OrExprOr

			p.call(slot.OrExpr1R1, cU, p.cI)
		case slot.OrExpr1R1: // OrExpr : OrExprOr ∙

			if p.follow(symbols.NT_OrExpr) {
				p.rtn(symbols.NT_OrExpr, cU, p.cI)
			} else {
				p.parseError(slot.OrExpr1R0, p.cI, followSets[symbols.NT_OrExpr])
			}
		case slot.OrExprOr0R0: // OrExprOr : ∙OrExpr or AndExpr

			p.call(slot.OrExprOr0R1, cU, p.cI)
		case slot.OrExprOr0R1: // OrExprOr : OrExpr ∙or AndExpr

			if !p.testSelect(slot.OrExprOr0R1) {
				p.parseError(slot.OrExprOr0R1, p.cI, first[slot.OrExprOr0R1])
				break
			}

			p.bsrSet.Add(slot.OrExprOr0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.OrExprOr0R2) {
				p.parseError(slot.OrExprOr0R2, p.cI, first[slot.OrExprOr0R2])
				break
			}

			p.call(slot.OrExprOr0R3, cU, p.cI)
		case slot.OrExprOr0R3: // OrExprOr : OrExpr or AndExpr ∙

			if p.follow(symbols.NT_OrExprOr) {
				p.rtn(symbols.NT_OrExprOr, cU, p.cI)
			} else {
				p.parseError(slot.OrExprOr0R0, p.cI, followSets[symbols.NT_OrExprOr])
			}
		case slot.PathExpr0R0: // PathExpr : ∙LocationPath

			p.call(slot.PathExpr0R1, cU, p.cI)
		case slot.PathExpr0R1: // PathExpr : LocationPath ∙

			if p.follow(symbols.NT_PathExpr) {
				p.rtn(symbols.NT_PathExpr, cU, p.cI)
			} else {
				p.parseError(slot.PathExpr0R0, p.cI, followSets[symbols.NT_PathExpr])
			}
		case slot.PathExpr1R0: // PathExpr : ∙FilterExpr

			p.call(slot.PathExpr1R1, cU, p.cI)
		case slot.PathExpr1R1: // PathExpr : FilterExpr ∙

			if p.follow(symbols.NT_PathExpr) {
				p.rtn(symbols.NT_PathExpr, cU, p.cI)
			} else {
				p.parseError(slot.PathExpr1R0, p.cI, followSets[symbols.NT_PathExpr])
			}
		case slot.PathExpr2R0: // PathExpr : ∙PathExprFilterWithPath

			p.call(slot.PathExpr2R1, cU, p.cI)
		case slot.PathExpr2R1: // PathExpr : PathExprFilterWithPath ∙

			if p.follow(symbols.NT_PathExpr) {
				p.rtn(symbols.NT_PathExpr, cU, p.cI)
			} else {
				p.parseError(slot.PathExpr2R0, p.cI, followSets[symbols.NT_PathExpr])
			}
		case slot.PathExpr3R0: // PathExpr : ∙PathExprFilterWithAbbreviatedPath

			p.call(slot.PathExpr3R1, cU, p.cI)
		case slot.PathExpr3R1: // PathExpr : PathExprFilterWithAbbreviatedPath ∙

			if p.follow(symbols.NT_PathExpr) {
				p.rtn(symbols.NT_PathExpr, cU, p.cI)
			} else {
				p.parseError(slot.PathExpr3R0, p.cI, followSets[symbols.NT_PathExpr])
			}
		case slot.PathExprFilterWithAbbreviatedPath0R0: // PathExprFilterWithAbbreviatedPath : ∙FilterExpr // RelativeLocationPath

			p.call(slot.PathExprFilterWithAbbreviatedPath0R1, cU, p.cI)
		case slot.PathExprFilterWithAbbreviatedPath0R1: // PathExprFilterWithAbbreviatedPath : FilterExpr ∙// RelativeLocationPath

			if !p.testSelect(slot.PathExprFilterWithAbbreviatedPath0R1) {
				p.parseError(slot.PathExprFilterWithAbbreviatedPath0R1, p.cI, first[slot.PathExprFilterWithAbbreviatedPath0R1])
				break
			}

			p.bsrSet.Add(slot.PathExprFilterWithAbbreviatedPath0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.PathExprFilterWithAbbreviatedPath0R2) {
				p.parseError(slot.PathExprFilterWithAbbreviatedPath0R2, p.cI, first[slot.PathExprFilterWithAbbreviatedPath0R2])
				break
			}

			p.call(slot.PathExprFilterWithAbbreviatedPath0R3, cU, p.cI)
		case slot.PathExprFilterWithAbbreviatedPath0R3: // PathExprFilterWithAbbreviatedPath : FilterExpr // RelativeLocationPath ∙

			if p.follow(symbols.NT_PathExprFilterWithAbbreviatedPath) {
				p.rtn(symbols.NT_PathExprFilterWithAbbreviatedPath, cU, p.cI)
			} else {
				p.parseError(slot.PathExprFilterWithAbbreviatedPath0R0, p.cI, followSets[symbols.NT_PathExprFilterWithAbbreviatedPath])
			}
		case slot.PathExprFilterWithPath0R0: // PathExprFilterWithPath : ∙FilterExpr / RelativeLocationPath

			p.call(slot.PathExprFilterWithPath0R1, cU, p.cI)
		case slot.PathExprFilterWithPath0R1: // PathExprFilterWithPath : FilterExpr ∙/ RelativeLocationPath

			if !p.testSelect(slot.PathExprFilterWithPath0R1) {
				p.parseError(slot.PathExprFilterWithPath0R1, p.cI, first[slot.PathExprFilterWithPath0R1])
				break
			}

			p.bsrSet.Add(slot.PathExprFilterWithPath0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.PathExprFilterWithPath0R2) {
				p.parseError(slot.PathExprFilterWithPath0R2, p.cI, first[slot.PathExprFilterWithPath0R2])
				break
			}

			p.call(slot.PathExprFilterWithPath0R3, cU, p.cI)
		case slot.PathExprFilterWithPath0R3: // PathExprFilterWithPath : FilterExpr / RelativeLocationPath ∙

			if p.follow(symbols.NT_PathExprFilterWithPath) {
				p.rtn(symbols.NT_PathExprFilterWithPath, cU, p.cI)
			} else {
				p.parseError(slot.PathExprFilterWithPath0R0, p.cI, followSets[symbols.NT_PathExprFilterWithPath])
			}
		case slot.Predicate0R0: // Predicate : ∙[ OrExpr ]

			p.bsrSet.Add(slot.Predicate0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Predicate0R1) {
				p.parseError(slot.Predicate0R1, p.cI, first[slot.Predicate0R1])
				break
			}

			p.call(slot.Predicate0R2, cU, p.cI)
		case slot.Predicate0R2: // Predicate : [ OrExpr ∙]

			if !p.testSelect(slot.Predicate0R2) {
				p.parseError(slot.Predicate0R2, p.cI, first[slot.Predicate0R2])
				break
			}

			p.bsrSet.Add(slot.Predicate0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Predicate) {
				p.rtn(symbols.NT_Predicate, cU, p.cI)
			} else {
				p.parseError(slot.Predicate0R0, p.cI, followSets[symbols.NT_Predicate])
			}
		case slot.PrimaryExpr0R0: // PrimaryExpr : ∙PrimaryExprParenthetic

			p.call(slot.PrimaryExpr0R1, cU, p.cI)
		case slot.PrimaryExpr0R1: // PrimaryExpr : PrimaryExprParenthetic ∙

			if p.follow(symbols.NT_PrimaryExpr) {
				p.rtn(symbols.NT_PrimaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.PrimaryExpr0R0, p.cI, followSets[symbols.NT_PrimaryExpr])
			}
		case slot.PrimaryExpr1R0: // PrimaryExpr : ∙Literal

			p.call(slot.PrimaryExpr1R1, cU, p.cI)
		case slot.PrimaryExpr1R1: // PrimaryExpr : Literal ∙

			if p.follow(symbols.NT_PrimaryExpr) {
				p.rtn(symbols.NT_PrimaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.PrimaryExpr1R0, p.cI, followSets[symbols.NT_PrimaryExpr])
			}
		case slot.PrimaryExpr2R0: // PrimaryExpr : ∙Number

			p.call(slot.PrimaryExpr2R1, cU, p.cI)
		case slot.PrimaryExpr2R1: // PrimaryExpr : Number ∙

			if p.follow(symbols.NT_PrimaryExpr) {
				p.rtn(symbols.NT_PrimaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.PrimaryExpr2R0, p.cI, followSets[symbols.NT_PrimaryExpr])
			}
		case slot.PrimaryExpr3R0: // PrimaryExpr : ∙VariableReference

			p.call(slot.PrimaryExpr3R1, cU, p.cI)
		case slot.PrimaryExpr3R1: // PrimaryExpr : VariableReference ∙

			if p.follow(symbols.NT_PrimaryExpr) {
				p.rtn(symbols.NT_PrimaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.PrimaryExpr3R0, p.cI, followSets[symbols.NT_PrimaryExpr])
			}
		case slot.PrimaryExpr4R0: // PrimaryExpr : ∙FunctionCall

			p.call(slot.PrimaryExpr4R1, cU, p.cI)
		case slot.PrimaryExpr4R1: // PrimaryExpr : FunctionCall ∙

			if p.follow(symbols.NT_PrimaryExpr) {
				p.rtn(symbols.NT_PrimaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.PrimaryExpr4R0, p.cI, followSets[symbols.NT_PrimaryExpr])
			}
		case slot.PrimaryExprParenthetic0R0: // PrimaryExprParenthetic : ∙( OrExpr )

			p.bsrSet.Add(slot.PrimaryExprParenthetic0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.PrimaryExprParenthetic0R1) {
				p.parseError(slot.PrimaryExprParenthetic0R1, p.cI, first[slot.PrimaryExprParenthetic0R1])
				break
			}

			p.call(slot.PrimaryExprParenthetic0R2, cU, p.cI)
		case slot.PrimaryExprParenthetic0R2: // PrimaryExprParenthetic : ( OrExpr ∙)

			if !p.testSelect(slot.PrimaryExprParenthetic0R2) {
				p.parseError(slot.PrimaryExprParenthetic0R2, p.cI, first[slot.PrimaryExprParenthetic0R2])
				break
			}

			p.bsrSet.Add(slot.PrimaryExprParenthetic0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_PrimaryExprParenthetic) {
				p.rtn(symbols.NT_PrimaryExprParenthetic, cU, p.cI)
			} else {
				p.parseError(slot.PrimaryExprParenthetic0R0, p.cI, followSets[symbols.NT_PrimaryExprParenthetic])
			}
		case slot.QName0R0: // QName : ∙QNameLocalOnly

			p.call(slot.QName0R1, cU, p.cI)
		case slot.QName0R1: // QName : QNameLocalOnly ∙

			if p.follow(symbols.NT_QName) {
				p.rtn(symbols.NT_QName, cU, p.cI)
			} else {
				p.parseError(slot.QName0R0, p.cI, followSets[symbols.NT_QName])
			}
		case slot.QName1R0: // QName : ∙QNameNamespaceWithLocal

			p.call(slot.QName1R1, cU, p.cI)
		case slot.QName1R1: // QName : QNameNamespaceWithLocal ∙

			if p.follow(symbols.NT_QName) {
				p.rtn(symbols.NT_QName, cU, p.cI)
			} else {
				p.parseError(slot.QName1R0, p.cI, followSets[symbols.NT_QName])
			}
		case slot.QNameLocalOnly0R0: // QNameLocalOnly : ∙ncname

			p.bsrSet.Add(slot.QNameLocalOnly0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_QNameLocalOnly) {
				p.rtn(symbols.NT_QNameLocalOnly, cU, p.cI)
			} else {
				p.parseError(slot.QNameLocalOnly0R0, p.cI, followSets[symbols.NT_QNameLocalOnly])
			}
		case slot.QNameNamespaceWithLocal0R0: // QNameNamespaceWithLocal : ∙ncname : ncname

			p.bsrSet.Add(slot.QNameNamespaceWithLocal0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.QNameNamespaceWithLocal0R1) {
				p.parseError(slot.QNameNamespaceWithLocal0R1, p.cI, first[slot.QNameNamespaceWithLocal0R1])
				break
			}

			p.bsrSet.Add(slot.QNameNamespaceWithLocal0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.QNameNamespaceWithLocal0R2) {
				p.parseError(slot.QNameNamespaceWithLocal0R2, p.cI, first[slot.QNameNamespaceWithLocal0R2])
				break
			}

			p.bsrSet.Add(slot.QNameNamespaceWithLocal0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_QNameNamespaceWithLocal) {
				p.rtn(symbols.NT_QNameNamespaceWithLocal, cU, p.cI)
			} else {
				p.parseError(slot.QNameNamespaceWithLocal0R0, p.cI, followSets[symbols.NT_QNameNamespaceWithLocal])
			}
		case slot.RelationalExpr0R0: // RelationalExpr : ∙AdditiveExpr

			p.call(slot.RelationalExpr0R1, cU, p.cI)
		case slot.RelationalExpr0R1: // RelationalExpr : AdditiveExpr ∙

			if p.follow(symbols.NT_RelationalExpr) {
				p.rtn(symbols.NT_RelationalExpr, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExpr0R0, p.cI, followSets[symbols.NT_RelationalExpr])
			}
		case slot.RelationalExpr1R0: // RelationalExpr : ∙RelationalExprLessThan

			p.call(slot.RelationalExpr1R1, cU, p.cI)
		case slot.RelationalExpr1R1: // RelationalExpr : RelationalExprLessThan ∙

			if p.follow(symbols.NT_RelationalExpr) {
				p.rtn(symbols.NT_RelationalExpr, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExpr1R0, p.cI, followSets[symbols.NT_RelationalExpr])
			}
		case slot.RelationalExpr2R0: // RelationalExpr : ∙RelationalExprGreaterThan

			p.call(slot.RelationalExpr2R1, cU, p.cI)
		case slot.RelationalExpr2R1: // RelationalExpr : RelationalExprGreaterThan ∙

			if p.follow(symbols.NT_RelationalExpr) {
				p.rtn(symbols.NT_RelationalExpr, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExpr2R0, p.cI, followSets[symbols.NT_RelationalExpr])
			}
		case slot.RelationalExpr3R0: // RelationalExpr : ∙RelationalExprLessThanOrEqual

			p.call(slot.RelationalExpr3R1, cU, p.cI)
		case slot.RelationalExpr3R1: // RelationalExpr : RelationalExprLessThanOrEqual ∙

			if p.follow(symbols.NT_RelationalExpr) {
				p.rtn(symbols.NT_RelationalExpr, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExpr3R0, p.cI, followSets[symbols.NT_RelationalExpr])
			}
		case slot.RelationalExpr4R0: // RelationalExpr : ∙RelationalExprGreaterThanOrEqual

			p.call(slot.RelationalExpr4R1, cU, p.cI)
		case slot.RelationalExpr4R1: // RelationalExpr : RelationalExprGreaterThanOrEqual ∙

			if p.follow(symbols.NT_RelationalExpr) {
				p.rtn(symbols.NT_RelationalExpr, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExpr4R0, p.cI, followSets[symbols.NT_RelationalExpr])
			}
		case slot.RelationalExprGreaterThan0R0: // RelationalExprGreaterThan : ∙RelationalExpr > AdditiveExpr

			p.call(slot.RelationalExprGreaterThan0R1, cU, p.cI)
		case slot.RelationalExprGreaterThan0R1: // RelationalExprGreaterThan : RelationalExpr ∙> AdditiveExpr

			if !p.testSelect(slot.RelationalExprGreaterThan0R1) {
				p.parseError(slot.RelationalExprGreaterThan0R1, p.cI, first[slot.RelationalExprGreaterThan0R1])
				break
			}

			p.bsrSet.Add(slot.RelationalExprGreaterThan0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RelationalExprGreaterThan0R2) {
				p.parseError(slot.RelationalExprGreaterThan0R2, p.cI, first[slot.RelationalExprGreaterThan0R2])
				break
			}

			p.call(slot.RelationalExprGreaterThan0R3, cU, p.cI)
		case slot.RelationalExprGreaterThan0R3: // RelationalExprGreaterThan : RelationalExpr > AdditiveExpr ∙

			if p.follow(symbols.NT_RelationalExprGreaterThan) {
				p.rtn(symbols.NT_RelationalExprGreaterThan, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExprGreaterThan0R0, p.cI, followSets[symbols.NT_RelationalExprGreaterThan])
			}
		case slot.RelationalExprGreaterThanOrEqual0R0: // RelationalExprGreaterThanOrEqual : ∙RelationalExpr >= AdditiveExpr

			p.call(slot.RelationalExprGreaterThanOrEqual0R1, cU, p.cI)
		case slot.RelationalExprGreaterThanOrEqual0R1: // RelationalExprGreaterThanOrEqual : RelationalExpr ∙>= AdditiveExpr

			if !p.testSelect(slot.RelationalExprGreaterThanOrEqual0R1) {
				p.parseError(slot.RelationalExprGreaterThanOrEqual0R1, p.cI, first[slot.RelationalExprGreaterThanOrEqual0R1])
				break
			}

			p.bsrSet.Add(slot.RelationalExprGreaterThanOrEqual0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RelationalExprGreaterThanOrEqual0R2) {
				p.parseError(slot.RelationalExprGreaterThanOrEqual0R2, p.cI, first[slot.RelationalExprGreaterThanOrEqual0R2])
				break
			}

			p.call(slot.RelationalExprGreaterThanOrEqual0R3, cU, p.cI)
		case slot.RelationalExprGreaterThanOrEqual0R3: // RelationalExprGreaterThanOrEqual : RelationalExpr >= AdditiveExpr ∙

			if p.follow(symbols.NT_RelationalExprGreaterThanOrEqual) {
				p.rtn(symbols.NT_RelationalExprGreaterThanOrEqual, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExprGreaterThanOrEqual0R0, p.cI, followSets[symbols.NT_RelationalExprGreaterThanOrEqual])
			}
		case slot.RelationalExprLessThan0R0: // RelationalExprLessThan : ∙RelationalExpr < AdditiveExpr

			p.call(slot.RelationalExprLessThan0R1, cU, p.cI)
		case slot.RelationalExprLessThan0R1: // RelationalExprLessThan : RelationalExpr ∙< AdditiveExpr

			if !p.testSelect(slot.RelationalExprLessThan0R1) {
				p.parseError(slot.RelationalExprLessThan0R1, p.cI, first[slot.RelationalExprLessThan0R1])
				break
			}

			p.bsrSet.Add(slot.RelationalExprLessThan0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RelationalExprLessThan0R2) {
				p.parseError(slot.RelationalExprLessThan0R2, p.cI, first[slot.RelationalExprLessThan0R2])
				break
			}

			p.call(slot.RelationalExprLessThan0R3, cU, p.cI)
		case slot.RelationalExprLessThan0R3: // RelationalExprLessThan : RelationalExpr < AdditiveExpr ∙

			if p.follow(symbols.NT_RelationalExprLessThan) {
				p.rtn(symbols.NT_RelationalExprLessThan, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExprLessThan0R0, p.cI, followSets[symbols.NT_RelationalExprLessThan])
			}
		case slot.RelationalExprLessThanOrEqual0R0: // RelationalExprLessThanOrEqual : ∙RelationalExpr <= AdditiveExpr

			p.call(slot.RelationalExprLessThanOrEqual0R1, cU, p.cI)
		case slot.RelationalExprLessThanOrEqual0R1: // RelationalExprLessThanOrEqual : RelationalExpr ∙<= AdditiveExpr

			if !p.testSelect(slot.RelationalExprLessThanOrEqual0R1) {
				p.parseError(slot.RelationalExprLessThanOrEqual0R1, p.cI, first[slot.RelationalExprLessThanOrEqual0R1])
				break
			}

			p.bsrSet.Add(slot.RelationalExprLessThanOrEqual0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RelationalExprLessThanOrEqual0R2) {
				p.parseError(slot.RelationalExprLessThanOrEqual0R2, p.cI, first[slot.RelationalExprLessThanOrEqual0R2])
				break
			}

			p.call(slot.RelationalExprLessThanOrEqual0R3, cU, p.cI)
		case slot.RelationalExprLessThanOrEqual0R3: // RelationalExprLessThanOrEqual : RelationalExpr <= AdditiveExpr ∙

			if p.follow(symbols.NT_RelationalExprLessThanOrEqual) {
				p.rtn(symbols.NT_RelationalExprLessThanOrEqual, cU, p.cI)
			} else {
				p.parseError(slot.RelationalExprLessThanOrEqual0R0, p.cI, followSets[symbols.NT_RelationalExprLessThanOrEqual])
			}
		case slot.RelativeLocationPath0R0: // RelativeLocationPath : ∙Step

			p.call(slot.RelativeLocationPath0R1, cU, p.cI)
		case slot.RelativeLocationPath0R1: // RelativeLocationPath : Step ∙

			if p.follow(symbols.NT_RelativeLocationPath) {
				p.rtn(symbols.NT_RelativeLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.RelativeLocationPath0R0, p.cI, followSets[symbols.NT_RelativeLocationPath])
			}
		case slot.RelativeLocationPath1R0: // RelativeLocationPath : ∙RelativeLocationPathWithStep

			p.call(slot.RelativeLocationPath1R1, cU, p.cI)
		case slot.RelativeLocationPath1R1: // RelativeLocationPath : RelativeLocationPathWithStep ∙

			if p.follow(symbols.NT_RelativeLocationPath) {
				p.rtn(symbols.NT_RelativeLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.RelativeLocationPath1R0, p.cI, followSets[symbols.NT_RelativeLocationPath])
			}
		case slot.RelativeLocationPath2R0: // RelativeLocationPath : ∙AbbreviatedRelativeLocationPath

			p.call(slot.RelativeLocationPath2R1, cU, p.cI)
		case slot.RelativeLocationPath2R1: // RelativeLocationPath : AbbreviatedRelativeLocationPath ∙

			if p.follow(symbols.NT_RelativeLocationPath) {
				p.rtn(symbols.NT_RelativeLocationPath, cU, p.cI)
			} else {
				p.parseError(slot.RelativeLocationPath2R0, p.cI, followSets[symbols.NT_RelativeLocationPath])
			}
		case slot.RelativeLocationPathWithStep0R0: // RelativeLocationPathWithStep : ∙RelativeLocationPath / Step

			p.call(slot.RelativeLocationPathWithStep0R1, cU, p.cI)
		case slot.RelativeLocationPathWithStep0R1: // RelativeLocationPathWithStep : RelativeLocationPath ∙/ Step

			if !p.testSelect(slot.RelativeLocationPathWithStep0R1) {
				p.parseError(slot.RelativeLocationPathWithStep0R1, p.cI, first[slot.RelativeLocationPathWithStep0R1])
				break
			}

			p.bsrSet.Add(slot.RelativeLocationPathWithStep0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RelativeLocationPathWithStep0R2) {
				p.parseError(slot.RelativeLocationPathWithStep0R2, p.cI, first[slot.RelativeLocationPathWithStep0R2])
				break
			}

			p.call(slot.RelativeLocationPathWithStep0R3, cU, p.cI)
		case slot.RelativeLocationPathWithStep0R3: // RelativeLocationPathWithStep : RelativeLocationPath / Step ∙

			if p.follow(symbols.NT_RelativeLocationPathWithStep) {
				p.rtn(symbols.NT_RelativeLocationPathWithStep, cU, p.cI)
			} else {
				p.parseError(slot.RelativeLocationPathWithStep0R0, p.cI, followSets[symbols.NT_RelativeLocationPathWithStep])
			}
		case slot.ReservedNameConflictResolver0R0: // ReservedNameConflictResolver : ∙ancestor

			p.bsrSet.Add(slot.ReservedNameConflictResolver0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver0R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver1R0: // ReservedNameConflictResolver : ∙ancestor-or-self

			p.bsrSet.Add(slot.ReservedNameConflictResolver1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver1R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver2R0: // ReservedNameConflictResolver : ∙attribute

			p.bsrSet.Add(slot.ReservedNameConflictResolver2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver2R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver3R0: // ReservedNameConflictResolver : ∙child

			p.bsrSet.Add(slot.ReservedNameConflictResolver3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver3R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver4R0: // ReservedNameConflictResolver : ∙descendant

			p.bsrSet.Add(slot.ReservedNameConflictResolver4R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver4R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver5R0: // ReservedNameConflictResolver : ∙descendant-or-self

			p.bsrSet.Add(slot.ReservedNameConflictResolver5R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver5R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver6R0: // ReservedNameConflictResolver : ∙following

			p.bsrSet.Add(slot.ReservedNameConflictResolver6R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver6R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver7R0: // ReservedNameConflictResolver : ∙following-sibling

			p.bsrSet.Add(slot.ReservedNameConflictResolver7R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver7R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver8R0: // ReservedNameConflictResolver : ∙namespace

			p.bsrSet.Add(slot.ReservedNameConflictResolver8R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver8R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver9R0: // ReservedNameConflictResolver : ∙parent

			p.bsrSet.Add(slot.ReservedNameConflictResolver9R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver9R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver10R0: // ReservedNameConflictResolver : ∙preceding

			p.bsrSet.Add(slot.ReservedNameConflictResolver10R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver10R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver11R0: // ReservedNameConflictResolver : ∙preceding-sibling

			p.bsrSet.Add(slot.ReservedNameConflictResolver11R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver11R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver12R0: // ReservedNameConflictResolver : ∙self

			p.bsrSet.Add(slot.ReservedNameConflictResolver12R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver12R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver13R0: // ReservedNameConflictResolver : ∙comment

			p.bsrSet.Add(slot.ReservedNameConflictResolver13R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver13R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver14R0: // ReservedNameConflictResolver : ∙text

			p.bsrSet.Add(slot.ReservedNameConflictResolver14R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver14R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver15R0: // ReservedNameConflictResolver : ∙processing-instruction

			p.bsrSet.Add(slot.ReservedNameConflictResolver15R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver15R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.ReservedNameConflictResolver16R0: // ReservedNameConflictResolver : ∙node

			p.bsrSet.Add(slot.ReservedNameConflictResolver16R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ReservedNameConflictResolver) {
				p.rtn(symbols.NT_ReservedNameConflictResolver, cU, p.cI)
			} else {
				p.parseError(slot.ReservedNameConflictResolver16R0, p.cI, followSets[symbols.NT_ReservedNameConflictResolver])
			}
		case slot.Step0R0: // Step : ∙NodeTestAndPredicate

			p.call(slot.Step0R1, cU, p.cI)
		case slot.Step0R1: // Step : NodeTestAndPredicate ∙

			if p.follow(symbols.NT_Step) {
				p.rtn(symbols.NT_Step, cU, p.cI)
			} else {
				p.parseError(slot.Step0R0, p.cI, followSets[symbols.NT_Step])
			}
		case slot.Step1R0: // Step : ∙NodeTest

			p.call(slot.Step1R1, cU, p.cI)
		case slot.Step1R1: // Step : NodeTest ∙

			if p.follow(symbols.NT_Step) {
				p.rtn(symbols.NT_Step, cU, p.cI)
			} else {
				p.parseError(slot.Step1R0, p.cI, followSets[symbols.NT_Step])
			}
		case slot.Step2R0: // Step : ∙StepWithAxisAndNodeTestAndPredicate

			p.call(slot.Step2R1, cU, p.cI)
		case slot.Step2R1: // Step : StepWithAxisAndNodeTestAndPredicate ∙

			if p.follow(symbols.NT_Step) {
				p.rtn(symbols.NT_Step, cU, p.cI)
			} else {
				p.parseError(slot.Step2R0, p.cI, followSets[symbols.NT_Step])
			}
		case slot.Step3R0: // Step : ∙StepWithAxisAndNodeTest

			p.call(slot.Step3R1, cU, p.cI)
		case slot.Step3R1: // Step : StepWithAxisAndNodeTest ∙

			if p.follow(symbols.NT_Step) {
				p.rtn(symbols.NT_Step, cU, p.cI)
			} else {
				p.parseError(slot.Step3R0, p.cI, followSets[symbols.NT_Step])
			}
		case slot.Step4R0: // Step : ∙AbbreviatedStep

			p.call(slot.Step4R1, cU, p.cI)
		case slot.Step4R1: // Step : AbbreviatedStep ∙

			if p.follow(symbols.NT_Step) {
				p.rtn(symbols.NT_Step, cU, p.cI)
			} else {
				p.parseError(slot.Step4R0, p.cI, followSets[symbols.NT_Step])
			}
		case slot.Step5R0: // Step : ∙FunctionCall

			p.call(slot.Step5R1, cU, p.cI)
		case slot.Step5R1: // Step : FunctionCall ∙

			if p.follow(symbols.NT_Step) {
				p.rtn(symbols.NT_Step, cU, p.cI)
			} else {
				p.parseError(slot.Step5R0, p.cI, followSets[symbols.NT_Step])
			}
		case slot.StepWithAxisAndNodeTest0R0: // StepWithAxisAndNodeTest : ∙AxisSpecifier NodeTest

			p.call(slot.StepWithAxisAndNodeTest0R1, cU, p.cI)
		case slot.StepWithAxisAndNodeTest0R1: // StepWithAxisAndNodeTest : AxisSpecifier ∙NodeTest

			if !p.testSelect(slot.StepWithAxisAndNodeTest0R1) {
				p.parseError(slot.StepWithAxisAndNodeTest0R1, p.cI, first[slot.StepWithAxisAndNodeTest0R1])
				break
			}

			p.call(slot.StepWithAxisAndNodeTest0R2, cU, p.cI)
		case slot.StepWithAxisAndNodeTest0R2: // StepWithAxisAndNodeTest : AxisSpecifier NodeTest ∙

			if p.follow(symbols.NT_StepWithAxisAndNodeTest) {
				p.rtn(symbols.NT_StepWithAxisAndNodeTest, cU, p.cI)
			} else {
				p.parseError(slot.StepWithAxisAndNodeTest0R0, p.cI, followSets[symbols.NT_StepWithAxisAndNodeTest])
			}
		case slot.StepWithAxisAndNodeTestAndPredicate0R0: // StepWithAxisAndNodeTestAndPredicate : ∙StepWithAxisAndNodeTest StepWithPredicate

			p.call(slot.StepWithAxisAndNodeTestAndPredicate0R1, cU, p.cI)
		case slot.StepWithAxisAndNodeTestAndPredicate0R1: // StepWithAxisAndNodeTestAndPredicate : StepWithAxisAndNodeTest ∙StepWithPredicate

			if !p.testSelect(slot.StepWithAxisAndNodeTestAndPredicate0R1) {
				p.parseError(slot.StepWithAxisAndNodeTestAndPredicate0R1, p.cI, first[slot.StepWithAxisAndNodeTestAndPredicate0R1])
				break
			}

			p.call(slot.StepWithAxisAndNodeTestAndPredicate0R2, cU, p.cI)
		case slot.StepWithAxisAndNodeTestAndPredicate0R2: // StepWithAxisAndNodeTestAndPredicate : StepWithAxisAndNodeTest StepWithPredicate ∙

			if p.follow(symbols.NT_StepWithAxisAndNodeTestAndPredicate) {
				p.rtn(symbols.NT_StepWithAxisAndNodeTestAndPredicate, cU, p.cI)
			} else {
				p.parseError(slot.StepWithAxisAndNodeTestAndPredicate0R0, p.cI, followSets[symbols.NT_StepWithAxisAndNodeTestAndPredicate])
			}
		case slot.StepWithPredicate0R0: // StepWithPredicate : ∙StepWithPredicateWithAnotherPredicate

			p.call(slot.StepWithPredicate0R1, cU, p.cI)
		case slot.StepWithPredicate0R1: // StepWithPredicate : StepWithPredicateWithAnotherPredicate ∙

			if p.follow(symbols.NT_StepWithPredicate) {
				p.rtn(symbols.NT_StepWithPredicate, cU, p.cI)
			} else {
				p.parseError(slot.StepWithPredicate0R0, p.cI, followSets[symbols.NT_StepWithPredicate])
			}
		case slot.StepWithPredicate1R0: // StepWithPredicate : ∙Predicate

			p.call(slot.StepWithPredicate1R1, cU, p.cI)
		case slot.StepWithPredicate1R1: // StepWithPredicate : Predicate ∙

			if p.follow(symbols.NT_StepWithPredicate) {
				p.rtn(symbols.NT_StepWithPredicate, cU, p.cI)
			} else {
				p.parseError(slot.StepWithPredicate1R0, p.cI, followSets[symbols.NT_StepWithPredicate])
			}
		case slot.StepWithPredicateWithAnotherPredicate0R0: // StepWithPredicateWithAnotherPredicate : ∙Predicate StepWithPredicate

			p.call(slot.StepWithPredicateWithAnotherPredicate0R1, cU, p.cI)
		case slot.StepWithPredicateWithAnotherPredicate0R1: // StepWithPredicateWithAnotherPredicate : Predicate ∙StepWithPredicate

			if !p.testSelect(slot.StepWithPredicateWithAnotherPredicate0R1) {
				p.parseError(slot.StepWithPredicateWithAnotherPredicate0R1, p.cI, first[slot.StepWithPredicateWithAnotherPredicate0R1])
				break
			}

			p.call(slot.StepWithPredicateWithAnotherPredicate0R2, cU, p.cI)
		case slot.StepWithPredicateWithAnotherPredicate0R2: // StepWithPredicateWithAnotherPredicate : Predicate StepWithPredicate ∙

			if p.follow(symbols.NT_StepWithPredicateWithAnotherPredicate) {
				p.rtn(symbols.NT_StepWithPredicateWithAnotherPredicate, cU, p.cI)
			} else {
				p.parseError(slot.StepWithPredicateWithAnotherPredicate0R0, p.cI, followSets[symbols.NT_StepWithPredicateWithAnotherPredicate])
			}
		case slot.UnaryExpr0R0: // UnaryExpr : ∙UnionExpr

			p.call(slot.UnaryExpr0R1, cU, p.cI)
		case slot.UnaryExpr0R1: // UnaryExpr : UnionExpr ∙

			if p.follow(symbols.NT_UnaryExpr) {
				p.rtn(symbols.NT_UnaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.UnaryExpr0R0, p.cI, followSets[symbols.NT_UnaryExpr])
			}
		case slot.UnaryExpr1R0: // UnaryExpr : ∙UnaryExprNegate

			p.call(slot.UnaryExpr1R1, cU, p.cI)
		case slot.UnaryExpr1R1: // UnaryExpr : UnaryExprNegate ∙

			if p.follow(symbols.NT_UnaryExpr) {
				p.rtn(symbols.NT_UnaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.UnaryExpr1R0, p.cI, followSets[symbols.NT_UnaryExpr])
			}
		case slot.UnaryExprNegate0R0: // UnaryExprNegate : ∙- UnaryExpr

			p.bsrSet.Add(slot.UnaryExprNegate0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.UnaryExprNegate0R1) {
				p.parseError(slot.UnaryExprNegate0R1, p.cI, first[slot.UnaryExprNegate0R1])
				break
			}

			p.call(slot.UnaryExprNegate0R2, cU, p.cI)
		case slot.UnaryExprNegate0R2: // UnaryExprNegate : - UnaryExpr ∙

			if p.follow(symbols.NT_UnaryExprNegate) {
				p.rtn(symbols.NT_UnaryExprNegate, cU, p.cI)
			} else {
				p.parseError(slot.UnaryExprNegate0R0, p.cI, followSets[symbols.NT_UnaryExprNegate])
			}
		case slot.UnionExpr0R0: // UnionExpr : ∙PathExpr

			p.call(slot.UnionExpr0R1, cU, p.cI)
		case slot.UnionExpr0R1: // UnionExpr : PathExpr ∙

			if p.follow(symbols.NT_UnionExpr) {
				p.rtn(symbols.NT_UnionExpr, cU, p.cI)
			} else {
				p.parseError(slot.UnionExpr0R0, p.cI, followSets[symbols.NT_UnionExpr])
			}
		case slot.UnionExpr1R0: // UnionExpr : ∙UnionExprUnion

			p.call(slot.UnionExpr1R1, cU, p.cI)
		case slot.UnionExpr1R1: // UnionExpr : UnionExprUnion ∙

			if p.follow(symbols.NT_UnionExpr) {
				p.rtn(symbols.NT_UnionExpr, cU, p.cI)
			} else {
				p.parseError(slot.UnionExpr1R0, p.cI, followSets[symbols.NT_UnionExpr])
			}
		case slot.UnionExprUnion0R0: // UnionExprUnion : ∙UnionExpr | PathExpr

			p.call(slot.UnionExprUnion0R1, cU, p.cI)
		case slot.UnionExprUnion0R1: // UnionExprUnion : UnionExpr ∙| PathExpr

			if !p.testSelect(slot.UnionExprUnion0R1) {
				p.parseError(slot.UnionExprUnion0R1, p.cI, first[slot.UnionExprUnion0R1])
				break
			}

			p.bsrSet.Add(slot.UnionExprUnion0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.UnionExprUnion0R2) {
				p.parseError(slot.UnionExprUnion0R2, p.cI, first[slot.UnionExprUnion0R2])
				break
			}

			p.call(slot.UnionExprUnion0R3, cU, p.cI)
		case slot.UnionExprUnion0R3: // UnionExprUnion : UnionExpr | PathExpr ∙

			if p.follow(symbols.NT_UnionExprUnion) {
				p.rtn(symbols.NT_UnionExprUnion, cU, p.cI)
			} else {
				p.parseError(slot.UnionExprUnion0R0, p.cI, followSets[symbols.NT_UnionExprUnion])
			}
		case slot.VariableReference0R0: // VariableReference : ∙variableReference

			p.bsrSet.Add(slot.VariableReference0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_VariableReference) {
				p.rtn(symbols.NT_VariableReference, cU, p.cI)
			} else {
				p.parseError(slot.VariableReference0R0, p.cI, followSets[symbols.NT_VariableReference])
			}

		default:
			panic("This must not happen")
		}
	}
	if !p.bsrSet.Contain(symbols.NT_OrExpr, 0, m) {
		p.sortParseErrors()
		return nil, p.parseErrors
	}
	return p.bsrSet, nil
}

func (p *parser) ntAdd(nt symbols.NT, j int) {
	// fmt.Printf("p.ntAdd(%s, %d)\n", nt, j)
	failed := true
	expected := map[token.Type]string{}
	for _, l := range slot.GetAlternates(nt) {
		if p.testSelect(l) {
			p.dscAdd(l, j, j)
			failed = false
		} else {
			for k, v := range first[l] {
				expected[k] = v
			}
		}
	}
	if failed {
		for _, l := range slot.GetAlternates(nt) {
			p.parseError(l, j, expected)
		}
	}
}

/*** Call Return Forest ***/

type poppedNode struct {
	X    symbols.NT
	k, j int
}

type clusterNode struct {
	X symbols.NT
	k int
}

type crfNode struct {
	L slot.Label
	i int
}

/*
suppose that L is Y ::=αX ·β
if there is no CRF node labelled (L,i)
	create one let u be the CRF node labelled (L,i)
if there is no CRF node labelled (X, j) {
	create a CRF node v labelled (X, j)
	create an edge from v to u
	ntAdd(X, j)
} else {
	let v be the CRF node labelled (X, j)
	if there is not an edge from v to u {
		create an edge from v to u
		for all ((X, j,h)∈P) {
			dscAdd(L, i, h);
			bsrAdd(L, i, j, h)
		}
	}
}
*/
func (p *parser) call(L slot.Label, i, j int) {
	// fmt.Printf("p.call(%s,%d,%d)\n", L,i,j)
	u, exist := p.crfNodes[crfNode{L, i}]
	// fmt.Printf("  u exist=%t\n", exist)
	if !exist {
		u = &crfNode{L, i}
		p.crfNodes[*u] = u
	}
	X := L.Symbols()[L.Pos()-1].(symbols.NT)
	ndV := clusterNode{X, j}
	v, exist := p.crf[ndV]
	if !exist {
		// fmt.Println("  v !exist")
		p.crf[ndV] = []*crfNode{u}
		p.ntAdd(X, j)
	} else {
		// fmt.Println("  v exist")
		if !existEdge(v, u) {
			// fmt.Printf("  !existEdge(%v)\n", u)
			p.crf[ndV] = append(v, u)
			// fmt.Printf("|popped|=%d\n", len(popped))
			for pnd := range p.popped {
				if pnd.X == X && pnd.k == j {
					p.dscAdd(L, i, pnd.j)
					p.bsrSet.Add(L, i, j, pnd.j)
				}
			}
		}
	}
}

func existEdge(nds []*crfNode, nd *crfNode) bool {
	for _, nd1 := range nds {
		if nd1 == nd {
			return true
		}
	}
	return false
}

func (p *parser) rtn(X symbols.NT, k, j int) {
	// fmt.Printf("p.rtn(%s,%d,%d)\n", X,k,j)
	pn := poppedNode{X, k, j}
	if _, exist := p.popped[pn]; !exist {
		p.popped[pn] = true
		for _, nd := range p.crf[clusterNode{X, k}] {
			p.dscAdd(nd.L, nd.i, j)
			p.bsrSet.Add(nd.L, nd.i, k, j)
		}
	}
}

// func CRFString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("CRF: {")
// 	for cn, nds := range crf{
// 		for _, nd := range nds {
// 			fmt.Fprintf(buf, "%s->%s, ", cn, nd)
// 		}
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

func (cn clusterNode) String() string {
	return fmt.Sprintf("(%s,%d)", cn.X, cn.k)
}

func (n crfNode) String() string {
	return fmt.Sprintf("(%s,%d)", n.L.String(), n.i)
}

// func PoppedString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("Popped: {")
// 	for p, _ := range popped {
// 		fmt.Fprintf(buf, "(%s,%d,%d) ", p.X, p.k, p.j)
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

/*** descriptors ***/

type descriptors struct {
	set []*descriptor
}

func (ds *descriptors) contain(d *descriptor) bool {
	for _, d1 := range ds.set {
		if d1 == d {
			return true
		}
	}
	return false
}

func (ds *descriptors) empty() bool {
	return len(ds.set) == 0
}

func (ds *descriptors) String() string {
	buf := new(bytes.Buffer)
	buf.WriteString("{")
	for i, d := range ds.set {
		if i > 0 {
			buf.WriteString("; ")
		}
		fmt.Fprintf(buf, "%s", d)
	}
	buf.WriteString("}")
	return buf.String()
}

type descriptor struct {
	L slot.Label
	k int
	i int
}

func (d *descriptor) String() string {
	return fmt.Sprintf("%s,%d,%d", d.L, d.k, d.i)
}

func (p *parser) dscAdd(L slot.Label, k, i int) {
	// fmt.Printf("p.dscAdd(%s,%d,%d)\n", L, k, i)
	d := &descriptor{L, k, i}
	if !p.U.contain(d) {
		p.R.set = append(p.R.set, d)
		p.U.set = append(p.U.set, d)
	}
}

func (ds *descriptors) remove() (L slot.Label, k, i int) {
	d := ds.set[len(ds.set)-1]
	ds.set = ds.set[:len(ds.set)-1]
	// fmt.Printf("remove: %s,%d,%d\n", d.L, d.k, d.i)
	return d.L, d.k, d.i
}

func (p *parser) DumpDescriptors() {
	p.DumpR()
	p.DumpU()
}

func (p *parser) DumpR() {
	fmt.Println("R:")
	for _, d := range p.R.set {
		fmt.Printf(" %s\n", d)
	}
}

func (p *parser) DumpU() {
	fmt.Println("U:")
	for _, d := range p.U.set {
		fmt.Printf(" %s\n", d)
	}
}

/*** TestSelect ***/

func (p *parser) follow(nt symbols.NT) bool {
	_, exist := followSets[nt][p.lex.Tokens[p.cI].Type()]
	return exist
}

func (p *parser) testSelect(l slot.Label) bool {
	_, exist := first[l][p.lex.Tokens[p.cI].Type()]
	// fmt.Printf("testSelect(%s) = %t\n", l, exist)
	return exist
}

var first = []map[token.Type]string{
	// AbbreviatedAbsoluteLocationPath : ∙// RelativeLocationPath
	{
		token.T_10: "//",
	},
	// AbbreviatedAbsoluteLocationPath : // ∙RelativeLocationPath
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AbbreviatedAbsoluteLocationPath : // RelativeLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedAxisSpecifier : ∙@
	{
		token.T_18: "@",
	},
	// AbbreviatedAxisSpecifier : @ ∙
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AbbreviatedRelativeLocationPath : ∙RelativeLocationPath // Step
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AbbreviatedRelativeLocationPath : RelativeLocationPath ∙// Step
	{
		token.T_10: "//",
	},
	// AbbreviatedRelativeLocationPath : RelativeLocationPath // ∙Step
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AbbreviatedRelativeLocationPath : RelativeLocationPath // Step ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedStep : ∙AbbreviatedStepSelf
	{
		token.T_7: ".",
	},
	// AbbreviatedStep : AbbreviatedStepSelf ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedStep : ∙AbbreviatedStepParent
	{
		token.T_8: "..",
	},
	// AbbreviatedStep : AbbreviatedStepParent ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedStepParent : ∙..
	{
		token.T_8: "..",
	},
	// AbbreviatedStepParent : .. ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedStepSelf : ∙.
	{
		token.T_7: ".",
	},
	// AbbreviatedStepSelf : . ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPath : ∙AbsoluteLocationPathOnly
	{
		token.T_9: "/",
	},
	// AbsoluteLocationPath : AbsoluteLocationPathOnly ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPath : ∙AbsoluteLocationPathWithRelative
	{
		token.T_9: "/",
	},
	// AbsoluteLocationPath : AbsoluteLocationPathWithRelative ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPath : ∙AbbreviatedAbsoluteLocationPath
	{
		token.T_10: "//",
	},
	// AbsoluteLocationPath : AbbreviatedAbsoluteLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPathOnly : ∙/
	{
		token.T_9: "/",
	},
	// AbsoluteLocationPathOnly : / ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPathWithRelative : ∙/ RelativeLocationPath
	{
		token.T_9: "/",
	},
	// AbsoluteLocationPathWithRelative : / ∙RelativeLocationPath
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AbsoluteLocationPathWithRelative : / RelativeLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AdditiveExpr : ∙MultiplicativeExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AdditiveExpr : MultiplicativeExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AdditiveExpr : ∙AdditiveExprAdd
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AdditiveExpr : AdditiveExprAdd ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AdditiveExpr : ∙AdditiveExprSubtract
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AdditiveExpr : AdditiveExprSubtract ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AdditiveExprAdd : ∙AdditiveExpr + MultiplicativeExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AdditiveExprAdd : AdditiveExpr ∙+ MultiplicativeExpr
	{
		token.T_4: "+",
	},
	// AdditiveExprAdd : AdditiveExpr + ∙MultiplicativeExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AdditiveExprAdd : AdditiveExpr + MultiplicativeExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AdditiveExprSubtract : ∙AdditiveExpr - MultiplicativeExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AdditiveExprSubtract : AdditiveExpr ∙- MultiplicativeExpr
	{
		token.T_6: "-",
	},
	// AdditiveExprSubtract : AdditiveExpr - ∙MultiplicativeExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AdditiveExprSubtract : AdditiveExpr - MultiplicativeExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AndExpr : ∙EqualityExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AndExpr : EqualityExpr ∙
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AndExpr : ∙AndExprAnd
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AndExpr : AndExprAnd ∙
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AndExprAnd : ∙AndExpr and EqualityExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AndExprAnd : AndExpr ∙and EqualityExpr
	{
		token.T_23: "and",
	},
	// AndExprAnd : AndExpr and ∙EqualityExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// AndExprAnd : AndExpr and EqualityExpr ∙
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AxisName : ∙ancestor
	{
		token.T_21: "ancestor",
	},
	// AxisName : ancestor ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙ancestor-or-self
	{
		token.T_22: "ancestor-or-self",
	},
	// AxisName : ancestor-or-self ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙attribute
	{
		token.T_24: "attribute",
	},
	// AxisName : attribute ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙child
	{
		token.T_25: "child",
	},
	// AxisName : child ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙descendant
	{
		token.T_27: "descendant",
	},
	// AxisName : descendant ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙descendant-or-self
	{
		token.T_28: "descendant-or-self",
	},
	// AxisName : descendant-or-self ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙following
	{
		token.T_32: "following",
	},
	// AxisName : following ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙following-sibling
	{
		token.T_33: "following-sibling",
	},
	// AxisName : following-sibling ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙namespace
	{
		token.T_35: "namespace",
	},
	// AxisName : namespace ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙parent
	{
		token.T_39: "parent",
	},
	// AxisName : parent ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙preceding
	{
		token.T_40: "preceding",
	},
	// AxisName : preceding ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙preceding-sibling
	{
		token.T_41: "preceding-sibling",
	},
	// AxisName : preceding-sibling ∙
	{
		token.T_12: "::",
	},
	// AxisName : ∙self
	{
		token.T_43: "self",
	},
	// AxisName : self ∙
	{
		token.T_12: "::",
	},
	// AxisSpecifier : ∙AxisSpecifierWithAxisName
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_43: "self",
	},
	// AxisSpecifier : AxisSpecifierWithAxisName ∙
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AxisSpecifier : ∙AbbreviatedAxisSpecifier
	{
		token.T_18: "@",
	},
	// AxisSpecifier : AbbreviatedAxisSpecifier ∙
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AxisSpecifierWithAxisName : ∙AxisName ::
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_43: "self",
	},
	// AxisSpecifierWithAxisName : AxisName ∙::
	{
		token.T_12: "::",
	},
	// AxisSpecifierWithAxisName : AxisName :: ∙
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// EqualityExpr : ∙RelationalExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// EqualityExpr : RelationalExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// EqualityExpr : ∙EqualityExprEqual
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// EqualityExpr : EqualityExprEqual ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// EqualityExpr : ∙EqualityExprNotEqual
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// EqualityExpr : EqualityExprNotEqual ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// EqualityExprEqual : ∙EqualityExpr = RelationalExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// EqualityExprEqual : EqualityExpr ∙= RelationalExpr
	{
		token.T_15: "=",
	},
	// EqualityExprEqual : EqualityExpr = ∙RelationalExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// EqualityExprEqual : EqualityExpr = RelationalExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// EqualityExprNotEqual : ∙EqualityExpr != RelationalExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// EqualityExprNotEqual : EqualityExpr ∙!= RelationalExpr
	{
		token.T_0: "!=",
	},
	// EqualityExprNotEqual : EqualityExpr != ∙RelationalExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// EqualityExprNotEqual : EqualityExpr != RelationalExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// FilterExpr : ∙PrimaryExpr
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// FilterExpr : PrimaryExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FilterExpr : ∙FilterExprWithPredicate
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// FilterExpr : FilterExprWithPredicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FilterExprWithPredicate : ∙FilterExpr Predicate
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// FilterExprWithPredicate : FilterExpr ∙Predicate
	{
		token.T_19: "[",
	},
	// FilterExprWithPredicate : FilterExpr Predicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCall : ∙QName ( FunctionSignature
	{
		token.T_36: "ncname",
	},
	// FunctionCall : QName ∙( FunctionSignature
	{
		token.T_1: "(",
	},
	// FunctionCall : QName ( ∙FunctionSignature
	{
		token.T_1:  "(",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// FunctionCall : QName ( FunctionSignature ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCallArgumentList : ∙FunctionCallArgumentListArgWithNext
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// FunctionCallArgumentList : FunctionCallArgumentListArgWithNext ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCallArgumentList : ∙FunctionCallArgumentListEndArg
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// FunctionCallArgumentList : FunctionCallArgumentListEndArg ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCallArgumentListArgWithNext : ∙OrExpr , FunctionCallArgumentList
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// FunctionCallArgumentListArgWithNext : OrExpr ∙, FunctionCallArgumentList
	{
		token.T_5: ",",
	},
	// FunctionCallArgumentListArgWithNext : OrExpr , ∙FunctionCallArgumentList
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// FunctionCallArgumentListArgWithNext : OrExpr , FunctionCallArgumentList ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCallArgumentListEndArg : ∙OrExpr )
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// FunctionCallArgumentListEndArg : OrExpr ∙)
	{
		token.T_2: ")",
	},
	// FunctionCallArgumentListEndArg : OrExpr ) ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionSignature : ∙FunctionSignatureNoArgs
	{
		token.T_2: ")",
	},
	// FunctionSignature : FunctionSignatureNoArgs ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionSignature : ∙FunctionCallArgumentList
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// FunctionSignature : FunctionCallArgumentList ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionSignatureNoArgs : ∙)
	{
		token.T_2: ")",
	},
	// FunctionSignatureNoArgs : ) ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Literal : ∙singlequote
	{
		token.T_44: "singlequote",
	},
	// Literal : singlequote ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Literal : ∙doublequote
	{
		token.T_31: "doublequote",
	},
	// Literal : doublequote ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// LocationPath : ∙RelativeLocationPath
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// LocationPath : RelativeLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// LocationPath : ∙AbsoluteLocationPath
	{
		token.T_9:  "/",
		token.T_10: "//",
	},
	// LocationPath : AbsoluteLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// MultiplicativeExpr : ∙UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExpr : UnaryExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExpr : ∙MultiplicativeExprMultiply
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExpr : MultiplicativeExprMultiply ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExpr : ∙MultiplicativeExprDivide
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExpr : MultiplicativeExprDivide ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExpr : ∙MultiplicativeExprMod
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExpr : MultiplicativeExprMod ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExprDivide : ∙MultiplicativeExpr div UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExprDivide : MultiplicativeExpr ∙div UnaryExpr
	{
		token.T_30: "div",
	},
	// MultiplicativeExprDivide : MultiplicativeExpr div ∙UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExprDivide : MultiplicativeExpr div UnaryExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExprMod : ∙MultiplicativeExpr mod UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExprMod : MultiplicativeExpr ∙mod UnaryExpr
	{
		token.T_34: "mod",
	},
	// MultiplicativeExprMod : MultiplicativeExpr mod ∙UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExprMod : MultiplicativeExpr mod UnaryExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExprMultiply : ∙MultiplicativeExpr * UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExprMultiply : MultiplicativeExpr ∙* UnaryExpr
	{
		token.T_3: "*",
	},
	// MultiplicativeExprMultiply : MultiplicativeExpr * ∙UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// MultiplicativeExprMultiply : MultiplicativeExpr * UnaryExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// NameTestAnyElement : ∙*
	{
		token.T_3: "*",
	},
	// NameTestAnyElement : * ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestLocalAnyNamespace : ∙* : ncname
	{
		token.T_3: "*",
	},
	// NameTestLocalAnyNamespace : * ∙: ncname
	{
		token.T_11: ":",
	},
	// NameTestLocalAnyNamespace : * : ∙ncname
	{
		token.T_36: "ncname",
	},
	// NameTestLocalAnyNamespace : * : ncname ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestLocalAnyNamespaceReservedNameConflict : ∙* : ReservedNameConflictResolver
	{
		token.T_3: "*",
	},
	// NameTestLocalAnyNamespaceReservedNameConflict : * ∙: ReservedNameConflictResolver
	{
		token.T_11: ":",
	},
	// NameTestLocalAnyNamespaceReservedNameConflict : * : ∙ReservedNameConflictResolver
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NameTestLocalAnyNamespaceReservedNameConflict : * : ReservedNameConflictResolver ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestNamespaceAnyLocal : ∙ncname : *
	{
		token.T_36: "ncname",
	},
	// NameTestNamespaceAnyLocal : ncname ∙: *
	{
		token.T_11: ":",
	},
	// NameTestNamespaceAnyLocal : ncname : ∙*
	{
		token.T_3: "*",
	},
	// NameTestNamespaceAnyLocal : ncname : * ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestNamespaceAnyLocalReservedNameConflict : ∙ReservedNameConflictResolver : *
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NameTestNamespaceAnyLocalReservedNameConflict : ReservedNameConflictResolver ∙: *
	{
		token.T_11: ":",
	},
	// NameTestNamespaceAnyLocalReservedNameConflict : ReservedNameConflictResolver : ∙*
	{
		token.T_3: "*",
	},
	// NameTestNamespaceAnyLocalReservedNameConflict : ReservedNameConflictResolver : * ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameLocalOnly : ∙ncname
	{
		token.T_36: "ncname",
	},
	// NameTestQNameLocalOnly : ncname ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameLocalOnlyReservedNameConflict : ∙ReservedNameConflictResolver
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NameTestQNameLocalOnlyReservedNameConflict : ReservedNameConflictResolver ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocal : ∙ncname : ncname
	{
		token.T_36: "ncname",
	},
	// NameTestQNameNamespaceWithLocal : ncname ∙: ncname
	{
		token.T_11: ":",
	},
	// NameTestQNameNamespaceWithLocal : ncname : ∙ncname
	{
		token.T_36: "ncname",
	},
	// NameTestQNameNamespaceWithLocal : ncname : ncname ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictBoth : ∙ReservedNameConflictResolver : ReservedNameConflictResolver
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictBoth : ReservedNameConflictResolver ∙: ReservedNameConflictResolver
	{
		token.T_11: ":",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictBoth : ReservedNameConflictResolver : ∙ReservedNameConflictResolver
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictBoth : ReservedNameConflictResolver : ReservedNameConflictResolver ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictLocal : ∙ncname : ReservedNameConflictResolver
	{
		token.T_36: "ncname",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictLocal : ncname ∙: ReservedNameConflictResolver
	{
		token.T_11: ":",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictLocal : ncname : ∙ReservedNameConflictResolver
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictLocal : ncname : ReservedNameConflictResolver ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictNamespace : ∙ReservedNameConflictResolver : ncname
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictNamespace : ReservedNameConflictResolver ∙: ncname
	{
		token.T_11: ":",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictNamespace : ReservedNameConflictResolver : ∙ncname
	{
		token.T_36: "ncname",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictNamespace : ReservedNameConflictResolver : ncname ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NodeTestNodeTypeNoArgTest
	{
		token.T_26: "comment",
		token.T_37: "node",
		token.T_42: "processing-instruction",
		token.T_45: "text",
	},
	// NodeTest : NodeTestNodeTypeNoArgTest ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NodeTestProcInstTargetTest
	{
		token.T_42: "processing-instruction",
	},
	// NodeTest : NodeTestProcInstTargetTest ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestAnyElement
	{
		token.T_3: "*",
	},
	// NodeTest : NameTestAnyElement ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestNamespaceAnyLocal
	{
		token.T_36: "ncname",
	},
	// NodeTest : NameTestNamespaceAnyLocal ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestNamespaceAnyLocalReservedNameConflict
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NodeTest : NameTestNamespaceAnyLocalReservedNameConflict ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestLocalAnyNamespace
	{
		token.T_3: "*",
	},
	// NodeTest : NameTestLocalAnyNamespace ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestLocalAnyNamespaceReservedNameConflict
	{
		token.T_3: "*",
	},
	// NodeTest : NameTestLocalAnyNamespaceReservedNameConflict ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestQNameNamespaceWithLocal
	{
		token.T_36: "ncname",
	},
	// NodeTest : NameTestQNameNamespaceWithLocal ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestQNameNamespaceWithLocalReservedNameConflictNamespace
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NodeTest : NameTestQNameNamespaceWithLocalReservedNameConflictNamespace ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestQNameNamespaceWithLocalReservedNameConflictLocal
	{
		token.T_36: "ncname",
	},
	// NodeTest : NameTestQNameNamespaceWithLocalReservedNameConflictLocal ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestQNameNamespaceWithLocalReservedNameConflictBoth
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NodeTest : NameTestQNameNamespaceWithLocalReservedNameConflictBoth ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestQNameLocalOnly
	{
		token.T_36: "ncname",
	},
	// NodeTest : NameTestQNameLocalOnly ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest : ∙NameTestQNameLocalOnlyReservedNameConflict
	{
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NodeTest : NameTestQNameLocalOnlyReservedNameConflict ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTestAndPredicate : ∙NodeTest StepWithPredicate
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// NodeTestAndPredicate : NodeTest ∙StepWithPredicate
	{
		token.T_19: "[",
	},
	// NodeTestAndPredicate : NodeTest StepWithPredicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTestNodeTypeNoArgTest : ∙NodeType ( )
	{
		token.T_26: "comment",
		token.T_37: "node",
		token.T_42: "processing-instruction",
		token.T_45: "text",
	},
	// NodeTestNodeTypeNoArgTest : NodeType ∙( )
	{
		token.T_1: "(",
	},
	// NodeTestNodeTypeNoArgTest : NodeType ( ∙)
	{
		token.T_2: ")",
	},
	// NodeTestNodeTypeNoArgTest : NodeType ( ) ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTestProcInstTargetTest : ∙processing-instruction ( Literal )
	{
		token.T_42: "processing-instruction",
	},
	// NodeTestProcInstTargetTest : processing-instruction ∙( Literal )
	{
		token.T_1: "(",
	},
	// NodeTestProcInstTargetTest : processing-instruction ( ∙Literal )
	{
		token.T_31: "doublequote",
		token.T_44: "singlequote",
	},
	// NodeTestProcInstTargetTest : processing-instruction ( Literal ∙)
	{
		token.T_2: ")",
	},
	// NodeTestProcInstTargetTest : processing-instruction ( Literal ) ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeType : ∙comment
	{
		token.T_26: "comment",
	},
	// NodeType : comment ∙
	{
		token.T_1: "(",
	},
	// NodeType : ∙text
	{
		token.T_45: "text",
	},
	// NodeType : text ∙
	{
		token.T_1: "(",
	},
	// NodeType : ∙processing-instruction
	{
		token.T_42: "processing-instruction",
	},
	// NodeType : processing-instruction ∙
	{
		token.T_1: "(",
	},
	// NodeType : ∙node
	{
		token.T_37: "node",
	},
	// NodeType : node ∙
	{
		token.T_1: "(",
	},
	// Number : ∙digits
	{
		token.T_29: "digits",
	},
	// Number : digits ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Number : ∙. digits
	{
		token.T_7: ".",
	},
	// Number : . ∙digits
	{
		token.T_29: "digits",
	},
	// Number : . digits ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Number : ∙digits . digits
	{
		token.T_29: "digits",
	},
	// Number : digits ∙. digits
	{
		token.T_7: ".",
	},
	// Number : digits . ∙digits
	{
		token.T_29: "digits",
	},
	// Number : digits . digits ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// OrExpr : ∙AndExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// OrExpr : AndExpr ∙
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_38: "or",
	},
	// OrExpr : ∙OrExprOr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// OrExpr : OrExprOr ∙
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_38: "or",
	},
	// OrExprOr : ∙OrExpr or AndExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// OrExprOr : OrExpr ∙or AndExpr
	{
		token.T_38: "or",
	},
	// OrExprOr : OrExpr or ∙AndExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// OrExprOr : OrExpr or AndExpr ∙
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_38: "or",
	},
	// PathExpr : ∙LocationPath
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// PathExpr : LocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PathExpr : ∙FilterExpr
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// PathExpr : FilterExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PathExpr : ∙PathExprFilterWithPath
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// PathExpr : PathExprFilterWithPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PathExpr : ∙PathExprFilterWithAbbreviatedPath
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// PathExpr : PathExprFilterWithAbbreviatedPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PathExprFilterWithAbbreviatedPath : ∙FilterExpr // RelativeLocationPath
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// PathExprFilterWithAbbreviatedPath : FilterExpr ∙// RelativeLocationPath
	{
		token.T_10: "//",
	},
	// PathExprFilterWithAbbreviatedPath : FilterExpr // ∙RelativeLocationPath
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// PathExprFilterWithAbbreviatedPath : FilterExpr // RelativeLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PathExprFilterWithPath : ∙FilterExpr / RelativeLocationPath
	{
		token.T_1:  "(",
		token.T_7:  ".",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_36: "ncname",
		token.T_44: "singlequote",
		token.T_46: "variableReference",
	},
	// PathExprFilterWithPath : FilterExpr ∙/ RelativeLocationPath
	{
		token.T_9: "/",
	},
	// PathExprFilterWithPath : FilterExpr / ∙RelativeLocationPath
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// PathExprFilterWithPath : FilterExpr / RelativeLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Predicate : ∙[ OrExpr ]
	{
		token.T_19: "[",
	},
	// Predicate : [ ∙OrExpr ]
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// Predicate : [ OrExpr ∙]
	{
		token.T_20: "]",
	},
	// Predicate : [ OrExpr ] ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExpr : ∙PrimaryExprParenthetic
	{
		token.T_1: "(",
	},
	// PrimaryExpr : PrimaryExprParenthetic ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExpr : ∙Literal
	{
		token.T_31: "doublequote",
		token.T_44: "singlequote",
	},
	// PrimaryExpr : Literal ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExpr : ∙Number
	{
		token.T_7:  ".",
		token.T_29: "digits",
	},
	// PrimaryExpr : Number ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExpr : ∙VariableReference
	{
		token.T_46: "variableReference",
	},
	// PrimaryExpr : VariableReference ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExpr : ∙FunctionCall
	{
		token.T_36: "ncname",
	},
	// PrimaryExpr : FunctionCall ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExprParenthetic : ∙( OrExpr )
	{
		token.T_1: "(",
	},
	// PrimaryExprParenthetic : ( ∙OrExpr )
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// PrimaryExprParenthetic : ( OrExpr ∙)
	{
		token.T_2: ")",
	},
	// PrimaryExprParenthetic : ( OrExpr ) ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// QName : ∙QNameLocalOnly
	{
		token.T_36: "ncname",
	},
	// QName : QNameLocalOnly ∙
	{
		token.T_1: "(",
	},
	// QName : ∙QNameNamespaceWithLocal
	{
		token.T_36: "ncname",
	},
	// QName : QNameNamespaceWithLocal ∙
	{
		token.T_1: "(",
	},
	// QNameLocalOnly : ∙ncname
	{
		token.T_36: "ncname",
	},
	// QNameLocalOnly : ncname ∙
	{
		token.T_1: "(",
	},
	// QNameNamespaceWithLocal : ∙ncname : ncname
	{
		token.T_36: "ncname",
	},
	// QNameNamespaceWithLocal : ncname ∙: ncname
	{
		token.T_11: ":",
	},
	// QNameNamespaceWithLocal : ncname : ∙ncname
	{
		token.T_36: "ncname",
	},
	// QNameNamespaceWithLocal : ncname : ncname ∙
	{
		token.T_1: "(",
	},
	// RelationalExpr : ∙AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExpr : AdditiveExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExpr : ∙RelationalExprLessThan
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExpr : RelationalExprLessThan ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExpr : ∙RelationalExprGreaterThan
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExpr : RelationalExprGreaterThan ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExpr : ∙RelationalExprLessThanOrEqual
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExpr : RelationalExprLessThanOrEqual ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExpr : ∙RelationalExprGreaterThanOrEqual
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExpr : RelationalExprGreaterThanOrEqual ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprGreaterThan : ∙RelationalExpr > AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprGreaterThan : RelationalExpr ∙> AdditiveExpr
	{
		token.T_16: ">",
	},
	// RelationalExprGreaterThan : RelationalExpr > ∙AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprGreaterThan : RelationalExpr > AdditiveExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprGreaterThanOrEqual : ∙RelationalExpr >= AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprGreaterThanOrEqual : RelationalExpr ∙>= AdditiveExpr
	{
		token.T_17: ">=",
	},
	// RelationalExprGreaterThanOrEqual : RelationalExpr >= ∙AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprGreaterThanOrEqual : RelationalExpr >= AdditiveExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprLessThan : ∙RelationalExpr < AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprLessThan : RelationalExpr ∙< AdditiveExpr
	{
		token.T_13: "<",
	},
	// RelationalExprLessThan : RelationalExpr < ∙AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprLessThan : RelationalExpr < AdditiveExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprLessThanOrEqual : ∙RelationalExpr <= AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprLessThanOrEqual : RelationalExpr ∙<= AdditiveExpr
	{
		token.T_14: "<=",
	},
	// RelationalExprLessThanOrEqual : RelationalExpr <= ∙AdditiveExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// RelationalExprLessThanOrEqual : RelationalExpr <= AdditiveExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelativeLocationPath : ∙Step
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// RelativeLocationPath : Step ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// RelativeLocationPath : ∙RelativeLocationPathWithStep
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// RelativeLocationPath : RelativeLocationPathWithStep ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// RelativeLocationPath : ∙AbbreviatedRelativeLocationPath
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// RelativeLocationPath : AbbreviatedRelativeLocationPath ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// RelativeLocationPathWithStep : ∙RelativeLocationPath / Step
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// RelativeLocationPathWithStep : RelativeLocationPath ∙/ Step
	{
		token.T_9: "/",
	},
	// RelativeLocationPathWithStep : RelativeLocationPath / ∙Step
	{
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// RelativeLocationPathWithStep : RelativeLocationPath / Step ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙ancestor
	{
		token.T_21: "ancestor",
	},
	// ReservedNameConflictResolver : ancestor ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙ancestor-or-self
	{
		token.T_22: "ancestor-or-self",
	},
	// ReservedNameConflictResolver : ancestor-or-self ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙attribute
	{
		token.T_24: "attribute",
	},
	// ReservedNameConflictResolver : attribute ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙child
	{
		token.T_25: "child",
	},
	// ReservedNameConflictResolver : child ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙descendant
	{
		token.T_27: "descendant",
	},
	// ReservedNameConflictResolver : descendant ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙descendant-or-self
	{
		token.T_28: "descendant-or-self",
	},
	// ReservedNameConflictResolver : descendant-or-self ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙following
	{
		token.T_32: "following",
	},
	// ReservedNameConflictResolver : following ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙following-sibling
	{
		token.T_33: "following-sibling",
	},
	// ReservedNameConflictResolver : following-sibling ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙namespace
	{
		token.T_35: "namespace",
	},
	// ReservedNameConflictResolver : namespace ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙parent
	{
		token.T_39: "parent",
	},
	// ReservedNameConflictResolver : parent ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙preceding
	{
		token.T_40: "preceding",
	},
	// ReservedNameConflictResolver : preceding ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙preceding-sibling
	{
		token.T_41: "preceding-sibling",
	},
	// ReservedNameConflictResolver : preceding-sibling ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙self
	{
		token.T_43: "self",
	},
	// ReservedNameConflictResolver : self ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙comment
	{
		token.T_26: "comment",
	},
	// ReservedNameConflictResolver : comment ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙text
	{
		token.T_45: "text",
	},
	// ReservedNameConflictResolver : text ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙processing-instruction
	{
		token.T_42: "processing-instruction",
	},
	// ReservedNameConflictResolver : processing-instruction ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver : ∙node
	{
		token.T_37: "node",
	},
	// ReservedNameConflictResolver : node ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Step : ∙NodeTestAndPredicate
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// Step : NodeTestAndPredicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Step : ∙NodeTest
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// Step : NodeTest ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Step : ∙StepWithAxisAndNodeTestAndPredicate
	{
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_43: "self",
	},
	// Step : StepWithAxisAndNodeTestAndPredicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Step : ∙StepWithAxisAndNodeTest
	{
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_43: "self",
	},
	// Step : StepWithAxisAndNodeTest ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Step : ∙AbbreviatedStep
	{
		token.T_7: ".",
		token.T_8: "..",
	},
	// Step : AbbreviatedStep ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Step : ∙FunctionCall
	{
		token.T_36: "ncname",
	},
	// Step : FunctionCall ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithAxisAndNodeTest : ∙AxisSpecifier NodeTest
	{
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_43: "self",
	},
	// StepWithAxisAndNodeTest : AxisSpecifier ∙NodeTest
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// StepWithAxisAndNodeTest : AxisSpecifier NodeTest ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithAxisAndNodeTestAndPredicate : ∙StepWithAxisAndNodeTest StepWithPredicate
	{
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_43: "self",
	},
	// StepWithAxisAndNodeTestAndPredicate : StepWithAxisAndNodeTest ∙StepWithPredicate
	{
		token.T_19: "[",
	},
	// StepWithAxisAndNodeTestAndPredicate : StepWithAxisAndNodeTest StepWithPredicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithPredicate : ∙StepWithPredicateWithAnotherPredicate
	{
		token.T_19: "[",
	},
	// StepWithPredicate : StepWithPredicateWithAnotherPredicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithPredicate : ∙Predicate
	{
		token.T_19: "[",
	},
	// StepWithPredicate : Predicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithPredicateWithAnotherPredicate : ∙Predicate StepWithPredicate
	{
		token.T_19: "[",
	},
	// StepWithPredicateWithAnotherPredicate : Predicate ∙StepWithPredicate
	{
		token.T_19: "[",
	},
	// StepWithPredicateWithAnotherPredicate : Predicate StepWithPredicate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// UnaryExpr : ∙UnionExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// UnaryExpr : UnionExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// UnaryExpr : ∙UnaryExprNegate
	{
		token.T_6: "-",
	},
	// UnaryExpr : UnaryExprNegate ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// UnaryExprNegate : ∙- UnaryExpr
	{
		token.T_6: "-",
	},
	// UnaryExprNegate : - ∙UnaryExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_6:  "-",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// UnaryExprNegate : - UnaryExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// UnionExpr : ∙PathExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// UnionExpr : PathExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// UnionExpr : ∙UnionExprUnion
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// UnionExpr : UnionExprUnion ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// UnionExprUnion : ∙UnionExpr | PathExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// UnionExprUnion : UnionExpr ∙| PathExpr
	{
		token.T_47: "|",
	},
	// UnionExprUnion : UnionExpr | ∙PathExpr
	{
		token.T_1:  "(",
		token.T_3:  "*",
		token.T_7:  ".",
		token.T_8:  "..",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_18: "@",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_29: "digits",
		token.T_31: "doublequote",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_44: "singlequote",
		token.T_45: "text",
		token.T_46: "variableReference",
	},
	// UnionExprUnion : UnionExpr | PathExpr ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// VariableReference : ∙variableReference
	{
		token.T_46: "variableReference",
	},
	// VariableReference : variableReference ∙
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
}

var followSets = []map[token.Type]string{
	// AbbreviatedAbsoluteLocationPath
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedAxisSpecifier
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AbbreviatedRelativeLocationPath
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedStep
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedStepParent
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbbreviatedStepSelf
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPath
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPathOnly
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AbsoluteLocationPathWithRelative
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// AdditiveExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AdditiveExprAdd
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AdditiveExprSubtract
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AndExpr
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AndExprAnd
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// AxisName
	{
		token.T_12: "::",
	},
	// AxisSpecifier
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// AxisSpecifierWithAxisName
	{
		token.T_3:  "*",
		token.T_21: "ancestor",
		token.T_22: "ancestor-or-self",
		token.T_24: "attribute",
		token.T_25: "child",
		token.T_26: "comment",
		token.T_27: "descendant",
		token.T_28: "descendant-or-self",
		token.T_32: "following",
		token.T_33: "following-sibling",
		token.T_35: "namespace",
		token.T_36: "ncname",
		token.T_37: "node",
		token.T_39: "parent",
		token.T_40: "preceding",
		token.T_41: "preceding-sibling",
		token.T_42: "processing-instruction",
		token.T_43: "self",
		token.T_45: "text",
	},
	// EqualityExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// EqualityExprEqual
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// EqualityExprNotEqual
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_15: "=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// FilterExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FilterExprWithPredicate
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCall
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCallArgumentList
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCallArgumentListArgWithNext
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionCallArgumentListEndArg
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionSignature
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// FunctionSignatureNoArgs
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Literal
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// LocationPath
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// MultiplicativeExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExprDivide
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExprMod
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// MultiplicativeExprMultiply
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// NameTestAnyElement
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestLocalAnyNamespace
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestLocalAnyNamespaceReservedNameConflict
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestNamespaceAnyLocal
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestNamespaceAnyLocalReservedNameConflict
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameLocalOnly
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameLocalOnlyReservedNameConflict
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocal
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictBoth
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictLocal
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NameTestQNameNamespaceWithLocalReservedNameConflictNamespace
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTest
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTestAndPredicate
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTestNodeTypeNoArgTest
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeTestProcInstTargetTest
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// NodeType
	{
		token.T_1: "(",
	},
	// Number
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// OrExpr
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_38: "or",
	},
	// OrExprOr
	{
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_20: "]",
		token.T_38: "or",
	},
	// PathExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PathExprFilterWithAbbreviatedPath
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PathExprFilterWithPath
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Predicate
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// PrimaryExprParenthetic
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// QName
	{
		token.T_1: "(",
	},
	// QNameLocalOnly
	{
		token.T_1: "(",
	},
	// QNameNamespaceWithLocal
	{
		token.T_1: "(",
	},
	// RelationalExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprGreaterThan
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprGreaterThanOrEqual
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprLessThan
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelationalExprLessThanOrEqual
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_5:  ",",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_38: "or",
	},
	// RelativeLocationPath
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// RelativeLocationPathWithStep
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// ReservedNameConflictResolver
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_11: ":",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// Step
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithAxisAndNodeTest
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithAxisAndNodeTestAndPredicate
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithPredicate
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// StepWithPredicateWithAnotherPredicate
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// UnaryExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// UnaryExprNegate
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
	},
	// UnionExpr
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// UnionExprUnion
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
	// VariableReference
	{
		token.T_0:  "!=",
		token.EOF:  "$",
		token.T_2:  ")",
		token.T_3:  "*",
		token.T_4:  "+",
		token.T_5:  ",",
		token.T_6:  "-",
		token.T_9:  "/",
		token.T_10: "//",
		token.T_13: "<",
		token.T_14: "<=",
		token.T_15: "=",
		token.T_16: ">",
		token.T_17: ">=",
		token.T_19: "[",
		token.T_20: "]",
		token.T_23: "and",
		token.T_30: "div",
		token.T_34: "mod",
		token.T_38: "or",
		token.T_47: "|",
	},
}

/*** Errors ***/

/*
Error is returned by Parse at every point at which the parser fails to parse
a grammar production. For non-LL-1 grammars there will be an error for each
alternate attempted by the parser.

The errors are sorted in descending order of input position (index of token in
the stream of tokens).

Normally the error of interest is the one that has parsed the largest number of
tokens.
*/
type Error struct {
	// Index of token that caused the error.
	cI int

	// Grammar slot at which the error occured.
	Slot slot.Label

	// The token at which the error occurred.
	Token *token.Token

	// The line and column in the input text at which the error occurred
	Line, Column int

	// The tokens expected at the point where the error occurred
	Expected map[token.Type]string
}

func (pe *Error) String() string {
	w := new(bytes.Buffer)
	fmt.Fprintf(w, "Parse Error: %s I[%d]=%s at line %d col %d\n",
		pe.Slot, pe.cI, pe.Token, pe.Line, pe.Column)
	exp := []string{}
	for _, e := range pe.Expected {
		exp = append(exp, e)
	}
	fmt.Fprintf(w, "Expected one of: [%s]", strings.Join(exp, ","))
	return w.String()
}

func (p *parser) parseError(slot slot.Label, i int, expected map[token.Type]string) {
	pe := &Error{cI: i, Slot: slot, Token: p.lex.Tokens[i], Expected: expected}
	p.parseErrors = append(p.parseErrors, pe)
}

func (p *parser) sortParseErrors() {
	sort.Slice(p.parseErrors,
		func(i, j int) bool {
			return p.parseErrors[j].Token.Lext() < p.parseErrors[i].Token.Lext()
		})
	for _, pe := range p.parseErrors {
		pe.Line, pe.Column = p.lex.GetLineColumn(pe.Token.Lext())
	}
}
